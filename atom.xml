<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keanu</title>
  
  <subtitle>Don&#39;t be mediocre!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ryan4cloud.github.io/"/>
  <updated>2020-03-14T05:58:54.719Z</updated>
  <id>http://ryan4cloud.github.io/</id>
  
  <author>
    <name>Keanu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AWS S3 &amp; IAM Summary</title>
    <link href="http://ryan4cloud.github.io/s3-iam-summary/"/>
    <id>http://ryan4cloud.github.io/s3-iam-summary/</id>
    <published>2020-03-14T06:52:49.000Z</published>
    <updated>2020-03-14T05:58:54.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IAM-Identity-Access-Management"><a href="#IAM-Identity-Access-Management" class="headerlink" title="IAM - Identity Access Management"></a>IAM - Identity Access Management</h1><p>IAM consists of the followings:</p><ul><li>Users</li><li>Groups</li><li>Roles</li><li>Policies</li></ul><a id="more"></a><p> We can use follow json data to custom policies:</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"Version"</span><span class="token operator">:</span> <span class="token string">"2020-03-14"</span><span class="token punctuation">,</span>  <span class="token property">"Statement"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"Effect"</span><span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>      <span class="token property">"Action"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>      <span class="token property">"Resource"</span><span class="token operator">:</span> <span class="token string">"*"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IAM-Knowledge-Point"><a href="#IAM-Knowledge-Point" class="headerlink" title="IAM Knowledge Point"></a>IAM Knowledge Point</h2><ul><li>IAM is universal. Does not apply to regions at this time</li><li>The “root account” is simply the account created when first setip your AWS account. It has complete Admin access.</li><li>New Users have No Permissions when first created</li><li>New Users are assigned <strong>Access Key ID</strong> and <strong>Access Keys</strong> when first created</li><li><strong>Access Key ID</strong> and <strong>Access Keys</strong> are not same as passwords. We can not use them to login in to the AWS console. But we can use them to access AWS via then APIs nad Command Line.</li><li>We can only view <strong>Access Keys</strong> once. If we lose them, we have to regenerate them.</li><li>IAM requires us to setup Mutifactor Authentication on our root account</li><li>We can create and customise our own password rotation policies</li></ul><h1 id="S3-Simple-Storage-Service"><a href="#S3-Simple-Storage-Service" class="headerlink" title="S3- Simple Storage Service"></a>S3- Simple Storage Service</h1><h2 id="S3-Knowledge-Point"><a href="#S3-Knowledge-Point" class="headerlink" title="S3 Knowledge Point"></a>S3 Knowledge Point</h2><ul><li>S3 is <strong>Object-based</strong>, allows us to upload files.</li><li>Files can be from 0 Bytes to 5 TB.</li><li>unlimited storage.</li><li>Files are stored is Buckets.</li><li><strong>S3 is a universal namespace</strong>. So the name of buckets have to be unique globally.</li><li>This is what the S3 url looks like: <a href="https://mscloudplatform.s3.amazonaws.com" target="_blank" rel="noopener">https://mscloudplatform.s3.amazonaws.com</a></li><li>Not suitable to install an operation system on like EBS.</li><li>Successful uploads will generate a HTTP 200 status code.</li></ul><p>By default, all newly created buckets are <strong>PRIVATE</strong>. We can setup access control to our buckets using:</p><ul><li>Bucket Policies</li><li>Access Control Lists</li></ul><p>S3 Buckets can be configured to create access logs which log all requests made to the S3 buckets. This can be sent to another bucket and even another bucket in another account.</p><h2 id="The-Key-Fundamentals-of-S3"><a href="#The-Key-Fundamentals-of-S3" class="headerlink" title="The Key Fundamentals of S3"></a>The Key Fundamentals of S3</h2><ul><li>Key (This is simply te name of the object)</li><li>Value (This is simply the data and is made up of a sequence of bytes)</li><li>Version ID (Important for versioning)</li><li>Metadata (Data about data you are storing)</li><li>Subresources:<ul><li>Access Control Lists</li><li>Torrents </li></ul></li><li><strong>Read after Write consistency for PUTS of new Objects</strong></li><li><strong>Eventual Consistency for overwrite PUTS and DELETES (can take some time to propagate)</strong></li></ul><p><img src="S3_Storage_level.png" alt="S3 Storage Level"></p><p>There are some different level of S3 storage we can choose when we upload Objects to S3 Buckets.</p><h2 id="Understand-how-to-get-the-best-value-out-of-S3"><a href="#Understand-how-to-get-the-best-value-out-of-S3" class="headerlink" title="Understand how to get the best value out of S3"></a>Understand how to get the best value out of S3</h2><p>Storage Cost (High to Low):</p><ol><li>S3 Standard</li><li>S3 - IA (Infrequently Accessed)</li><li>S3 - Intelligent Tiering</li><li>S3 One Zone - IA (not recommend)</li><li>S3 Glacier</li><li>S3 Glacier Deep Archive</li></ol><h2 id="S3-Encryption"><a href="#S3-Encryption" class="headerlink" title="S3 Encryption"></a>S3 Encryption</h2><p><strong>Encryption in Transit is achieved by:</strong></p><ul><li>SSL/TLS</li></ul><p><strong>Encryption at Rest (Server Side) is achieved by</strong></p><ul><li>S3 managed Keys - SSE-S3</li><li>AWS Key Management Service, Managed Keys - SSE-KMS</li><li>Server Side Encrytion With Customer: Provided Keys - SSE-C</li></ul><p><strong>Client Side Encryption</strong></p><h2 id="Best-Practices-with-AWS-Organizations-Enterprise-only"><a href="#Best-Practices-with-AWS-Organizations-Enterprise-only" class="headerlink" title="Best Practices with AWS Organizations(Enterprise only)"></a>Best Practices with AWS Organizations(Enterprise only)</h2><p><img src="best_practices_with_AWS_organizations.png" alt="Best Practices with AWS Organizations"></p><h2 id="Share-S3-buckets-across-accounts"><a href="#Share-S3-buckets-across-accounts" class="headerlink" title="Share S3 buckets across accounts"></a>Share S3 buckets across accounts</h2><ul><li>Using Bucket Policies &amp; IAM (applies across the entire bucket). Programmatic Access Only (APIs 访问).</li><li>Using Bucket ACLs &amp; IAM (individual objects). Programmatic Access Only.</li><li>Cross-account IAM Roles. Programmatic and Console access.</li></ul><h2 id="Cross-Region-Replication"><a href="#Cross-Region-Replication" class="headerlink" title="Cross Region Replication"></a>Cross Region Replication</h2><ul><li>Versioning must be enbaled on both the source and destination buckets.(版本控制必须要在source和target同时启用)</li><li>Regions must be unique. </li><li>Files in an existing bucket are not replicated automatically. (已经存在于桶的文件不会自动replicate)</li><li>All subsequent updated files will be replicated automatically. (所有之后的文件上传或者更新都会自动replicate)</li><li>Delete markets are not replicated. (删除标记不会replicate)</li><li>Deleting individual versions or delete markers will not be replicated. (删除单独的版本或删除delete markers不会被replicate)</li><li>Understand what Cross Region Replication is at a high level.</li></ul><h2 id="Lifecycle-Policies"><a href="#Lifecycle-Policies" class="headerlink" title="Lifecycle Policies"></a>Lifecycle Policies</h2><ul><li>Automates moving your objects between the different storage tiers. (可以将你的objects自动在不同的存储级别之间移动)</li><li>Can be used in conjuction with versioning. (可以和版本控制结合使用)</li><li>Can be applied to current versions and previous versions.(可以应用于当前版本和旧版本)</li></ul><h1 id="CloudFront"><a href="#CloudFront" class="headerlink" title="CloudFront"></a>CloudFront</h1><h2 id="CloudFront-Knowledge-Point"><a href="#CloudFront-Knowledge-Point" class="headerlink" title="CloudFront Knowledge Point"></a>CloudFront Knowledge Point</h2><ul><li><strong>Edge Location</strong> - This is the location where content will be cached. This is separate to an AWS Region/AZ (content被缓存的地方，独立于AWS地区和可用区)</li><li><strong>Origin</strong> - This is the origin of all the files that the CDN will distribute. This can be either an S3 Bucket, an EC2 Instance, an Elastic Load Balancer, or Route53. (这是CDN分发的所有文件资源的来源。可以是S3 Bucket，可以是一个EC2实例，也可以是ELB，或者Route53)</li><li><strong>Distribution</strong> - This is the name given the CDN which consists of a collection of Edge Locations. (这是给定的由Edge Locations集合组成的CDN的名称)</li><li><strong>Web Distribution</strong> - Typically used for Websites. (通常用于网站)</li><li><strong>RTMP</strong> - Used for Media Streaming.</li><li>Edge locations are not just <strong>READ</strong> only - you can write to them too. (Edge locations 不止是只读，我们也可以将数据写入edge location)</li><li>Objects are cached for the life of the <strong>TTL</strong>(Time To Live). (对象只在TTL的生命周期中被缓存)</li><li>You can clear cached objects, but you will be charged. (我们可一清楚缓存的对象，但是需要收费)</li></ul><h1 id="Storage-Gateway"><a href="#Storage-Gateway" class="headerlink" title="Storage Gateway"></a>Storage Gateway</h1><p>There are some kinds of gateways:</p><p><strong>File Gateway</strong></p><ul><li>For flat files, stored directly on S3</li></ul><p><strong>Volume Gateway</strong></p><ul><li><strong>Stored Volumes</strong> - Entire Dataset is stored on site and is aynchronously backed up to S3. (<strong>存储卷</strong> - 整个数据集都存储在站点上并异步备份至S3)</li><li><strong>Cached Volumes</strong> - Entire Dataset is Stored on S3 and the most frequently accessed data is cached on site. (<strong>缓存卷</strong> - 整个数据集都存储在S3中，最常访问的数据被缓存在站点上)</li></ul><p><strong>Gateway Virtual Tape Library</strong></p><ul><li>USed for backup and uses popular backup applications like NetBackup, Backup Exec, Veeam etc.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IAM-Identity-Access-Management&quot;&gt;&lt;a href=&quot;#IAM-Identity-Access-Management&quot; class=&quot;headerlink&quot; title=&quot;IAM - Identity Access Management&quot;&gt;&lt;/a&gt;IAM - Identity Access Management&lt;/h1&gt;&lt;p&gt;IAM consists of the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Groups&lt;/li&gt;
&lt;li&gt;Roles&lt;/li&gt;
&lt;li&gt;Policies&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://ryan4cloud.github.io/categories/AWS/"/>
    
    
      <category term="S3" scheme="http://ryan4cloud.github.io/tags/S3/"/>
    
      <category term="IAM" scheme="http://ryan4cloud.github.io/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>Athena and Macie</title>
    <link href="http://ryan4cloud.github.io/athena-and-macie/"/>
    <id>http://ryan4cloud.github.io/athena-and-macie/</id>
    <published>2020-03-14T01:46:59.000Z</published>
    <updated>2020-03-14T00:51:21.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Athena"><a href="#Athena" class="headerlink" title="Athena"></a>Athena</h1><h2 id="What-is-Athena"><a href="#What-is-Athena" class="headerlink" title="What is Athena"></a>What is Athena</h2><p><strong>Athena is a interactive query service which enables you to analyse and query data located in S3 using standard SQL.</strong></p><ul><li>Serverless, nothing to provision, pay per query / per TB scanned</li><li>No need to set up complex Extract/Transform/Load(ETL) process</li><li>Works directly with data stored in S3</li></ul><a id="more"></a><h2 id="Athena-Use-Case"><a href="#Athena-Use-Case" class="headerlink" title="Athena Use Case"></a>Athena Use Case</h2><h3 id="What-can-Athena-be-used-for"><a href="#What-can-Athena-be-used-for" class="headerlink" title="What can Athena be used for?"></a>What can Athena be used for?</h3><ul><li>Query log files stored in S3: e.g. ELB logs, S3 access logs etc</li><li>Generate business reports on data stored in S3</li><li>Analyse AWS cost nad usage reports</li><li>Run queries on click-stream data</li></ul><h1 id="Macie"><a href="#Macie" class="headerlink" title="Macie"></a>Macie</h1><h2 id="What-is-PII-Personally-Identifiable-Information"><a href="#What-is-PII-Personally-Identifiable-Information" class="headerlink" title="What is PII(Personally Identifiable Information)?"></a>What is PII(Personally Identifiable Information)?</h2><ul><li>Personal data used to establish an indevidual’s identity</li><li>Could be exploited by criminals, used in identity theft and financial fraud</li><li>Home address, emal address</li><li>Passport number, driver’s license number</li><li>…</li></ul><h2 id="What-is-Macie"><a href="#What-is-Macie" class="headerlink" title="What is Macie"></a>What is Macie</h2><p><strong>Security service which uses Machine Learning and NLP to discover, classify and protect sensitive data stored in S3</strong></p><ul><li>Uses AI to recognise if your S3 objects contain sensitive data such as PII</li><li>Dashboards, reporting and alerts</li><li>Works directly with data stored in S3</li><li>Can also analyze CloudTrail logs</li><li>Great for PCI-DSS and preventing ID theft</li></ul><h2 id="Macie-Exam-Tips"><a href="#Macie-Exam-Tips" class="headerlink" title="Macie Exam Tips"></a>Macie Exam Tips</h2><p><strong>Remember What is Macie used for:</strong></p><ul><li>Uses AI to analyze data in S3 and helps identify PII</li><li>Analyse CloudTrail logs for suspicious API activity</li><li>Dashboards, Reports and Alerting</li><li>PCI-DSS compliance and preventing ID theft</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Athena&quot;&gt;&lt;a href=&quot;#Athena&quot; class=&quot;headerlink&quot; title=&quot;Athena&quot;&gt;&lt;/a&gt;Athena&lt;/h1&gt;&lt;h2 id=&quot;What-is-Athena&quot;&gt;&lt;a href=&quot;#What-is-Athena&quot; class=&quot;headerlink&quot; title=&quot;What is Athena&quot;&gt;&lt;/a&gt;What is Athena&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Athena is a interactive query service which enables you to analyse and query data located in S3 using standard SQL.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serverless, nothing to provision, pay per query / per TB scanned&lt;/li&gt;
&lt;li&gt;No need to set up complex Extract/Transform/Load(ETL) process&lt;/li&gt;
&lt;li&gt;Works directly with data stored in S3&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://ryan4cloud.github.io/categories/AWS/"/>
    
    
      <category term="Athena" scheme="http://ryan4cloud.github.io/tags/Athena/"/>
    
      <category term="Macie" scheme="http://ryan4cloud.github.io/tags/Macie/"/>
    
  </entry>
  
  <entry>
    <title>Ribbon 负载均衡源码分析</title>
    <link href="http://ryan4cloud.github.io/deep-in-ribbon/"/>
    <id>http://ryan4cloud.github.io/deep-in-ribbon/</id>
    <published>2019-10-29T12:54:16.000Z</published>
    <updated>2019-11-11T11:17:30.550Z</updated>
    
    <content type="html"><![CDATA[<p>Ribbon 是 Netflix 公司开源的一个负载均衡项目。可以在 Zuul 中使用 Ribbon 做负载均衡，也可以和 Feign 结合使用。在 Spring Cloud 开发中使用的最多的可能就是 RestTemplate 和 Ribbon。代码可能如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 RestTemplate 消费服务接口的代码可能是这样的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">hi</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://eureka-client/hi?name="</span><span class="token operator">+</span>name<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RestTemplate 在 Spring 中就已经存在了，查看以上的代码可以发现 RestTemplate Bean 上有一个 @LoadBalanced 注解，这个注解标记在 RestTemplate 上，让负载均衡客户端 LoadBalancerClient 来配置它。</p><a id="more"></a><h1 id="负载均衡初始化"><a href="#负载均衡初始化" class="headerlink" title="负载均衡初始化"></a>负载均衡初始化</h1><p>spring-cloud-commons 包中定义了 <font style="color:red"><strong>LoadBalancerClient</strong></font> 接口，它是 Ribbon 中一个非常重要的组件。继承结构如下：</p><p><img src="LoadBalancerClient 继承结构.png" alt="LoadBalancerClient 继承结构"></p><h2 id="LoadBalancerAutoConfiguration"><a href="#LoadBalancerAutoConfiguration" class="headerlink" title="LoadBalancerAutoConfiguration"></a>LoadBalancerAutoConfiguration</h2><p>而在 spring-cloud-commons 中相同的包下面，可以看到 LoadBalancerAutoConfiguration，看类名就能看出来这是一个自动配置类，会在启动时自动加载其中的配置：</p><p><img src="LoadBalancerAutoConfiguration.jpg" alt="LoadBalancerAutoConfiguration"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>RestTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>LoadBalancerClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>LoadBalancerRetryProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略代码。。。主要是对 LoadBalancerInterceptor 和 RetryLoadBalancerInterCeptor 的等进行配置，这里我们看类上的注解@ConditionalOnBean和@ConditionalOnClass</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到该自动配置类上有注解 <code>@ConditionalOnBean(LoadBalancerClient.class)</code> 和 <code>@ConditionalOnClass(RestTemplate.class)</code>，也就是说此类的生效条件是：</p><blockquote><p>1、当前工程中要有 RestTemplate 类</p><p>2、在 Spring 的 IOC 容器中必须要有 LoadBalancerClient 的实现 Bean</p></blockquote><p>然后我们看到 <code>org.springframework.cloud.netflix.ribbon</code> 这个包，其中有一个 <code>RibbonAutoConfiguration.java</code> 类（继承于 LoadBalancerClient）。查看到其中配置的 Bean，我们可以发现，只要引入了这个包，就一定会创建一个 RibbonLoadBalancerClient 实例对象加入到 IOC 容器中，并且触发 <strong>LoadBalancerAutoConfiguration</strong> 配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>RibbonAutoConfiguration<span class="token punctuation">.</span>RibbonClassesConditions<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RibbonClients</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token string">"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token punctuation">{</span> LoadBalancerAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        AsyncLoadBalancerAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> RibbonEagerLoadProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ServerIntrospectorProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略。。。</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>LoadBalancerClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> LoadBalancerClient <span class="token function">loadBalancerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RibbonLoadBalancerClient</span><span class="token punctuation">(</span><span class="token function">springClientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略。。。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再看回 LoadBalancerAutoConfiguration，该自动化配置类，主要做了几个配置：</p><p>1、维护了一个被 @LoadBalanced 注解修饰的 <strong>RestTemplate 对象列表</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>RestTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>LoadBalancerClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>LoadBalancerRetryProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>RestTemplate<span class="token operator">></span> restTemplates <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、为每个对象通过调用 RestTemplateCustomizer 添加了一个 <code>LoadBalancerInterceptor</code> 和 <code>RetryLoadBalancerInterceptor</code> 拦截器。他们都是 ClientHttpRequestInterceptor 接口的实现类，<code>ClientHttpRequestInterceptor</code> 是 <code>RestTemplate</code> 的请求拦截器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> SmartInitializingSingleton <span class="token function">loadBalancedRestTemplateInitializerDeprecated</span><span class="token punctuation">(</span>        <span class="token keyword">final</span> ObjectProvider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>RestTemplateCustomizer<span class="token operator">>></span> restTemplateCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> restTemplateCustomizers<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span>customizers <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>RestTemplate restTemplate <span class="token operator">:</span> LoadBalancerAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>restTemplates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RestTemplateCustomizer customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h3><h4 id="LoadBalancerInterceptor-拦截器"><a href="#LoadBalancerInterceptor-拦截器" class="headerlink" title="LoadBalancerInterceptor 拦截器"></a>LoadBalancerInterceptor 拦截器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LoadBalancerAutoconfiguration.java</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.springframework.retry.support.RetryTemplate"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptorConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LoadBalancerInterceptor <span class="token function">ribbonInterceptor</span><span class="token punctuation">(</span>            LoadBalancerClient loadBalancerClient<span class="token punctuation">,</span>            LoadBalancerRequestFactory requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerInterceptor</span><span class="token punctuation">(</span>loadBalancerClient<span class="token punctuation">,</span> requestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RestTemplateCustomizer <span class="token function">restTemplateCustomizer</span><span class="token punctuation">(</span>            <span class="token keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 此处可见 LoadBalancerInterceptor 是 ClientHttpRequestInterceptor 的实现类</span>            List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                    restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loadBalancerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RetryLoadBalancerInterceptor-拦截器"><a href="#RetryLoadBalancerInterceptor-拦截器" class="headerlink" title="RetryLoadBalancerInterceptor 拦截器"></a>RetryLoadBalancerInterceptor 拦截器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>RetryTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RetryInterceptorAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RetryLoadBalancerInterceptor <span class="token function">ribbonInterceptor</span><span class="token punctuation">(</span>            LoadBalancerClient loadBalancerClient<span class="token punctuation">,</span>            LoadBalancerRetryProperties properties<span class="token punctuation">,</span>            LoadBalancerRequestFactory requestFactory<span class="token punctuation">,</span>            LoadBalancedRetryFactory loadBalancedRetryFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RetryLoadBalancerInterceptor</span><span class="token punctuation">(</span>loadBalancerClient<span class="token punctuation">,</span> properties<span class="token punctuation">,</span>                requestFactory<span class="token punctuation">,</span> loadBalancedRetryFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RestTemplateCustomizer <span class="token function">restTemplateCustomizer</span><span class="token punctuation">(</span>            <span class="token keyword">final</span> RetryLoadBalancerInterceptor loadBalancerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// RetryLoadBalancerInterceptor 也是 ClientHttpRequestInterceptor 的实现类</span>            List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                    restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loadBalancerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，在程序启动的时候，如果环境中引入了相应的依赖，则会在初始化时对负载均衡器进行配置，实现的方式则是为被 @LoadBalanced 注解修饰的 RestTemplate 对象添加负载均衡拦截器。</p><h1 id="LoadBalancerClient-源码分析"><a href="#LoadBalancerClient-源码分析" class="headerlink" title="LoadBalancerClient 源码分析"></a>LoadBalancerClient 源码分析</h1><p>首先我们先跟进到上文提到的拦截器(LoadBalancerInterceptor)中，可以发现，在拦截方法（intercept）中，最终是调用了 LoadBalancerClient 的 execute 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ClientHttpRequestInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ClientHttpResponse <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">final</span> HttpRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span>            <span class="token keyword">final</span> ClientHttpRequestExecution execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">final</span> URI originalUri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String serviceName <span class="token operator">=</span> originalUri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>serviceName <span class="token operator">!=</span> null<span class="token punctuation">,</span>                <span class="token string">"Request URI does not contain a valid hostname: "</span> <span class="token operator">+</span> originalUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>requestFactory<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">,</span> execution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LoadBalancerClient</strong> 接口中有三个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancerClient</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceInstanceChooser</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 LoadBalancer 的 ServiceInstance，对其执行请求，返回结果</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> ServiceInstance serviceInstance<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造一个包含主机和端口的真正的 url</span>    <span class="token comment" spellcheck="true">// http://serviceId/path/... --> http://host:port/path/...</span>    URI <span class="token function">reconstructURI</span><span class="token punctuation">(</span>ServiceInstance instance<span class="token punctuation">,</span> URI original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其父类 ServiceInstanceChooser 中的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServiceInstanceChooser</span> <span class="token punctuation">{</span>    ServiceInstance <span class="token function">choose</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过 serviceId 选择服务</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从继承关系里，LoadBalancerClient 的实现类就是 RibbonLoadBalancerClient 类了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// RibbonLoadBalancerClient.java</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">,</span> Object hint<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过服务名获取到负载均衡器，ILoadBalancer 实现类为 DynamicServerListLoadBalancer，下文会提到</span>    ILoadBalancer loadBalancer <span class="token operator">=</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过调用负载均衡器的 chooseServer 方法获取到服务器</span>    Server server <span class="token operator">=</span> <span class="token function">getServer</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">,</span> hint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No instances available for "</span> <span class="token operator">+</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RibbonServer ribbonServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RibbonServer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> server<span class="token punctuation">,</span>            <span class="token function">isSecure</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">serverIntrospector</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> ribbonServer<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">execute</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">,</span> ServiceInstance serviceInstance<span class="token punctuation">,</span>        LoadBalancerRequest<span class="token operator">&lt;</span>T<span class="token operator">></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Server server <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceInstance <span class="token keyword">instanceof</span> <span class="token class-name">RibbonServer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RibbonServer<span class="token punctuation">)</span> serviceInstance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No instances available for "</span> <span class="token operator">+</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RibbonLoadBalancerContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientFactory            <span class="token punctuation">.</span><span class="token function">getLoadBalancerContext</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    RibbonStatsRecorder statsRecorder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RibbonStatsRecorder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        T returnVal <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>serviceInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        statsRecorder<span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span>returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// catch IOException and rethrow so RestTemplate behaves correctly</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        statsRecorder<span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        statsRecorder<span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReflectionUtils<span class="token punctuation">.</span><span class="token function">rethrowRuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RibbonLoadBalancerClient 在 <code>execute</code> 中调用 <code>getServer</code> 方法来获取 Server 对象，跟踪源码可以看到，最终是通过 ILoadBalancer 的 <code>chooseServer</code> 去选择服务实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// RibbonLoadBalancerClient.java</span><span class="token keyword">protected</span> Server <span class="token function">getServer</span><span class="token punctuation">(</span>String serviceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 SpringClientFactory 获取 LoadBalancer 对象</span>    <span class="token comment" spellcheck="true">// 内部是通过反射，用构造方法构造一个实例对象</span>    <span class="token keyword">return</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> Server <span class="token function">getServer</span><span class="token punctuation">(</span>ILoadBalancer loadBalancer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getServer</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> Server <span class="token function">getServer</span><span class="token punctuation">(</span>ILoadBalancer loadBalancer<span class="token punctuation">,</span> Object hint<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadBalancer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Use 'default' on a null hint, or just pass it on?</span>    <span class="token comment" spellcheck="true">// 通过 ILoadBalancer 的 chooseServer 方法获取 Server 对象</span>    <span class="token keyword">return</span> loadBalancer<span class="token punctuation">.</span><span class="token function">chooseServer</span><span class="token punctuation">(</span>hint <span class="token operator">!=</span> null <span class="token operator">?</span> hint <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加一个 Server 集合</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Server<span class="token operator">></span> newServers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 key 获取 Server</span>    <span class="token keyword">public</span> Server <span class="token function">chooseServer</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记某个服务下线</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">markServerDown</span><span class="token punctuation">(</span>Server server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取可用的 Server 集合</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取所有的 Server集合</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DynamicServerListLoadBalancer"><a href="#DynamicServerListLoadBalancer" class="headerlink" title="DynamicServerListLoadBalancer"></a>DynamicServerListLoadBalancer</h1><p>跟踪源码后，我们可以找到 ILoadBalancer 的继承结构如下，DynamicServerListLoadBalancer 继承了 ILoadBalancer，也就是说我们可以通过跟踪这个类来搞清楚 Ribbon 是如何实现负载均衡的。</p><p><img src="ILoadBalancer 继承结构.png" alt="ILoadBalancer 继承结构"></p><h2 id="成员介绍"><a href="#成员介绍" class="headerlink" title="成员介绍"></a>成员介绍</h2><p>查看 DynamicServerListLoadBalancer，BaseLoadBalancer，ILoadBalancer 这三个类，配置了 IClientConfig，IRule，IPing，ServerList，ServerListFilter 和 ILoadBalancer，在 BaseLoadBalancer 中，默认进行了以下配置：</p><ul><li>IClientConfig ribbonClientConfig：DefaultClientConfigImpl 配置（用于客户端的负载均衡配置）</li><li>IRule ribbonRule：默认路由策略为 RoundRobinRule</li><li>IPing ribbonPing：DummyPing</li><li>ServerList ribbonServerList：ConfigurationBasedServerList</li><li>ServerListFilter ribbonServerListFilter：ZonePreferenceServerListFilter</li><li>ILoadBalancer ribbonLoadBalancer：ZoneAwareLoadBalancer</li></ul><h3 id="IRule"><a href="#IRule" class="headerlink" title="IRule"></a>IRule</h3><p>IRule 有很多默认的实现类，都通过不同的算法来处理负载均衡，Ribbon 中实现的 IRule 又以下几种：</p><p><img src="IRule 实现类.png" alt="IRule 实现类"></p><ul><li>BestAvailableRule：选择最小请求数</li><li>ClientConfigEnabledRoundRobinRule：轮询</li><li>RandomRule：随机选择 Server</li><li>RoundRobinRule：轮询</li><li>WeightedResponseTimeRule：根据响应时间分配一个权重 weight，weight越低，被选择的可能性就越低</li><li>ZoneAvoidanceRule：根据 Server 的 Zone 区域和可用性轮询选择</li></ul><h3 id="IPing"><a href="#IPing" class="headerlink" title="IPing"></a>IPing</h3><p>IPing 的实现类又 PingUrl，PingConstant，NoOpPing，DummyPing 和 NIWSDiscoveryPing。IPing 接口中有一个 <code>isAlive</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span>Server Server<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过向 Server 发送 ping 信号，来判断 Server 是否可用</p><p><img src="IPing 实现类.png" alt="IPing 实现类"></p><ul><li>PingUrl 真实的去ping 某个url，判断其是否alive</li><li>PingConstant 固定返回某服务是否可用，默认返回true，即可用</li><li>NoOpPing 不去ping,直接返回true,即可用。</li><li>DummyPing 直接返回true，并实现了initWithNiwsConfig方法。</li><li>NIWSDiscoveryPing，根据DiscoveryEnabledServer的InstanceInfo的InstanceStatus去判断，如果为InstanceStatus.UP，则为可用，否则不可用。</li></ul><h3 id="ServerList"><a href="#ServerList" class="headerlink" title="ServerList"></a>ServerList</h3><p>ServerList 是定义了获取所有的 Server 的注册列表信息的接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServerList</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Server</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getInitialListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getUpdatedListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实现类是 <code>DiscoveryEnabledNIWSServerList</code>。</p><h3 id="ServerListFilter"><a href="#ServerListFilter" class="headerlink" title="ServerListFilter"></a>ServerListFilter</h3><p>ServerListFilter 可根据配置过滤或者根据特性动态获取符合条件的 Server 列表。该类也是一个接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServerListFilter</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Server</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>在 SpringClientFactory 中获取 LoadBalancer 的方法中，我们能看到获取实例的方法是通过反射获取到实现类的含有 IClientConfig 参数的构造方法来构造实例对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// SpringClientFactory.java</span><span class="token keyword">static</span> <span class="token operator">&lt;</span>C<span class="token operator">></span> C <span class="token function">instantiateWithConfig</span><span class="token punctuation">(</span>AnnotationConfigApplicationContext context<span class="token punctuation">,</span>        Class<span class="token operator">&lt;</span>C<span class="token operator">></span> clazz<span class="token punctuation">,</span> IClientConfig config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    C result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到 ILoadBalancer 实现类的构造方法</span>        Constructor<span class="token operator">&lt;</span>C<span class="token operator">></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>IClientConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过构造方法构造实例对象</span>        result <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Ignored</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DynamicServerListLoadBalancer-构造方法"><a href="#DynamicServerListLoadBalancer-构造方法" class="headerlink" title="DynamicServerListLoadBalancer 构造方法"></a>DynamicServerListLoadBalancer 构造方法</h3><p>DynamicServerListLoadBalancer 中的构造方法中调用了一个方法 - <code>initWithNiwsConfig()</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DynamicServerListLoadBalancer.java</span><span class="token keyword">public</span> <span class="token function">DynamicServerListLoadBalancer</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 ServerList 的 classname</span>        String niwsServerListClassname <span class="token operator">=</span> clientConfig<span class="token punctuation">.</span><span class="token function">getPropertyAsString</span><span class="token punctuation">(</span>CommonClientConfigKey<span class="token punctuation">.</span>NIWSServerListClassName<span class="token punctuation">,</span> DefaultClientConfigImpl<span class="token punctuation">.</span>DEFAULT_SERVER_LIST_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造 ServerList</span>        ServerList<span class="token operator">&lt;</span>T<span class="token operator">></span> niwsServerListImpl <span class="token operator">=</span> <span class="token punctuation">(</span>ServerList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> ClientFactory<span class="token punctuation">.</span><span class="token function">instantiateInstanceWithClientConfig</span><span class="token punctuation">(</span>niwsServerListClassName<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果该 ServerList 是 AbstractServerList 的子类，则获取并设置过滤器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>niwsServerListImpl <span class="token keyword">instanceof</span> <span class="token class-name">AbstractServerList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AbstractServerListFilter<span class="token operator">&lt;</span>T<span class="token operator">></span> niwsFilter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractServerList<span class="token punctuation">)</span> niwsServerListImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilterImpl</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>            niwsFilter<span class="token punctuation">.</span><span class="token function">setLoadBalancerStats</span><span class="token punctuation">(</span><span class="token function">getLoadBalancerStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">=</span> niwsFilter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取 ServerListUpdater 的 classname</span>        String serverListUpdaterClassName <span class="token operator">=</span> clientConfig<span class="token punctuation">.</span><span class="token function">getPropertyAsString</span><span class="token punctuation">(</span>            CommonClientConfigKey<span class="token punctuation">.</span>ServerListUpdaterClassname<span class="token punctuation">,</span>            DefaultClientConfigImpl<span class="token punctuation">.</span>DEFAULT_SERVER_LIST_UPDATER_CLASS        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过 classname 构造 ServerListUpdater 设置到 serverListUpdater 成员属性中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serverListUpdater <span class="token operator">=</span> <span class="token punctuation">(</span>ServerListUpdater<span class="token punctuation">)</span> ClientFactory            <span class="token punctuation">.</span><span class="token function">instantiateInstanceWithClientConfig</span><span class="token punctuation">(</span>serverListUpdaterClassName<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行剩下的初始化操作</span>        <span class="token function">restOfInit</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="restOfInit-执行剩下的初始化操作"><a href="#restOfInit-执行剩下的初始化操作" class="headerlink" title="restOfInit 执行剩下的初始化操作"></a>restOfInit 执行剩下的初始化操作</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DynamicServerListLoadBalancer.java</span><span class="token keyword">void</span> <span class="token function">restOfInit</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> primeConnection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEnablePrimingConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将这个关闭来避免 BaseLoadBalancer.setServerList() 中重复的异步启动</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setEnablePrimingConnections</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">enableAndInitLearnNewServersFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用来获取所有的 Server </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>primeConnection <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrimeConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrimeConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">primeConnections</span><span class="token punctuation">(</span><span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setEnablePrimingConnections</span><span class="token punctuation">(</span>primeConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"DynamicServerListLoadBalancer for client {} initialized: {}"</span><span class="token punctuation">,</span> clientConfig<span class="token punctuation">.</span><span class="token function">getClientName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面源码中的 <code>updateListOfServers()</code> 最终是通过 serverListImpl.getUpdatedListOfServers() 来获取所有的服务列表的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DynamicServerListLoadBalancer.java</span><span class="token annotation punctuation">@VisibleForTesting</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> servers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>serverListImpl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        servers <span class="token operator">=</span> serverListImpl<span class="token punctuation">.</span><span class="token function">getUpdatedListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"List of Servers for {} obtained from Discovery client: {}"</span><span class="token punctuation">,</span>                      <span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果配置了过滤器，则将符合条件的 server 筛选出来</span>            servers <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">getFilteredListOfServers</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Filtered List of Servers for {} obtained from Discovery client: {}"</span><span class="token punctuation">,</span> <span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> servers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">updateAllServerList</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 serverListImpl 是 ServerList 的实现类 - DiscoveryEnabledNIWSServerList。而 <code>getUpdatedListOfServers()</code> 的具体实现为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DiscoveryEnabledNIWSServerList.java</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>DiscoveryEnabledServer<span class="token operator">></span> <span class="token function">getInitialListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">obtainServersViaDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>DiscoveryEnabledServer<span class="token operator">></span> <span class="token function">getUpdatedListOfServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">obtainServersViaDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="obtainServersViaDiscovery"><a href="#obtainServersViaDiscovery" class="headerlink" title="obtainServersViaDiscovery"></a>obtainServersViaDiscovery</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DiscoveryEnabledNIWSServerList.java</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>DiscoveryEnabledServer<span class="token operator">></span> <span class="token function">obtainServersViaDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>DiscoveryEnabledServer<span class="token operator">></span> serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>DiscoveryEnabledServer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eurekaClientProvider <span class="token operator">==</span> null <span class="token operator">||</span> eurekaClientProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"EurekaClient has not been initialized yet, returning an empty list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>DiscoveryEnabledServer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EurekaClient eurekaClient <span class="token operator">=</span> eurekaClientProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vipAddresses<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String vipAddress <span class="token operator">:</span> vipAddresses<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// if targetRegion is null, it will be interpreted as the same region of client</span>            List<span class="token operator">&lt;</span>InstanceInfo<span class="token operator">></span> listOfInstanceInfo <span class="token operator">=</span> eurekaClient<span class="token punctuation">.</span><span class="token function">getInstancesByVipAddress</span><span class="token punctuation">(</span>vipAddress<span class="token punctuation">,</span> isSecure<span class="token punctuation">,</span> targetRegion<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>InstanceInfo ii <span class="token operator">:</span> listOfInstanceInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ii<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>InstanceStatus<span class="token punctuation">.</span>UP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>shouldUseOverridePort<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Overriding port on client name: "</span> <span class="token operator">+</span> clientName <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> overridePort<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// copy is necessary since the InstanceInfo builder just uses the original reference,</span>                        <span class="token comment" spellcheck="true">// and we don't want to corrupt the global eureka copy of the object which may be</span>                        <span class="token comment" spellcheck="true">// used by other clients in our system</span>                        InstanceInfo copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceInfo</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>isSecure<span class="token punctuation">)</span><span class="token punctuation">{</span>                            ii <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceInfo<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSecurePort</span><span class="token punctuation">(</span>overridePort<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            ii <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceInfo<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>overridePort<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    DiscoveryEnabledServer des <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscoveryEnabledServer</span><span class="token punctuation">(</span>ii<span class="token punctuation">,</span> isSecure<span class="token punctuation">,</span> shouldUseIpAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    des<span class="token punctuation">.</span><span class="token function">setZone</span><span class="token punctuation">(</span>DiscoveryClient<span class="token punctuation">.</span><span class="token function">getZone</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    serverList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>serverList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prioritizeVipAddressBasedServers<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// if the current vipAddress has servers, we dont use subsequent vipAddress based servers</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> serverList<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里，可以知道负载均衡器 Ribbon 是通过 Eureka Client 来获取注册列表信息，然后通过配置的路由规则 IRule 来路由。但是它从 Eureka Client 获取注册信息的时间间隔是多久呢？</p><h3 id="定时任务更新服务器列表和状态"><a href="#定时任务更新服务器列表和状态" class="headerlink" title="定时任务更新服务器列表和状态"></a>定时任务更新服务器列表和状态</h3><p>在构造 DynamicServerListLoadBalancer 的构造方法中的第一行是调用父类中的 <code>initWithNiwsConfig</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DynamicServerListLoadBalancer.java</span><span class="token keyword">public</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是我们跟踪到 BaseLoadBalancer 的 initWithNiwsConfig 方法中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// BaseLoadBalancer.java</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">,</span> ClientFactory<span class="token operator">:</span><span class="token operator">:</span>instantiateInstanceWithClientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Error initializing load balancer"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">,</span> Factory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    S<span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token function">initWithConfig</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">,</span> rule<span class="token punctuation">,</span> ping<span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Error initializing load balancer"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">initWithConfig</span><span class="token punctuation">(</span>IClientConfig clientConfig<span class="token punctuation">,</span> IRule rule<span class="token punctuation">,</span> IPing ping<span class="token punctuation">,</span> LoadBalancerStats stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token function">setPingInterval</span><span class="token punctuation">(</span>pingIntervalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMaxTotalPingTime</span><span class="token punctuation">(</span>maxTotalPingTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cross associate with each other</span>    <span class="token comment" spellcheck="true">// i.e. Rule,Ping meet your container LB</span>    <span class="token comment" spellcheck="true">// LB, these are your Ping and Rule guys ...</span>    <span class="token function">setRule</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setPing</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上只保留了关键代码。调用到 initWithConfig 方法中，会执行 <code>setPingInterval(pingIntervalTime)</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPingInterval</span><span class="token punctuation">(</span><span class="token keyword">int</span> pingIntervalSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pingIntervalSeconds <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pingIntervalSeconds <span class="token operator">=</span> pingIntervalSeconds<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer [{}]:  pingIntervalSeconds set to {}"</span><span class="token punctuation">,</span>            name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pingIntervalSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setupPingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// since ping data changed</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中开启了一个定时任务：<code>setupPingTask()</code> 。在该方法内部使用 ShutdownEnabledTimer 初始化了一个定时器，并且设置每10秒调用 PingTask 任务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// BaseLoadBalancer.java</span><span class="token comment" spellcheck="true">// 定时任务</span><span class="token keyword">void</span> <span class="token function">setupPingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canSkipPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lbTimer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lbTimer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lbTimer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShutdownEnabledTimer</span><span class="token punctuation">(</span><span class="token string">"NFLoadBalancer-PingTimer-"</span> <span class="token operator">+</span> name<span class="token punctuation">,</span>            <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lbTimer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pingIntervalSeconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认10秒执行一次</span>    <span class="token function">forceQuickPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PingTask 是 BaseLoadBalancer 的内部类，根据 IPingStrategy 策略来发送 ping 请求获取和更新服务器列表，默认策略是 SerialPingStrategy。在 PingTask 的 run 方法中，执行了另一个内部类 Pinger 的 runPinger 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// BaseLoadBalancer.java</span><span class="token comment" spellcheck="true">// 内部类 PingTask</span><span class="token keyword">class</span> <span class="token class-name">PingTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Pinger</span><span class="token punctuation">(</span>pingStrategy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">runPinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer [{}]: Error pinging"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部类 Pinger</span><span class="token keyword">class</span> <span class="token class-name">Pinger</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IPingStrategy pingerStrategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Pinger</span><span class="token punctuation">(</span>IPingStrategy pingerStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pingerStrategy <span class="token operator">=</span> pingerStrategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runPinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用 CAS 设置 pingInProgress 为 true，代表正在执行 Ping 任务。</span>        <span class="token comment" spellcheck="true">// 如果设置失败，则表示有线程正在执行 Ping 任务，这里就不再执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pingInProgress<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Ping in progress - nothing to do</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// we are "in" - we get to Ping</span>        Server<span class="token punctuation">[</span><span class="token punctuation">]</span> allServers <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> null<span class="token punctuation">;</span>        Lock allLock <span class="token operator">=</span> null<span class="token punctuation">;</span>        Lock upLock <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             * The readLock should be free unless an addServer operation is             * going on...             */</span>            <span class="token comment" spellcheck="true">// 读锁应该是空闲状态，除了 addServer 操作正在执行。</span>            allLock <span class="token operator">=</span> allServerLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加读锁，避免其他线程修改 serverList</span>            allLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            allServers <span class="token operator">=</span> allServerList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">[</span>allServerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解锁</span>            allLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> numCandidates <span class="token operator">=</span> allServers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 向每个服务器发送 ping 请求，得到一个布尔值的结果集（服务器是否存活 - 能否请求成功）</span>            results <span class="token operator">=</span> pingerStrategy<span class="token punctuation">.</span><span class="token function">pingServers</span><span class="token punctuation">(</span>ping<span class="token punctuation">,</span> allServers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> newUpList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Server<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Server<span class="token operator">></span> changedServers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Server<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历当前所有Server</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCandidates<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取第 i 个 Server 是当前否为存活状态（UP）</span>                <span class="token keyword">boolean</span> isAlive <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                Server svr <span class="token operator">=</span> allServers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取 ping 之前的服务器状态</span>                <span class="token keyword">boolean</span> oldIsAlive <span class="token operator">=</span> svr<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将该服务器状态改为当前获取到的状态</span>                svr<span class="token punctuation">.</span><span class="token function">setAlive</span><span class="token punctuation">(</span>isAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIsAlive <span class="token operator">!=</span> isAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果之前状态与当前获取的状态不一致</span>                    <span class="token comment" spellcheck="true">// 加入到状态更改过的服务器列表中</span>                    changedServers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>svr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 输出日志：当前服务器状态修改</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer [{}]:  Server [{}] status changed to {}"</span><span class="token punctuation">,</span>                         name<span class="token punctuation">,</span> svr<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isAlive <span class="token operator">?</span> <span class="token string">"ALIVE"</span> <span class="token operator">:</span> <span class="token string">"DEAD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果获取到的当前状态为 true（存活UP状态）</span>                    <span class="token comment" spellcheck="true">// 则将该服务器加入到 newUpList 中，用于后面更新至存活服务器列表</span>                    newUpList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>svr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 更新存活服务器列表，需要加写锁，避免并发问题</span>            upLock <span class="token operator">=</span> upServerLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            upLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            upServerList <span class="token operator">=</span> newUpList<span class="token punctuation">;</span>            upLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通知服务器状态修改</span>            <span class="token function">notifyServerStatusChangeListener</span><span class="token punctuation">(</span>changedServers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            pingInProgress<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该定时任务的大致流程为：</p><p>1、首先将用 CAS 来修改 pingInProgress （AtomicBoolean 对象），如果修改不成功，则表示当前有其他线程正在发送 ping 请求，并且还没有执行完毕，所以当前操作可以不再执行。</p><p>2、加读锁获取当前服务列表。</p><p>3、通过 IPingStrategy 向每个服务器发送 ping 请求，得到一个布尔值的结果集。</p><p>3、遍历之前获取到的 Server List，判断服务状态是否有变化，并更新服务列表。（其中状态更改的服务器将会加入到 changedServers 列表中，ping 请求后依然存活的服务会加入到 newUpList 中）</p><p>4、最后加写锁更新 UP 状态的服务器列表，并<font style="color:red"><strong>通知服务状态改变</strong></font>。(有兴趣的话，此处可以查看一下ServerStatusChangeListener 的实现类是哪个，再看具体做了什么操作)</p><p>5、全部执行完成后，将 pingInProgress 改为 false。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由此可见，Ribbon的负载均衡，主要是通过 LoadBalancerClient 来实现的，而 Load’BalancerClient 又将具体实现交给了 ILoadBalancer 来处理，ILoadBalancer 通过配置 IRule、IPing 等信息，向 Eureka 获取服务注册列表，并且在初始化时开启一个定时任务，10s 一次向 EurekaClient 发送 ping 请求，来判断服务的可用性，如果服务的可用性发生改变或者服务数量与之前的不一致，则更新当前服务器列表或重新拉取。最后 ILoadBalancer 获取到这些服务列表之后，便可以根据 IRule 来进行负载均衡。</p><p>而 RestTemplate 被 @LoadBalanced 注解后，能够实现负载均衡，主要是通过给 RestTemplate 添加拦截器，在请求前通过拦截器（负载均衡）获取到真正的请求地址，最后进行服务调用。</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://github.com/Netflix/ribbon.git" target="_blank" rel="noopener">Ribbon 源码</a></p><p><a href="https://github.com/spring-cloud/spring-cloud-commons.git" target="_blank" rel="noopener">Spring Cloud Commons 源码</a></p><p><a href="https://github.com/spring-cloud/spring-cloud-netflix.git" target="_blank" rel="noopener">Spring Cloud Netflix 源码</a></p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.1.3.RELEASE/single/spring-cloud-netflix.html#spring-cloud-ribbon" target="_blank" rel="noopener">Spring Cloud Netflix Ribbon 官方文档</a></p><p><a href="https://github.com/aCoder2013/blog/issues/29" target="_blank" rel="noopener">Spring Cloud Ribbon踩坑记录及原理解析</a></p><p><a href="http://www.spring4all.com/article/230" target="_blank" rel="noopener">Ribbon原理分析 - Spring For All</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ribbon 是 Netflix 公司开源的一个负载均衡项目。可以在 Zuul 中使用 Ribbon 做负载均衡，也可以和 Feign 结合使用。在 Spring Cloud 开发中使用的最多的可能就是 RestTemplate 和 Ribbon。代码可能如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Configuration
public class RibbonConfig {
    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 RestTemplate 消费服务接口的代码可能是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Service
public class RibbonService {
    @Autowired
    private RestTemplate restTemplate;

    public String hi(String name) {
        return restTemplate.getForObject(&amp;quot;http://eureka-client/hi?name=&amp;quot;+name,String.class);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;RestTemplate 在 Spring 中就已经存在了，查看以上的代码可以发现 RestTemplate Bean 上有一个 @LoadBalanced 注解，这个注解标记在 RestTemplate 上，让负载均衡客户端 LoadBalancerClient 来配置它。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://ryan4cloud.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="负载均衡" scheme="http://ryan4cloud.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Ribbon" scheme="http://ryan4cloud.github.io/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java内存模型(JMM)及Volatile关键字（转载）</title>
    <link href="http://ryan4cloud.github.io/deep-into-JMM/"/>
    <id>http://ryan4cloud.github.io/deep-into-JMM/</id>
    <published>2019-10-28T14:45:52.000Z</published>
    <updated>2019-11-11T11:17:46.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自 <a href="https://sccarterrans.github.io/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B(JMM)%E5%8F%8AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/" target="_blank" rel="noopener">https://sccarterrans.github.io/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B(JMM)%E5%8F%8AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/</a></p></blockquote><h2 id="分享目标"><a href="#分享目标" class="headerlink" title="分享目标"></a>分享目标</h2><p>本文通过Java volatile探讨以下问题</p><ul><li>Volatile多线程引发的缓存一致性问题</li><li>Volatile多线程引发的不可见问题</li><li>Volatile多线程引发的原子性问题</li><li>指令重排序含义及相关语义和规则</li><li>内存屏障的分类和使用</li><li>源码跟踪</li></ul><a id="more"></a><h4 id="1-1-多线程之间通信机制"><a href="#1-1-多线程之间通信机制" class="headerlink" title="1.1 多线程之间通信机制"></a>1.1 多线程之间通信机制</h4><p>线程之间的通信机制有两种：<strong>共享内存</strong>和<strong>消息传递</strong>,Java的并发采用的是共享内存模型机制。</p><p><img src="13.png" alt="共享内存通信"></p><p><img src="14.png" alt="线程间通信"></p><h4 id="1-2-原子性操作"><a href="#1-2-原子性操作" class="headerlink" title="1.2 原子性操作"></a>1.2 原子性操作</h4><p>在探讨问题之前需要先了解一下JMM的内存模型提供的八大原子性操作：</p><pre><code>read(读取): 从主内存读取数据load(载入): 将主内存读取到的数据写入工作内存中use(使用): 从工作内存读取数据来计算assign(赋值): 将计算好的值重新赋值到工作内存中store(存储): 将工作内存数据写入主内存读写缓冲(loadStoreBuffer)write(写入): 将读写缓冲的变量赋值给主内存中的变量lock(锁定): 将读写缓冲中共享变量加锁,标识为线程独占状态unlock(解锁): 将读写缓冲中共享变量解锁,解锁后其他线程可以锁定该变量</code></pre><h4 id="1-3-MESI缓存行"><a href="#1-3-MESI缓存行" class="headerlink" title="1.3 MESI缓存行"></a>1.3 MESI缓存行</h4><pre><code>MESI协议是以缓存行(缓存的基本数据单位，在Intel的CPU上一般是64字节)的几个状态来命名的(全名是Modified、Exclusive、 Share or Invalid)。该协议要求在每个缓存行上维护两个状态位，使得每个数据单位可能处于M、E、S和I这四种状态之一，各种状态含义如下：M：所有CPU把缓存状态改为I之后，会向主内存同步数据E：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致S：共享的。处于这一状态的数据在多个CPU中都有缓存，且与内存一致I：无效的。本CPU中的这份缓存已经无效</code></pre><h4 id="1-4-Javap命令详解"><a href="#1-4-Javap命令详解" class="headerlink" title="1.4 Javap命令详解"></a>1.4 Javap命令详解</h4><pre><code>用法: javap &lt;options&gt; &lt;classes&gt;其中, 可能的选项包括:  -help  --help  -?        输出此用法消息  -version                 版本信息  -v  -verbose             输出附加信息  -l                       输出行号和本地变量表  -public                  仅显示公共类和成员  -protected               显示受保护的/公共类和成员  -package                 显示程序包/受保护的/公共类                           和成员 (默认)  -p  -private             显示所有类和成员  -c                       对代码进行反汇编  -s                       输出内部类型签名  -sysinfo                 显示正在处理的类的                           系统信息 (路径, 大小, 日期, MD5 散列)  -constants               显示最终常量  -classpath &lt;path&gt;        指定查找用户类文件的位置  -cp &lt;path&gt;               指定查找用户类文件的位置  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</code></pre><h3 id="2、多线程下共享变量引发问题"><a href="#2、多线程下共享变量引发问题" class="headerlink" title="2、多线程下共享变量引发问题"></a>2、多线程下共享变量引发问题</h3><h4 id="2-1-缓存不一致及不可见问题"><a href="#2-1-缓存不一致及不可见问题" class="headerlink" title="2.1 缓存不一致及不可见问题"></a>2.1 缓存不一致及不可见问题</h4><p>多线程情况下未添加volatile关键字修饰导致出现死循环：</p><pre><code>public class VolatileTest {    private static boolean initFlag = false;    public static void main(String[] args) throws InterruptedException {        new Thread(new Runnable() {            @Override            public void run() {                System.out.println(&quot;waiting data...&quot;);                while (!initFlag) {                }                System.out.println(&quot;success...&quot;);            }        }).start();        Thread.sleep(2000);        new Thread(new Runnable() {            @Override            public void run() {                prepareData();            }        }).start();    }    private static void prepareData() {        System.out.println(&quot;prepareData...&quot;);        initFlag = true;        System.out.println(&quot;prepare commit...&quot;);    }}运行结果：waiting data...prepareData...prepare commit...</code></pre><p>线程一永远处理阻塞状态，无法获取到线程2修改后的最新数据；</p><p>上述代码的交互流程：</p><p><img src="1.png" alt="线程不可见"></p><p>T1和T2同时从主内存加载initFlag = false，各自进行代码执行。T二修改initFlag为true并写入主内存；而T1并不知晓，initFlag变量是属于有效状态一直处于false，代码处于while中一直无法跳出，导致死循环。</p><h4 id="2-2-原子性问题"><a href="#2-2-原子性问题" class="headerlink" title="2.2 原子性问题"></a>2.2 原子性问题</h4><p>volatile关键字并不能保证原子性，利用volatile来修饰Increment的变量是一种错误的写法：</p><pre><code>public class AtomicDemo implements Runnable {    private volatile static int count = 0;    private static ExecutorService executor = Executors.newCachedThreadPool();    public static void main(String[] args) {        for (int i = 0; i &lt; 1000; i++) {            executor.submit(new AtomicDemo());        }        System.out.println(&quot;count累加运行结果：&quot; + count);        executor.shutdown();    }    @Override    public void run() {        count++;    }}count累加运行结果：967count累加运行结果：958</code></pre><p>上述代码运行结果永远是小于等于1000，那么为什么不是每次都是1000呢？</p><h5 id="2-2-1-内存原子操作流程"><a href="#2-2-1-内存原子操作流程" class="headerlink" title="2.2.1 内存原子操作流程"></a>2.2.1 内存原子操作流程</h5><p>通过内存原子操作演练一下count++的流程：</p><p><img src="2.png" alt="原子性问题"></p><p>T1T2线程同时读取(read)和加载(load)count=0到各自的工作内存，然后复制给执行引擎进行Increment计算，T2 Increment后assign count=1回到工作内存，这时候T1也是同样的操作，当然这时候T1也可以还在执行引擎计算未执行assign操作。这时候T2需要把修改后的数据(storeBuffer)强制写回主内存（StoreLoad屏障），在这之前需要进行lock操作锁定主内存(绿色)count变量，当回写操作通过总线MESI缓存一致性协议时，其他线程会通过CPU总线嗅探机制监听到，各自把各自工作内存中的count变量状态设置为失效状态。那么这时候T1可能已经是Increment后的值count=1,那么T1再次计算count累加时需要重新从主内存再次读取和加载，获取到count=1。实际上T1和T2已经对count进行了2次Increment按道理来说这时候count的值为2，而其他线程这时候拿到的却是1，导致count累加值丢失。</p><p>由上图可以看出count++并非单个原子性操作，它需要先read-&gt;load-&gt;use-&gt;assign-&gt;store-&gt;write操作才能完成整个操作，虽然上述单个操作都是原子性操作，但是组合起来就是非原子性了。</p><h5 id="2-2-2-字节码跟踪流程"><a href="#2-2-2-字节码跟踪流程" class="headerlink" title="2.2.2 字节码跟踪流程"></a>2.2.2 字节码跟踪流程</h5><p>为了演示，我们尽可能使用少量代码，通过javap -v -p 命令对class文件进行字节码展示：</p><pre><code>public class VolatileTest {    volatile int i = 1;    public void inc(){        i++;    }    public static void main(String[] args) {        new VolatileTest().inc();    }}</code></pre><p>反汇编后的字节码:</p><pre><code>public class com.example.demo.VolatileTest{  volatile int i;    descriptor: I    flags: ACC_VOLATILE //volatile i 添加ACC_VOLATILE修饰符  public com.example.demo.VolatileTest();    descriptor: ()V    flags: ACC_PUBLIC     Code:      stack=2, locals=1, args_size=1         0: aload_0         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V         4: aload_0         5: iconst_1         6: putfield      #2                  // Field i:I         9: return      LineNumberTable:        line 8: 0        line 10: 4      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      10     0  this   Lcom/example/demo/VolatileTest;  public void inc();    descriptor: ()V    flags: ACC_PUBLIC //方法访问修饰符    Code:      stack=3, locals=1, args_size=1         0: aload_0 //取this对应的对应引用值，压入操作数栈,也就是VolatileTest的实例，即getfield的主体         1: dup //复制栈顶数值，并压入栈顶,此时栈中有两个值，都是this对象引用         2: getfield      #2                  // Field i:I //获取对象i字段，将其值压入栈顶         5: iconst_1 //int型常量1进栈         6: iadd //弹出栈中的i值和常量1，进行加操作，并将结果压入栈         7: putfield      #2                  // Field i:I //赋值对象i字段 i=1        10: return //return void      LineNumberTable:        line 13: 0        line 14: 10      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      11     0  this   Lcom/example/demo/VolatileTest;//看这里}</code></pre><p>字节码中inc方法中第2、6、7分别3步操作getfield-&gt;iadd-&gt;putfield，这就是同学们说的i++并不是单个原子性操作，多线程情况下getfield并不能保证获取到最新值，造成数据操作丢失，出现原子性问题。</p><h3 id="3、-解决方案"><a href="#3、-解决方案" class="headerlink" title="3、 解决方案"></a>3、 解决方案</h3><ul><li>总线加锁</li><li>共享变量加锁</li></ul><h4 id="3-1-总线加锁机制（性能太低）"><a href="#3-1-总线加锁机制（性能太低）" class="headerlink" title="3.1 总线加锁机制（性能太低）"></a>3.1 总线加锁机制（性能太低）</h4><p>最早期的X86解决方案是使用总线加锁机制来实现共享变量数据一致性问题。从主内存读取数据到高速缓存，会在总线对这个数据进行加锁，这样其他CPU没法去读或者写这个数据，直到锁释放后才能给其他CPU操作数据，这个机制虽然解决了数据一致性问题，但是对多核CPU来说由原来的并行执行改为串行执行，性能非常的低下；</p><p><img src="3.png" alt="总线加锁"></p><h4 id="3-2-MESI缓存一致性协议"><a href="#3-2-MESI缓存一致性协议" class="headerlink" title="3.2 MESI缓存一致性协议"></a>3.2 MESI缓存一致性协议</h4><p>多个CPU从主内存读取共享数据到各自的高速缓存，当其中某个CPU修改了缓存里的数据，该数据会马上同步回主内存，其他CPU通过总线<strong>嗅探机制</strong>可以感知到数据的变化从而将自己缓存里的数据设置<strong>失效</strong>，当线程处理存储操作时会在store前调用lock操作，数据write主内存后进行unLock操作。如果多个线程都来修改共享变量就会进行锁竞争；</p><p><img src="4.png" alt="MESI缓存一致性协议"></p><h3 id="4、指令重排序"><a href="#4、指令重排序" class="headerlink" title="4、指令重排序"></a>4、指令重排序</h3><p>重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。重排序分为两类：<strong>编译期重排序</strong>和<strong>运行期重排序</strong>，分别对应编译时和运行时环境。</p><ul><li>编译期重排序的典型就是通过调整指令顺序，在单线程下不改变程序语义的前提下，尽可能减少寄存器的读取、存储次数，充分复用寄存器的存储值。</li></ul><pre><code>假设第一条指令计算一个值赋给变量A并存放在寄存器中，第二条指令与A无关但需要占用寄存器（假设它将占用A所在的那个寄存器），第三条指令使用A的值且与第二条指令无关。那么如果按照顺序一致性模型，A在第一条指令执行过后被放入寄存器，在第二条指令执行时A不再存在，第三条指令执行时A重新被读入寄存器，而这个过程中，A的值没有发生变化。通常编译器都会交换第二和第三条指令的位置，这样第一条指令结束时A存在于寄存器中，接下来可以直接从寄存器中读取A的值，降低了重复读取的开销。</code></pre><ul><li>运行期重排序包含指令并行的重排和内存系统的重排<ul><li>指令并行重排序是通过处理器采用了指令级并行技术来将多条指令重叠执行。需要建立在数据不存在依赖性时处理器可以改变语句对应的机器指令的执行顺序的情况下</li><li>内存系统重排序是指处理器使用缓存和读写缓冲区，这使得加载(load)和存储(store)操作看上去可能是在乱序执行</li></ul></li></ul><p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p><p><img src="12.png" alt="指令重排序"></p><h4 id="4-1-数据依赖性"><a href="#4-1-数据依赖性" class="headerlink" title="4.1 数据依赖性"></a>4.1 数据依赖性</h4><p>如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。数据依赖分为下列3种类型：</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">代码示例</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">写后读</td><td style="text-align:left">a=1;b=a;</td><td style="text-align:left">写一个变量后，再读这个变量</td></tr><tr><td style="text-align:left">写后写</td><td style="text-align:left">a=1;a=2;</td><td style="text-align:left">写一个变量后，再写这个变量</td></tr><tr><td style="text-align:left">读后写</td><td style="text-align:left">a=b;b=1;</td><td style="text-align:left">读一个变量后，再写这个变量</td></tr></tbody></table><p>上面3种情况，只要重排序两个操作的执行顺序，程序的执行结果就会被改变。前面提到过，编译器和处理器可能会对操作做重排序。编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。这里所说的数据依赖性仅针对单个处理器中执行的指令序列和单个线程中执行的操作，不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑。</p><h4 id="4-2-as-if-serial语义"><a href="#4-2-as-if-serial语义" class="headerlink" title="4.2 as-if-serial语义"></a>4.2 as-if-serial语义</h4><p>as-if-serial语义的意思是：不管怎么重排序程序的执行结果不能被改变(<strong>单线程</strong>)。编译器、runtime和处理器都必须遵守as-if-serial语义。为了遵守as-if-serial语义，编译器和处理器不会对存在<strong>数据依赖关系</strong>的操作做重排序，因<br>为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。代码示例，计算圆的面积：</p><pre><code>double pi = 3.14; // Adouble r = 1.0; // Bdouble area = pi * r * r; // C</code></pre><p>代码C依赖A和B,代码依赖操作流程：</p><p><img src="5.png" alt="img"></p><p>A和B之间没有数据依赖关系，编译器和处理器可以重排序A和B之间的执行顺序。该程序的两种执行顺序如下：</p><p><img src="6.png" alt="img"></p><pre><code>area = 3.14</code></pre><p><img src="7.png" alt="img"></p><pre><code>area = 3.14</code></pre><p>编译器和处理器重排序后，不仅优化了编译指令还能保证最终执行结果也一致。</p><p>as-if-serial语义把<strong>单线程</strong>程序保护了起来，遵守as-if-serial语义的编译器、runtime和处理器共同为编写单线程程序的程序员创建了一个幻觉：单线程程序是按程序的顺序来执行的。asif-serial语义使单线程程序员无需担心重排序会干扰他们，也无需担心内存可见性问题。</p><h4 id="4-3-happens-before规则"><a href="#4-3-happens-before规则" class="headerlink" title="4.3 happens-before规则"></a>4.3 happens-before规则</h4><p>根据happens-before的程序顺序规则，上面计算圆的面积的示例代码存在3个happensbefore关系。</p><pre><code>A　happens-before BB　happens-before CA　happens-before C</code></pre><p>这里的第3个happens-before关系，是根据happens-before的传递性推导出来的。</p><p>这里A happens-before B，但实际执行时B却可以排在A之前执行（看上面的重排序后的执行顺序）。如果A happens-before B，JMM并不要求A一定要在B之前执行。JMM仅仅要求前一个操作（执行的结果）对后一个操作可见(A和B对C可见)，且前一个操作按顺序排在第二个操作之前（A和B排在C之前）。</p><p>这里操作A的执行结果不需要对操作B可见；而且重排序操作A和操作B后的执行结果，与操作A和操作B按happens-before顺序执行的结果一致。在这种情况下，JMM会认为这种重排序并不非法（not illegal），JMM允许这种重排序。</p><p>在计算机中，软件技术和硬件技术有一个共同的目标：在不改变程序执行结果的前提下，尽可能提高并行度。编译器和处理器遵从这一目标，从happens-before的定义我们可以看出，JMM同样遵从这一目标。</p><h4 id="4-4-顺序一致性"><a href="#4-4-顺序一致性" class="headerlink" title="4.4 顺序一致性"></a>4.4 顺序一致性</h4><p>顺序一致性内存模型是一个理论参考模型，在设计的时候，处理器的内存模型和编程语言的内存模型都会以顺序一致性内存模型作为参照。尽管最终执行指令在执行时并不一定按照我们所编写的顺序执行，但毋庸置疑的是，<strong>在单线程环境下，指令执行的最终效果应当与其在顺序执行下的效果一致</strong>，否则这种优化便会失去意义。</p><p>通常无论是在编译期还是运行期进行的指令重排序，都会满足上面的原则。</p><h3 id="5、内存屏障"><a href="#5、内存屏障" class="headerlink" title="5、内存屏障"></a>5、内存屏障</h3><h4 id="5-1-什么是内存屏障？"><a href="#5-1-什么是内存屏障？" class="headerlink" title="5.1 什么是内存屏障？"></a>5.1 什么是内存屏障？</h4><pre><code>A memory barrier, also known as a membar, memory fence or fence instruction, is a type of barrier instruction that causes a CPU or compiler to enforce an ordering constraint on memory operations issued before and after the barrier instruction. This typically means that operations issued prior to the barrier are guaranteed to be performed before operations issued after the barrier.内存屏障，也称内存栅栏，内存栅障，屏障指令等， 是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作。</code></pre><h4 id="5-2-内存屏障和happens-before是什么关系？"><a href="#5-2-内存屏障和happens-before是什么关系？" class="headerlink" title="5.2 内存屏障和happens-before是什么关系？"></a>5.2 内存屏障和happens-before是什么关系？</h4><pre><code>happens-before是JSR-133规范之一，内存屏障是CPU指令。可以理解前者是最终目的，后者是实现手段。</code></pre><h4 id="5-3-内存屏障分类"><a href="#5-3-内存屏障分类" class="headerlink" title="5.3 内存屏障分类"></a>5.3 内存屏障分类</h4><p>内存屏障分为<strong>Store屏障</strong>和<strong>Load屏障</strong>两大类：</p><pre><code>基于保守策略的JMM内存屏障插入策略(绿色操作标志)：在每个volatile写操作的前面插入一个StoreStore屏障在每个volatile写操作的后面插入一个StoreLoad屏障在每个volatile读操作的后面插入一个LoadLoad屏障在每个volatile读操作的后面插入一个LoadStore屏障上述内存屏障插入策略非常保守，但它可以保证在任意处理器平台，任意的程序中都能得到正确的volatile内存语义,在实际执行时，只要不改变volatile写-读的内存语义，编译器可以根据具体情况省略不必要的屏障。</code></pre><h5 id="5-3-1-LoadLoad屏障"><a href="#5-3-1-LoadLoad屏障" class="headerlink" title="5.3.1 LoadLoad屏障"></a>5.3.1 LoadLoad屏障</h5><p>抽象场景：Load1; LoadLoad; Load2</p><p>Load1 和 Load2 代表两条读取指令。Load2读取数据被访问（use）前，要保证Load1读取的数据被读取完毕。</p><p><img src="8.png" alt="LoadLoad"></p><h5 id="5-3-2-StoreStore屏障"><a href="#5-3-2-StoreStore屏障" class="headerlink" title="5.3.2 StoreStore屏障"></a>5.3.2 StoreStore屏障</h5><p>抽象场景：Store1; StoreStore; Store2</p><p>Store1 和 Store2代表两条写入指令。Store2写入（store）执行前，要保证Store1的写入操作对其它处理器可见。</p><p><img src="9.png" alt="StoreStore"></p><h5 id="5-3-3-LoadStore屏障"><a href="#5-3-3-LoadStore屏障" class="headerlink" title="5.3.3 LoadStore屏障"></a>5.3.3 LoadStore屏障</h5><p>抽象场景：Load1; LoadStore; Store2</p><p>Load1代表读取指令，Store2代表写入指令。Store2被写入（store）执行前，要保证Load1读取的数据被读取完毕。</p><p><img src="10.png" alt="LoadStore"></p><h5 id="5-3-4-StoreLoad屏障"><a href="#5-3-4-StoreLoad屏障" class="headerlink" title="5.3.4 StoreLoad屏障"></a>5.3.4 StoreLoad屏障</h5><p>抽象场景：Store1; StoreLoad; Load2</p><p>Store1代表写入指令，Load2代表读取指令。Load2读取操作（read）执行前，要保证Store1的写入对所有处理器可见。StoreLoad屏障的开销是四种屏障中最大的。</p><p><img src="11.png" alt="StoreLoad"></p><h3 id="6、源码跟踪"><a href="#6、源码跟踪" class="headerlink" title="6、源码跟踪"></a>6、源码跟踪</h3><p>在2.2.2 字节码流程基础上进行hotspot源码跟踪，被volatile修饰的字段会多一个 <strong>ACC_VOLATILE</strong>的flag，在给字段赋值的时候通过<code>BytecodeInterpreter</code>解释器来执行</p><pre><code>##src/share/vm/interpreter/bytecodeInterpreter.cpp:1831CASE(_putstatic):        {          u2 index = Bytes::get_native_u2(pc+1);          ConstantPoolCacheEntry* cache = cp-&gt;entry_at(index);          if (!cache-&gt;is_resolved((Bytecodes::Code)opcode)) {            CALL_VM(InterpreterRuntime::resolve_get_put(THREAD, (Bytecodes::Code)opcode),                    handle_exception);            cache = cp-&gt;entry_at(index);          }#ifdef VM_JVMTI          if (_jvmti_interp_events) {           //代码省略          }#endif /* VM_JVMTI */          //判断i是否被volatile修饰          if (cache-&gt;is_volatile()) {            if (tos_type == itos) {                //整形字段修改              obj-&gt;release_int_field_put(field_offset, STACK_INT(-1));            } else {              //代码省略            }            OrderAccess::storeload();//赋值完成后插入storeload内存屏障，禁止上面的volatile写和下面的volatile读写重排序          } else {            //非volatile修饰处理 代码省略          }...</code></pre><p>首先我们关注cache-&gt;is_volatile()这段代码，cache是<strong>i</strong>在常量池缓存中的一个实例，这段代码是校验cache是否是被 volatile修饰，代码如下：</p><pre><code>##src/share/vm/utilities/accessFlags.hpp:103public:  // Java access flags  // ..代码省略  bool is_volatile    () const         { return (_flags &amp; JVM_ACC_VOLATILE    ) != 0; }</code></pre><p>is_volatile是判断是否有 ACC_VOLATILE的flag标志，很显然变量<strong>i</strong>是符合这个条件的，所以结果必然返回true。接着，根据当前字段的类型来给<strong>i</strong>赋值，执行 release_int_field_put方法赋值。</p><pre><code>##src/share/vm/oops/oop.inline.hpp:384inline void oopDesc::release_int_field_put(int offset, jint contents){ OrderAccess::release_store(int_field_addr(offset), contents);  }</code></pre><p>赋值的动作被包装了一层，看看 OrderAccess::release_store做了什么事情呢？找到 OrderAccess::release_store的实现，代码如下：</p><pre><code>##src/os_cpu/linux_x86/vm/orderAccess_linux_x86.inline.hpp:82inline void OrderAccess::release_store(volatile jbyte*   p, jbyte   v) { *p = v; }</code></pre><p>可以看到其实Java的volatile操作，在JVM实现层面第一步是给予了C++的原语实现。c/c++中的volatile关键字，用来修饰变量，通常用于语言级别的 memory barrier。被volatile声明的变量表示随时可能发生变化，每次使用时，都必须从变量<strong>i</strong>对应的内存地址读取，编译器对操作该变量的代码不再进行优化。</p><p>赋值操作完成以后，我们会发现还会执行一个 OrderAccess::storeload();的代码，它其实就是一个storeload内存屏障，JVM层面的四种内存屏障的定义以及实现</p><pre><code>##src/os_cpu/linux_x86/vm/orderAccess_linux_x86.inline.hpp:34inline void OrderAccess::loadload()   { acquire(); }inline void OrderAccess::storestore() { release(); }inline void OrderAccess::loadstore()  { acquire(); }inline void OrderAccess::storeload()  { fence(); }##当调用storeload屏障时，它会调用fence()方法inline void OrderAccess::fence() {  if (os::is_MP()) {//返回是否多处理器,如果是多处理器才有必要增加内存屏障    // always use locked addl since mfence is sometimes expensive#ifdef AMD64    //__asm__ volatile 嵌入汇编指令    //lock 汇编指令,lock指令会锁住操作的缓存行,也就是缓存锁的实现    __asm__ volatile (&quot;lock; addl $0,0(%%rsp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);#else    __asm__ volatile (&quot;lock; addl $0,0(%%esp)&quot; : : : &quot;cc&quot;, &quot;memory&quot;);#endif  }}</code></pre><p>os::is_MP:判断是否是多核,如果是单核,那么就不存在内存不可见或者乱序的问题，<strong>volatile</strong>:禁止编译器对代码进行某些优化。<br>Lock :汇编指令，lock指令会锁住操作的缓存行(cacheline), 一般用于read-Modify-write的操作;用来保证后续的操作是原子的<br>cc：代表的是寄存器</p><p>memory：代表是内存</p><p>这边同时用了”cc”和”memory”,来通知编译器内存或者寄存器内的内容已经发生了修改,要重新生成加载指令(不可以从缓存寄存器中取),这边的read/write请求不能越过lock指令进行重排</p><h3 id="7、写在最后"><a href="#7、写在最后" class="headerlink" title="7、写在最后"></a>7、写在最后</h3><p>需要查看汇编指令的同学可以按照以下方式：</p><ul><li>获取到编译动态链接库文件,下载完毕后需要复制至${JAVA_HOME}/jre/bin/service目录下</li></ul><pre><code>##windows版本 hsdis-amd64.dll链接: https://pan.baidu.com/s/1pxrT0ny3csuCRNlPRvegIA 提取码: qr4k</code></pre><ul><li>测试类启动时configuration配置VM otions参数</li></ul><pre><code>-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly VolatileTest(类名称) ##详细解释自行查阅</code></pre><p>hotspot源码下载地址:</p><pre><code>https://github.com/sccarterrans/hotspot</code></pre><p>[参考资料]</p><p><a href="http://ifeve.com/jvm-reordering/" target="_blank" rel="noopener">http://ifeve.com/jvm-reordering/</a></p><p><a href="https://juejin.im/entry/593e0ab25c497d006b93cfb1" target="_blank" rel="noopener">https://juejin.im/entry/593e0ab25c497d006b93cfb1</a></p><p><a href="http://gityuan.com/2015/10/24/jvm-bytecode-grammar/" target="_blank" rel="noopener">http://gityuan.com/2015/10/24/jvm-bytecode-grammar/</a></p><p><a href="https://my.oschina.net/tantexian/blog/808032" target="_blank" rel="noopener">https://my.oschina.net/tantexian/blog/808032</a></p><p><a href="https://www.520mwx.com/view/32394" target="_blank" rel="noopener">https://www.520mwx.com/view/32394</a></p><p>《Java并发编程的艺术》</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自 &lt;a href=&quot;https://sccarterrans.github.io/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B(JMM)%E5%8F%8AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sccarterrans.github.io/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B(JMM)%E5%8F%8AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分享目标&quot;&gt;&lt;a href=&quot;#分享目标&quot; class=&quot;headerlink&quot; title=&quot;分享目标&quot;&gt;&lt;/a&gt;分享目标&lt;/h2&gt;&lt;p&gt;本文通过Java volatile探讨以下问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Volatile多线程引发的缓存一致性问题&lt;/li&gt;
&lt;li&gt;Volatile多线程引发的不可见问题&lt;/li&gt;
&lt;li&gt;Volatile多线程引发的原子性问题&lt;/li&gt;
&lt;li&gt;指令重排序含义及相关语义和规则&lt;/li&gt;
&lt;li&gt;内存屏障的分类和使用&lt;/li&gt;
&lt;li&gt;源码跟踪&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ryan4cloud.github.io/categories/Java/"/>
    
    
      <category term="并发" scheme="http://ryan4cloud.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>volatile学习笔记</title>
    <link href="http://ryan4cloud.github.io/volatile%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ryan4cloud.github.io/volatile学习笔记/</id>
    <published>2019-10-15T15:18:25.000Z</published>
    <updated>2019-11-11T11:18:07.640Z</updated>
    
    <content type="html"><![CDATA[<p>volatile 应该经常听说或者用到的。它在并发编程中起到了什么作用呢？</p><ul><li>volatile 能禁止编译器和CPU对指令重排序</li><li>对 volatile 变量的操作插入内存屏障，保证内存的可见性</li></ul><p>这是我学习 volatile 的笔记，在这里记录一下。</p><a id="more"></a><h2 id="volatile-在-JVM-中如何实现"><a href="#volatile-在-JVM-中如何实现" class="headerlink" title="volatile 在 JVM 中如何实现"></a>volatile 在 JVM 中如何实现</h2><p>被 volatile 修饰的变量在编译之后的指令中，定义变量的 flags 会加上 ACC_VOLATILE 标志。<code>javap -v</code> 查看字节码。</p><pre class="line-numbers language-java"><code class="language-java">Classfile <span class="token operator">/</span>Users<span class="token operator">/</span>leiyongqi<span class="token operator">/</span>IdeaProjects<span class="token operator">/</span>study<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>com<span class="token operator">/</span>keanu<span class="token operator">/</span>io<span class="token operator">/</span>study<span class="token operator">/</span>concurrency<span class="token operator">/</span>VolatileDemo<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token class-name">Last</span> modified <span class="token number">2019</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span> size <span class="token number">583</span> bytes  MD5 checksum 0b39c03d7d60166f7ab82b07bc3fc58d  Compiled from <span class="token string">"VolatileDemo.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>keanu<span class="token punctuation">.</span>io<span class="token punctuation">.</span>study<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>VolatileDemo</span>  minor version<span class="token operator">:</span> <span class="token number">0</span>  major version<span class="token operator">:</span> <span class="token number">49</span>  flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SUPERConstant pool<span class="token operator">:</span>   #<span class="token number">1</span> <span class="token operator">=</span> Methodref          #<span class="token number">6</span><span class="token punctuation">.</span>#<span class="token number">23</span>         <span class="token comment" spellcheck="true">// java/lang/Object."&lt;init>":()V</span>   #<span class="token number">2</span> <span class="token operator">=</span> Fieldref           #<span class="token number">3</span><span class="token punctuation">.</span>#<span class="token number">24</span>         <span class="token comment" spellcheck="true">// com/keanu/io/study/concurrency/VolatileDemo.i:I</span>   #<span class="token number">3</span> <span class="token operator">=</span> Class              #<span class="token number">25</span>            <span class="token comment" spellcheck="true">// com/keanu/io/study/concurrency/VolatileDemo</span>   #<span class="token number">4</span> <span class="token operator">=</span> Methodref          #<span class="token number">3</span><span class="token punctuation">.</span>#<span class="token number">23</span>         <span class="token comment" spellcheck="true">// com/keanu/io/study/concurrency/VolatileDemo."&lt;init>":()V</span>   #<span class="token number">5</span> <span class="token operator">=</span> Methodref          #<span class="token number">3</span><span class="token punctuation">.</span>#<span class="token number">26</span>         <span class="token comment" spellcheck="true">// com/keanu/io/study/concurrency/VolatileDemo.incr:()V</span>   #<span class="token number">6</span> <span class="token operator">=</span> Class              #<span class="token number">27</span>            <span class="token comment" spellcheck="true">// java/lang/Object</span>   #<span class="token number">7</span> <span class="token operator">=</span> Utf8               i   #<span class="token number">8</span> <span class="token operator">=</span> Utf8               I   #<span class="token number">9</span> <span class="token operator">=</span> Utf8               <span class="token operator">&lt;</span>init<span class="token operator">></span>  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token function">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span>V  #<span class="token number">11</span> <span class="token operator">=</span> Utf8               Code  #<span class="token number">12</span> <span class="token operator">=</span> Utf8               LineNumberTable  #<span class="token number">13</span> <span class="token operator">=</span> Utf8               LocalVariableTable  #<span class="token number">14</span> <span class="token operator">=</span> Utf8               <span class="token keyword">this</span>  #<span class="token number">15</span> <span class="token operator">=</span> Utf8               Lcom<span class="token operator">/</span>keanu<span class="token operator">/</span>io<span class="token operator">/</span>study<span class="token operator">/</span>concurrency<span class="token operator">/</span>VolatileDemo<span class="token punctuation">;</span>  #<span class="token number">16</span> <span class="token operator">=</span> Utf8               incr  #<span class="token number">17</span> <span class="token operator">=</span> Utf8               main  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token function">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V  #<span class="token number">19</span> <span class="token operator">=</span> Utf8               args  #<span class="token number">20</span> <span class="token operator">=</span> Utf8               <span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span>  #<span class="token number">21</span> <span class="token operator">=</span> Utf8               SourceFile  #<span class="token number">22</span> <span class="token operator">=</span> Utf8               VolatileDemo<span class="token punctuation">.</span>java  #<span class="token number">23</span> <span class="token operator">=</span> NameAndType        #<span class="token number">9</span><span class="token operator">:</span>#<span class="token number">10</span>         <span class="token comment" spellcheck="true">// "&lt;init>":()V</span>  #<span class="token number">24</span> <span class="token operator">=</span> NameAndType        #<span class="token number">7</span><span class="token operator">:</span>#<span class="token number">8</span>          <span class="token comment" spellcheck="true">// i:I</span>  #<span class="token number">25</span> <span class="token operator">=</span> Utf8               com<span class="token operator">/</span>keanu<span class="token operator">/</span>io<span class="token operator">/</span>study<span class="token operator">/</span>concurrency<span class="token operator">/</span>VolatileDemo  #<span class="token number">26</span> <span class="token operator">=</span> NameAndType        #<span class="token number">16</span><span class="token operator">:</span>#<span class="token number">10</span>        <span class="token comment" spellcheck="true">// incr:()V</span>  #<span class="token number">27</span> <span class="token operator">=</span> Utf8               java<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">{</span>  <span class="token keyword">volatile</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> I    flags<span class="token operator">:</span> ACC_VOLATILE  <span class="token keyword">public</span> com<span class="token punctuation">.</span>keanu<span class="token punctuation">.</span>io<span class="token punctuation">.</span>study<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span><span class="token function">VolatileDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V</span>         <span class="token number">4</span><span class="token operator">:</span> aload_0         <span class="token number">5</span><span class="token operator">:</span> iconst_0         <span class="token number">6</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>         <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">5</span><span class="token operator">:</span> <span class="token number">4</span>      LocalVariableTable<span class="token operator">:</span>        Start  Length  Slot  Name   Signature            <span class="token number">0</span>      <span class="token number">10</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   Lcom<span class="token operator">/</span>keanu<span class="token operator">/</span>io<span class="token operator">/</span>study<span class="token operator">/</span>concurrency<span class="token operator">/</span>VolatileDemo<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> dup         <span class="token number">2</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>         <span class="token number">5</span><span class="token operator">:</span> iconst_1         <span class="token number">6</span><span class="token operator">:</span> iadd         <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">10</span>      LocalVariableTable<span class="token operator">:</span>        Start  Length  Slot  Name   Signature            <span class="token number">0</span>      <span class="token number">11</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   Lcom<span class="token operator">/</span>keanu<span class="token operator">/</span>io<span class="token operator">/</span>study<span class="token operator">/</span>concurrency<span class="token operator">/</span>VolatileDemo<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// class com/keanu/io/study/concurrency/VolatileDemo</span>         <span class="token number">3</span><span class="token operator">:</span> dup         <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment" spellcheck="true">// Method "&lt;init>":()V</span>         <span class="token number">7</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment" spellcheck="true">// Method incr:()V</span>        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">10</span>      LocalVariableTable<span class="token operator">:</span>        Start  Length  Slot  Name   Signature            <span class="token number">0</span>      <span class="token number">11</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">}</span>SourceFile<span class="token operator">:</span> <span class="token string">"VolatileDemo.java"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ACC_VOLATILE 标志被定义在 JVM 源码的 accessFlags.hpp 中。 </p><pre class="line-numbers language-C++"><code class="language-C++">// accessFlags.hppbool is_volatile () const { return (_flags & JVM_ACC_VOLATILE) != 0; }// bytecodeInterpreter.cpp// 存储变量时，判断是否被 volatile 修饰if (cache -> is_volatile()) {    // 判断数据类型，根据不同的数据类型执行不同的方法    if (tos_type == itos) {        // int 类型       obj -> release_int_field_put(field_offset, STACK_INT(-1));    } else if (tos_type == atos) { // obj 对象类型        VERIFY_OOP(STACK_OBJECT(-1));        obj -> release_obj_field_put(field_offset, STACK_OBJECT(-1));        OrderAccess::release_store(&BYTE_MAP_BASE[(uintptr_t)obj >> CardTableModRefBS::card_shift], 0);    } else if (tos_type == btos) {        // byte 类型        obj -> release_byte_field_put(field_offset, STACK_INT(-1));    } else if (tos_type == ltos) {        // long 类型        obj -> release_long_field_put(field_offset, STACK_LONG(-1));    } // ... char, short, float, double 省略    // 执行完毕后，执行下面这个方法    OrderAccess::storeload();}// oop.inline.cpp// release_int_field_put 方法在此文件中inline void oopDesc::release_int_field_put(int offset, jint contents) { OrderAccess::release_store(int_field_addr(offset), contents);  }// release_store 方法在 orderAccess.hpp 中定义// orderAccess.hppstatic void release_store(volatile jint* p, jint v); //还有对其他数据类型的定义// 具体的实现根据不同的操作系统CPU进行实现 Linux, Windows.. 等等 CPU // 例如：orderAccess_linux_x86.inline.hppinline void OrderAccess::release_store(volatile jint* p, jint v) { *p = v; } // 此处 volatile，语言级别的内存屏障。防止指令重排序，强制对缓存修改，立即写入到主内存中，使其他 CPU 的缓存失效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对每个 volatile 变量的写操作的前面会插入 storestore barrier。</li><li>对每个 volatile 变量的写操作后会插入 storeload barrier。</li><li>对每个 volatile 读操作之前插入 loadload barrier。</li><li>对每个 volatile 读操作之后插入 loadstore barrier。</li></ol><p>以上代码第 23 行证实了第二点：(其他的可以在其他源码中找到)</p><pre class="line-numbers language-c++"><code class="language-c++">OrderAccess::storeload(); // 这是在写操作完毕之后，执行的方法。// 该方法在 orderAccess_linux_x86.inline.hpp 中（此处只看这一个实现）inline void OrderAccess::loadload() { acquire(); }inline void OrderAccess::storestore() { release(); }inline void OrderAccess::loadstore() { acquire(); }inline void OrderAccess::storeload() { fence(); }// fence() 方法中会在指令之前加入 lock 前缀。（汇编指令）。。。汇编指令没有深入研究，不贴代码了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 volatile 修饰符可以保证内存的可见性（内存屏障）。</p><h2 id="volatile-原子性问题"><a href="#volatile-原子性问题" class="headerlink" title="volatile 原子性问题"></a>volatile 原子性问题</h2><p>volatile 变量的复合操作是无法保证原子性问题的。为什么呢？</p><p>例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>keanu<span class="token punctuation">.</span>io<span class="token punctuation">.</span>study<span class="token punctuation">.</span>concurrency<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">VolatileDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被 JVM 编译之后（使用 javap -c 指令查看字节码）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>keanu<span class="token punctuation">.</span>io<span class="token punctuation">.</span>study<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>VolatileDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">volatile</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>keanu<span class="token punctuation">.</span>io<span class="token punctuation">.</span>study<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span><span class="token function">VolatileDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V</span>       <span class="token number">4</span><span class="token operator">:</span> aload_0       <span class="token number">5</span><span class="token operator">:</span> iconst_0       <span class="token number">6</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>       <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> dup       <span class="token number">2</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>       <span class="token number">5</span><span class="token operator">:</span> iconst_1       <span class="token number">6</span><span class="token operator">:</span> iadd       <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>      <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// class com/keanu/io/study/concurrency/VolatileDemo</span>       <span class="token number">3</span><span class="token operator">:</span> dup       <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment" spellcheck="true">// Method "&lt;init>":()V</span>       <span class="token number">7</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment" spellcheck="true">// Method incr:()V</span>      <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，编译之后的指令中，i++（复合操作） 的操作分成了 3步，以上代码的 17，19，20 行。</p><ol><li>getfield</li><li>iadd</li><li><p>putfield</p><p>当有多个线程同时执行时，有可能同一时间有多个线程同时执行了 getfield 指令，可能就会有一个线程拿到的是旧值，这就造成了原子性问题。</p></li></ol><h2 id="如何解决原子性问题"><a href="#如何解决原子性问题" class="headerlink" title="如何解决原子性问题"></a>如何解决原子性问题</h2><p>可以通过 synchronized 关键字来解决，避免线程并行执行。synchronized 实现原理可以参照这篇文章：<a href="https://keanu96.github.io/deep-in-synchronized/" target="_blank" rel="noopener">https://keanu96.github.io/deep-in-synchronized/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;volatile 应该经常听说或者用到的。它在并发编程中起到了什么作用呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volatile 能禁止编译器和CPU对指令重排序&lt;/li&gt;
&lt;li&gt;对 volatile 变量的操作插入内存屏障，保证内存的可见性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是我学习 volatile 的笔记，在这里记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ryan4cloud.github.io/categories/Java/"/>
    
    
      <category term="并发" scheme="http://ryan4cloud.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微服务注册中心 Eureka 架构深入解读（转载）</title>
    <link href="http://ryan4cloud.github.io/deep-in-eureka/"/>
    <id>http://ryan4cloud.github.io/deep-in-eureka/</id>
    <published>2019-10-03T13:15:06.000Z</published>
    <updated>2019-11-11T11:17:22.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自 <a href="https://www.infoq.cn/article/jlDJQ*3wtN2PcqTDyokh" target="_blank" rel="noopener">微服务注册中心 Eureka 架构深入解读</a></p></blockquote><p>微服务架构中最核心的部分是服务治理，服务治理最基础的组件是注册中心。随着微服务架构的发展，出现了很多微服务架构的解决方案，其中包括我们熟知的 Dubbo 和 Spring Cloud。</p><p>关于注册中心的解决方案，dubbo 支持了 Zookeeper、Redis、Multicast 和 Simple，官方推荐 Zookeeper。Spring Cloud 支持了 Zookeeper、Consul 和 Eureka，官方推荐 Eureka。</p><a id="more"></a><p>两者之所以推荐不同的实现方式，原因在于组件的特点以及适用场景不同。简单来说：</p><ul><li>ZK 的设计原则是 CP，即强一致性和分区容错性。他保证数据的强一致性，但舍弃了可用性，<strong>如果出现网络问题可能会影响 ZK 的选举，导致 ZK 注册中心的不可用</strong>。</li><li><p>Eureka 的设计原则是 AP，即可用性和分区容错性。他保证了注册中心的可用性，但舍弃了数据一致性，<strong>各节点上的数据有可能是不一致的（会最终一致）</strong>。</p><p>Eureka 采用纯 Java 实现，除实现了注册中心基本的服务注册和发现之外，极大的满足注册中心的可用性，即使只有一台服务可用，也可以保证注册中心的可用性。</p></li></ul><p>本文将聚焦到 Eureka 的内部实现原理，先从微服务架构的部署图介绍 Eureka 的总体架构，然后剖析服务信息的存储结构，最后探究跟服务生命周期相关的服务注册机制、服务续约机制、服务注销机制、服务剔除机制、服务获取机制、和服务同步机制。</p><h2 id="Eureka-总体架构"><a href="#Eureka-总体架构" class="headerlink" title="Eureka 总体架构"></a>Eureka 总体架构</h2><p>下面是 Eureka 注册中心部署在多个机房的架构图，这正是他高可用性的优势（Zookeeper 千万别这么部署）。</p><p><img src="1.png" alt="微服务注册中心Eureka架构深入解读"></p><p>从组件功能看：</p><ul><li>黄色注册中心集群，分别部署在北京、天津、青岛机房；</li><li>红色服务提供者，分别部署北京和青岛机房；</li><li>淡绿色服务消费者，分别部署在北京和天津机房；</li></ul><p>从机房分布看：</p><ul><li>北京机房部署了注册中心、服务提供者和服务消费者；</li><li>天津机房部署了注册中心和服务消费者；</li><li>青岛机房部署了注册中心和服务提供者；</li></ul><h3 id="组件调用关系"><a href="#组件调用关系" class="headerlink" title="组件调用关系"></a>组件调用关系</h3><p><strong>服务提供者</strong></p><ol><li>启动后，向注册中心发起 register 请求，注册服务</li><li>在运行过程中，定时向注册中心发送 renew 心跳，证明“我还活着”。</li><li>停止服务提供者，向注册中心发起 cancel 请求，清空当前服务注册信息。</li></ol><p><strong>服务消费者</strong></p><ol><li>启动后，从注册中心拉取服务注册信息</li><li>在运行过程中，定时更新服务注册信息。</li><li>服务消费者发起远程调用：<br>a&gt; 服务消费者（北京）会从服务注册信息中选择同机房的服务提供者（北京），发起远程调用。只有同机房的服务提供者挂了才会选择其他机房的服务提供者（青岛）。<br>b&gt; 服务消费者（天津）因为同机房内没有服务提供者，则会按负载均衡算法选择北京或青岛的服务提供者，发起远程调用。</li></ol><p><strong>注册中心</strong></p><ol><li>启动后，从其他节点拉取服务注册信息。</li><li>运行过程中，定时运行 evict 任务，剔除没有按时 renew 的服务（包括非正常停止和网络故障的服务）。</li><li><p>运行过程中，接收到的 register、renew、cancel 请求，都会同步至其他注册中心节点。</p><p>本文将详细说明上图中的 registry、register、renew、cancel、getRegistry、evict 的内部机制。</p></li></ol><h2 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h2><p>既然是服务注册中心，必然要存储服务的信息，我们知道 ZK 是将服务信息保存在树形节点上。而下面是 Eureka 的数据存储结构：</p><p><img src="2.png" alt="微服务注册中心Eureka架构深入解读"></p><p>Eureka 的数据存储分了两层：数据存储层和缓存层。</p><p>Eureka Client 在拉取服务信息时，先从缓存层获取（相当于 Redis），如果获取不到，先把数据存储层的数据加载到缓存中（相当于 Mysql），再从缓存中获取。值得注意的是，数据存储层的数据结构是服务信息，而缓存中保存的是经过处理加工过的、可以直接传输到 Eureka Client 的数据结构。</p><p>Eureka 这样的数据结构设计是把内部的数据存储结构与对外的数据结构隔离开了，就像是我们平时在进行接口设计一样，对外输出的数据结构和数据库中的数据结构往往都是不一样的。</p><p><strong>数据存储层</strong></p><p>这里为什么说是存储层而不是持久层？因为 rigistry 本质上是一个双层的 ConcurrentHashMap，存储在内存中的。</p><ul><li>第一层的 key 是<code>spring.application.name</code>，value 是第二层 ConcurrentHashMap；</li><li>第二层 ConcurrentHashMap 的 key 是服务的 InstanceId，value 是 Lease 对象；</li><li>Lease 对象包含了服务详情和服务治理相关的属性。</li></ul><p><strong>二级缓存层</strong></p><p>Eureka 实现了二级缓存来保存即将要对外传输的服务信息，数据结构完全相同。</p><ul><li>一级缓存：<code>ConcurrentHashMap&lt;Key,Value&gt; readOnlyCacheMap</code>，本质上是 HashMap，无过期时间，保存服务信息的对外输出数据结构。</li><li>二级缓存：<code>Loading&lt;Key,Value&gt; readWriteCacheMap</code>，本质上是 guava 的缓存，包含失效机制，保存服务信息的对外输出数据结构。</li></ul><p>既然是缓存，那必然要有更新机制，来保证数据的一致性。下面是缓存的更新机制：</p><p><img src="3.png" alt="微服务注册中心Eureka架构深入解读"></p><p>更新机制包含删除和加载两个部分，上图黑色箭头表示删除缓存的动作，绿色表示加载或触发加载的动作。</p><p><strong>删除二级缓存：</strong></p><ol><li>Eureka Client 发送 register、renew 和 cancel 请求并更新 registry 注册表之后，删除二级缓存；</li><li>Eureka Server 自身的 Evict Task 剔除服务后，删除二级缓存；</li><li>二级缓存本身设置了 guava 的失效机制，隔一段时间后自己自动失效；</li></ol><p><strong>加载二级缓存：</strong></p><ol><li>Eureka Client 发送 getRegistry 请求后，如果二级缓存中没有，就触发 guava 的 load，即从 registry 中获取原始服务信息后进行处理加工，再加载到二级缓存中。</li><li>Eureka Server 更新一级缓存的时候，如果二级缓存没有数据，也会触发 guava 的 load。</li></ol><p><strong>更新一级缓存：</strong></p><ol><li><p>Eureka Server 内置了一个 TimerTask，定时将二级缓存中的数据同步到一级缓存（这个动作包括了删除和加载）。</p><p>关于缓存的实现参考 ResponseCacheImpl</p></li></ol><h2 id="服务注册机制"><a href="#服务注册机制" class="headerlink" title="服务注册机制"></a>服务注册机制</h2><p>服务提供者、服务消费者、以及服务注册中心自己，启动后都会向注册中心注册服务（如果配置了注册）。下图是介绍如何完成服务注册的：</p><p><img src="4.png" alt="微服务注册中心Eureka架构深入解读"></p><p>注册中心服务接收到 register 请求后：</p><ol><li>保存服务信息，将服务信息保存到 registry 中；</li><li>更新队列，将此事件添加到更新队列中，供 Eureka Client 增量同步服务信息使用。</li><li>清空二级缓存，即 readWriteCacheMap，用于保证数据的一致性。</li><li>更新阈值，供剔除服务使用。</li><li>同步服务信息，将此事件同步至其他的 Eureka Server 节点。</li></ol><h2 id="服务续约机制"><a href="#服务续约机制" class="headerlink" title="服务续约机制"></a>服务续约机制</h2><p>服务注册后，要定时（默认 30S，可自己配置）向注册中心发送续约请求，告诉注册中心“我还活着”。</p><p><img src="5.png" alt="微服务注册中心Eureka架构深入解读"></p><p>注册中心收到续约请求后：</p><ol><li><p>更新服务对象的最近续约时间，即 Lease 对象的 lastUpdateTimestamp;</p></li><li><p>同步服务信息，将此事件同步至其他的 Eureka Server 节点。</p><p>剔除服务之前会先判断服务是否已经过期，判断服务是否过期的条件之一是续约时间和当前时间的差值是不是大于阈值。</p></li></ol><h2 id="服务注销机制"><a href="#服务注销机制" class="headerlink" title="服务注销机制"></a>服务注销机制</h2><p>服务<strong>正常停止</strong>之前会向注册中心发送注销请求，告诉注册中心“我要下线了”。</p><p><img src="6.png" alt="微服务注册中心Eureka架构深入解读"></p><p>注册中心服务接收到 cancel 请求后：</p><ol><li>删除服务信息，将服务信息从 registry 中删除；</li><li>更新队列，将此事件添加到更新队列中，供 Eureka Client 增量同步服务信息使用。</li><li>清空二级缓存，即 readWriteCacheMap，用于保证数据的一致性。</li><li>更新阈值，供剔除服务使用。</li><li><p>同步服务信息，将此事件同步至其他的 Eureka Server 节点。</p><p>服务正常停止才会发送 Cancel，如果是非正常停止，则不会发送，此服务由 Eureka Server 主动剔除。</p></li></ol><h2 id="服务剔除机制"><a href="#服务剔除机制" class="headerlink" title="服务剔除机制"></a>服务剔除机制</h2><p>Eureka Server 提供了服务剔除的机制，用于剔除没有正常下线的服务。</p><p><img src="7.png" alt="微服务注册中心Eureka架构深入解读"></p><p>服务的剔除包括三个步骤，首先判断是否满足服务剔除的条件，然后找出过期的服务，最后执行剔除。</p><p><strong>判断是否满足服务剔除的条件</strong></p><p>有两种情况可以满足服务剔除的条件：</p><ol><li>关闭了自我保护</li><li>如果开启了自我保护，需要进一步判断是 Eureka Server 出了问题，还是 Eureka Client 出了问题，如果是 Eureka Client 出了问题则进行剔除。</li></ol><p>这里比较核心的条件是自我保护机制，Eureka 自我保护机制是为了防止误杀服务而提供的一个机制。Eureka 的自我保护机制“谦虚”的认为如果大量服务都续约失败，则认为是自己出问题了（如自己断网了），也就不剔除了；反之，则是 Eureka Client 的问题，需要进行剔除。而<strong>自我保护阈值是区分 Eureka Client 还是 Eureka Server 出问题的临界值：如果超出阈值就表示大量服务可用，少量服务不可用，则判定是 Eureka Client 出了问题。如果未超出阈值就表示大量服务不可用，则判定是 Eureka Server 出了问题</strong>。</p><p>条件 1 中如果关闭了自我保护，则统统认为是 Eureka Client 的问题，把没按时续约的服务都剔除掉（这里有剔除的最大值限制）。</p><p>这里比较难理解的是阈值的计算：</p><ul><li>自我保护阈值 = 服务总数 <em> 每分钟续约数 </em> 自我保护阈值因子。</li><li>每分钟续约数 =（60S/ 客户端续约间隔）</li></ul><p>最后自我保护阈值的计算公式为：</p><p>自我保护阈值 = 服务总数 <em> （60S/ 客户端续约间隔） </em> 自我保护阈值因子。</p><p><strong>举例</strong>：如果有 100 个服务，续约间隔是 30S，自我保护阈值 0.85。</p><p>自我保护阈值 =100 <em> 60 / 30 </em> 0.85 = 170。</p><p>如果上一分钟的续约数 =180&gt;170，则说明大量服务可用，是服务问题，进入剔除流程；</p><p>如果上一分钟的续约数 =150&lt;170，则说明大量服务不可用，是注册中心自己的问题，进入自我保护模式，不进入剔除流程。</p><p><strong>找出过期的服务</strong></p><p>遍历所有的服务，判断上次续约时间距离当前时间大于阈值就标记为过期。并将这些过期的服务保存到集合中。</p><p><strong>剔除服务</strong></p><p>在剔除服务之前先计算剔除的数量，然后遍历过期服务，通过洗牌算法确保每次都公平的选择出要剔除的任务，最后进行剔除。</p><p>执行剔除服务后：</p><ol><li>删除服务信息，从 registry 中删除服务。</li><li>更新队列，将当前剔除事件保存到更新队列中。</li><li><p>清空二级缓存，保证数据的一致性。</p><p>实现过程参考 AbstractInstanceRegistry.evict() 方法。</p></li></ol><h2 id="服务获取机制"><a href="#服务获取机制" class="headerlink" title="服务获取机制"></a>服务获取机制</h2><p>Eureka Client 获取服务有两种方式，全量同步和增量同步。获取流程是根据 Eureka Server 的多层数据结构进行的：</p><p><img src="8.png" alt="微服务注册中心Eureka架构深入解读"></p><p>无论是全量同步还是增量同步，都是先从缓存中获取，如果缓存中没有，则<strong>先加载到缓存中，再从缓存中获取。（registry 只保存数据结构，缓存中保存 ready 的服务信息。）</strong></p><ol><li>先从一级缓存中获取<br>a&gt; 先判断是否开启了一级缓存<br>b&gt; 如果开启了则从一级缓存中获取，如果存在则返回，如果没有，则从二级缓存中获取<br>d&gt; 如果未开启，则跳过一级缓存，从二级缓存中获取</li><li>再从二级缓存中获取<br>a&gt; 如果二级缓存中存在，则直接返回；<br>b&gt; 如果二级缓存中不存在，则先将数据加载到二级缓存中，再从二级缓存中获取。注意加载时需要判断是增量同步还是全量同步，增量同步从 recentlyChangedQueue 中 load，全量同步从 registry 中 load。</li></ol><h2 id="服务同步机制"><a href="#服务同步机制" class="headerlink" title="服务同步机制"></a>服务同步机制</h2><p>服务同步机制是用来同步 Eureka Server 节点之间服务信息的。它包括 Eureka Server 启动时的同步，和运行过程中的同步。</p><p><strong>启动时同步</strong></p><p><img src="9.png" alt="微服务注册中心Eureka架构深入解读"></p><p>Eureka Server 启动后，遍历 eurekaClient.getApplications 获取服务信息，并将服务信息注册到自己的 registry 中。</p><p>注意这里是两层循环，第一层循环是为了保证已经拉取到服务信息，第二层循环是遍历拉取到的服务信息。</p><p><strong>运行过程中同步</strong></p><p><img src="10.png" alt="微服务注册中心Eureka架构深入解读"></p><p>当 Eureka Server 节点有 register、renew、cancel 请求进来时，会将这个请求封装成 TaskHolder 放到 acceptorQueue 队列中，然后经过一系列的处理，放到 batchWorkQueue 中。</p><p><code>TaskExecutor.BatchWorkerRunnable</code>是个线程池，不断的从 batchWorkQueue 队列中 poll 出 TaskHolder，然后向其他 Eureka Server 节点发送同步请求。</p><p>这里省略了两个部分：</p><ul><li>一个是在 acceptorQueue 向 batchWorkQueue 转化时，省略了中间的 processingOrder 和 pendingTasks 过程。</li><li>另一个是当同步失败时，会将失败的 TaskHolder 保存到 reprocessQueue 中，重试处理。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>对微服务解决方案 Dubbo 和 Spring Cloud 的对比非常多，这里对注册中心做个简单对比。</p><p><img src="11.png" alt="微服务注册中心Eureka架构深入解读"></p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Zookeeper</th><th>Eureka</th></tr></thead><tbody><tr><td style="text-align:left">设计原则</td><td style="text-align:left">CP</td><td>AP</td></tr><tr><td style="text-align:left">优点</td><td style="text-align:left">数据强一致</td><td>服务高可用</td></tr><tr><td style="text-align:left">缺点</td><td style="text-align:left">网络分区会影响 Leader 选举，超过阈值后集群不可用</td><td>服务节点间的数据可能不一致； Client-Server 间的数据可能不一致；</td></tr><tr><td style="text-align:left">适用场景</td><td style="text-align:left">单机房集群，对数据一致性要求较高</td><td>云机房集群，跨越多机房部署；对注册中心服务可用性要求较高</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自 &lt;a href=&quot;https://www.infoq.cn/article/jlDJQ*3wtN2PcqTDyokh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微服务注册中心 Eureka 架构深入解读&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微服务架构中最核心的部分是服务治理，服务治理最基础的组件是注册中心。随着微服务架构的发展，出现了很多微服务架构的解决方案，其中包括我们熟知的 Dubbo 和 Spring Cloud。&lt;/p&gt;
&lt;p&gt;关于注册中心的解决方案，dubbo 支持了 Zookeeper、Redis、Multicast 和 Simple，官方推荐 Zookeeper。Spring Cloud 支持了 Zookeeper、Consul 和 Eureka，官方推荐 Eureka。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://ryan4cloud.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Eureka" scheme="http://ryan4cloud.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>【Java 并发】synchornized学习笔记</title>
    <link href="http://ryan4cloud.github.io/deep-in-synchronized/"/>
    <id>http://ryan4cloud.github.io/deep-in-synchronized/</id>
    <published>2019-09-07T01:44:19.000Z</published>
    <updated>2019-11-11T11:17:36.810Z</updated>
    
    <content type="html"><![CDATA[<p>我们在学习 Java 并发编程的时候，看到的最多的就是 synchronized 关键字了，它可以解决很多线程安全问题，随着深入学习，我们知道 synchronized 是一个重量级锁，效率相对于 Lock 来说并不是那么好。但是经过 Java 几个版本的优化之后，synchronized 并不显得那么笨重了。下面我们来看一下 synchronized 的实现机制，和 Java 对它进行了什么样的升级。</p><a id="more"></a><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>Synchronized 保证了方法或者代码块在运行时，同一时间只有一个线程可以执行，并保证了对共享变量的内存可见性。</p><p>Java 中 synchronized 集中实现方法：</p><ul><li>非静态同步方法：锁住当前实例对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>静态同步方法：锁住当前类的 class 对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>同步代码块：锁住括号中的对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们利用工具查看生成的 class 文件，生成的 class 文件如下：</p><p><img src="synchronized-class-file.jpg" alt="Synchronized class 文件"></p><p>从以上 class 文件我们可以看出，同步代码块是通过 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 来实现的，同步方法是依靠方法修饰符中的 <strong>ACC_SYNCHRONIZED</strong> 实现。</p><ul><li>同步代码块：moniterenter 指令会插入到同步代码块开始的位置，moniterexit 插入到同步代码块结束的位置，JVM 需要保证每个 monitorenter 都有一个 monitorexit 相对应。任何对象都有一个 monitor 与之相关联，当 monitor 被持有后，它将处于锁定状态。线程执行到 moniterenter 指令时，将会尝试获取当前对象对应的 monitor 所有权（这个过程就是获取锁）。</li><li>同步方法：同步方法中没有 monitorenter 和 monitorexit，取而代之的是在 flags 中添加了 ACC_SYNCHRONIZED 标识，JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用（方法调用时，调用指令将会检查方法是否含有 ACC_SYNCHRONIZED 访问标志，如果有，调用线程将会先持有 monitor。如果同步方法执行期间抛出了异常，而且在方法内部无法处理异常，则这个方法所持有的 monitor 将会在异常抛到同步方法之外时自动释放）。使用调用该方法的对象或方法所属 Class 在 JVM 的内部对象表示 Klass 做为锁对象。</li></ul><p>关于 monitorenter 和 moniterexit 这两条指令 在 JVM 的规范中有这样一句话：</p><blockquote><p>Each object is associated with a monitor. A monitor is locked if and only if it has an owner. The thread that executes monitorenter attempts to gain ownership of the monitor associated with objectref, as follows:<br>• If the entry count of the monitor associated with objectref is zero, the thread enters the monitor and sets its entry count to one. The thread is then the owner of the monitor.<br>• If the thread already owns the monitor associated with objectref, it reenters the monitor, incrementing its entry count.<br>• If another thread already owns the monitor associated with objectref, the thread blocks until the monitor’s entry count is zero, then tries again to gain ownership.</p></blockquote><p>以上引用也说明了，每个对象都关联了一个 monitor，如果一个monitor被占用则它处于锁定状态。线程在执行 monitorenter 指令时会尝试获取对象关联的 monitor 的所有权。</p><ul><li>如果 monitor 的进入数为0，则该线程进入 monitor，并将进入数设置为1，该线程为该 monitor 的所有者。</li><li>如果一个线程已经占有了对象关联的 monitor，它会重新进入，并将进入数加1。</li><li>如果已经有另一个线程占有了该 monitor，则该线程会阻塞直到 monitor 的进入数为0，然后尝试获取所有权。</li></ul><blockquote><p>The thread that executes monitorexit must be the owner of the monitor associated with the instance referenced by objectref.<br>The thread decrements the entry count of the monitor associated with objectref. If as a result the value of the entry count is zero, the thread exits the monitor and is no longer its owner. Other threads that are blocking to enter the monitor are allowed to attempt to do so.</p></blockquote><p>大致意思是：执行 monitorexit 的线程必须是 objectref 所对应的 monitor 的所有者。该指令执行时，线程会将 monitor 的进入数减1。如果进入数减1之后为0，则该线程退出 monitor 并且不再是它的所有者。被阻塞的其他线程将允许尝试获取所有权。</p><h1 id="Java-对象头和-Monitor"><a href="#Java-对象头和-Monitor" class="headerlink" title="Java 对象头和 Monitor"></a>Java 对象头和 Monitor</h1><h2 id="Java-对象头"><a href="#Java-对象头" class="headerlink" title="Java 对象头"></a>Java 对象头</h2><p>对象在堆内存中的布局分为三块区域：对象头、实例数据和对其填充。</p><p><img src="object_in_heap.png" alt="对象在堆中的存储"></p><ul><li>实例变量：存放类和父类的属性信息，如果是数组，还包括数组的长度，这部分内存为4字节。</li><li>填充数据：JVM 要求对象的其实地址必须为8字节的整数倍，所以有可能数据需要填充（非必须）。</li></ul><p>Java 的对象头是实现 synchronized 的锁对象的基础。一般情况，synchronized 使用的锁对象都存在 Java 对象头中。JVM 采用两个字节来存储对象头（如果对象是数组，则使用三个字节，多出来的字节存储数组长度），主要是由 Mark Word 和类型指针组成。</p><table><thead><tr><th style="text-align:center">虚拟机位数</th><th style="text-align:center">头对象结构</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">32/64bit</td><td style="text-align:center">Mark Word</td><td style="text-align:center">存储对象的 hashCode，锁信息、分代年龄、GC标志、偏向线程ID、偏向时间戳等信息</td></tr><tr><td style="text-align:center">32/64bit</td><td style="text-align:center">Class Metadata Address</td><td style="text-align:center">类型指针指向对象的类元数据，JVM 通过这个指针确定对象是哪个类的实例</td></tr></tbody></table><p>由于对象头的信息是与对象自身定义的数据没有关系的额外存储成本，因此考虑到 JVM 的空间效率，Mark Word 被设计成一个非固定的数据结构，以存储更多有效的数据，它会根据对象状态的变化复用自己的存储空间。Mark Word 会根据程序的运行而发生变化（以下是32位虚拟机默认的存储结构和其他变化状态）。</p><p>32位 JVM 的 Mark Word 默认存储结构：</p><table><thead><tr><th>锁状态</th><th>25bit</th><th>4bit</th><th>1bit是否是偏向锁</th><th>2bit 锁标志位</th></tr></thead><tbody><tr><td>无锁状态</td><td>对象HashCode</td><td>对象分代年龄</td><td>0</td><td>01</td></tr></tbody></table><p>状态变化（32位虚拟机）：</p><p><img src="状态变化.png" alt="状态变化"></p><p>其中轻量级锁和偏向锁时在 Java 6 对 synchronized 锁进行优化后新增的。</p><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><p>Monitor 可以被理解为监视器，在 Hotspot 中，它是由 ObjectMonitor 实现的（位于 HotSpot 虚拟机源码的 ObjectMonitor.hpp文件中，C++实现），其主要数据结构为：</p><pre class="line-numbers language-c++"><code class="language-c++">ObjectMonitor() {    _header       = NULL;    _count        = 0; //记录个数    _waiters      = 0,    _recursions   = 0;    _object       = NULL;    _owner        = NULL;    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet    _WaitSetLock  = 0 ;    _Responsible  = NULL ;    _succ         = NULL ;    _cxq          = NULL ;    FreeNext      = NULL ;    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表    _SpinFreq     = 0 ;    _SpinClock    = 0 ;    OwnerIsThread = 0 ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ObjectMonitor 中有两个队列 —— _WaitSet, _EntryList（当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程拥有对象的 monitor 后，ObjectMonitor 会将 _owner 变量设置为当前线程，并将计数器 _count 加1，如果该线程调用了 wait() 方法，它将会释放当前持有的 monitor， _owner 将恢复为 NULL，同时该线程会进入 _WaitSet 等待被唤醒）。它们是用来保存 ObjectWaiter 对象列表（每个等待的线程都会被封装为 ObjectWaiter 对象），底层实现原理不再叙述(C++实现的，我也没看过)。我们可以用一张图来简单概述它的数据结构。</p><p><img src="Monitor 数据结构.png" alt="Monitor 数据结构"></p><p>其中：</p><ul><li><strong>Owner</strong>：初始化为 NULL，当线程成功拥有该锁时保存线程唯一标识，锁被释放后又置为 NULL。</li><li><strong>EntryQ</strong>：关联一个系统互斥锁（semaphore），阻塞所有试图锁住monitor record失败的线程。</li><li><strong>RcThis</strong>:表示blocked或waiting在该monitor record上的所有线程的个数。</li><li><strong>Nest</strong>:用来实现重入锁的计数。</li><li><strong>HashCode</strong>:保存从对象头拷贝过来的HashCode值（可能还包含GC age）。</li><li><strong>Candidate</strong>:用来避免不必要的阻塞或等待线程唤醒，因为每一次只有一个线程能够成功拥有锁，如果每次前一个释放锁的线程唤醒所有正在阻塞或等待的线程，会引起不必要的上下文切换（从阻塞到就绪然后因为竞争锁失败又被阻塞）从而导致性能严重下降。Candidate只有两种可能的值0表示没有需要唤醒的线程1表示要唤醒一个继任线程来竞争锁。</li></ul><blockquote><p>摘自：<a href="http://cmsblogs.com/?p=2071" target="_blank" rel="noopener">【死磕Java并发】—–深入分析synchronized的实现原理</a></p></blockquote><h1 id="Java-中锁的优化"><a href="#Java-中锁的优化" class="headerlink" title="Java 中锁的优化"></a>Java 中锁的优化</h1><p>Jdk 1.6 对锁的实现做了大量的优化（轻量级锁，偏向锁，自旋锁，适应性自旋锁，锁消除，锁粗化），锁主要存在四种状态（依次）：无锁状态，偏向锁状态，轻量级锁状态，重量级锁状态。它们会随着锁竞争的激烈而升级，锁只能升级不能降级（为了提高获得锁和释放锁的效率）。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><h2 id="适应性自旋锁"><a href="#适应性自旋锁" class="headerlink" title="适应性自旋锁"></a>适应性自旋锁</h2><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>通过对象内部的监视器 monitor 实现，而 monitor 的本质是依赖于底层操作系统的 Mutex Lock 实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。</p><p>参考文章：</p><p><a href="https://blogs.oracle.com/dave/biased-locking-in-hotspot" target="_blank" rel="noopener">Biased Locking in HotSpot</a></p><p><a href="https://www.cnblogs.com/javaminer/p/3889023.html" target="_blank" rel="noopener">JVM内部细节之一：synchronized关键字及实现细节(轻量级锁Lightweight Locking)</a></p><p><a href="http://cmsblogs.com/?p=2071" target="_blank" rel="noopener">【死磕Java并发】—–深入分析synchronized的实现原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在学习 Java 并发编程的时候，看到的最多的就是 synchronized 关键字了，它可以解决很多线程安全问题，随着深入学习，我们知道 synchronized 是一个重量级锁，效率相对于 Lock 来说并不是那么好。但是经过 Java 几个版本的优化之后，synchronized 并不显得那么笨重了。下面我们来看一下 synchronized 的实现机制，和 Java 对它进行了什么样的升级。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ryan4cloud.github.io/categories/Java/"/>
    
    
      <category term="并发" scheme="http://ryan4cloud.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Paxos Made Simple(译文)</title>
    <link href="http://ryan4cloud.github.io/paxos-made-simple/"/>
    <id>http://ryan4cloud.github.io/paxos-made-simple/</id>
    <published>2019-08-22T12:55:35.000Z</published>
    <updated>2019-11-11T11:18:02.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一个分布式的系统中，数据的一致性是非常重要的。所以需要用到一致性算法来解决数据一致性的问题。大家都知道 Zookeeper 的 zab 协议就是基于 Paxos 算法的，而我最近正好看了 <strong>Leslie Lamport</strong> 的 <a href="https://lamport.azurewebsites.net/pubs/paxos-simple.pdf" target="_blank" rel="noopener">Paxos Made Simple</a> 这篇论文，以下是我对 Paxos Made Simple 参杂自己的理解之后的翻译 (某些地方有机翻😄)，如果有错误的地方请指正，谢谢。</p><a id="more"></a><h1 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h1><p>假设一个进程的集合可以提出值（values），一致性算法则保证了只选出所提出值中的单个值。如果没有值没提出，那就不会有值被选中。如果一个值被选中，那么进程应该能够学习到该值。共识（一致性）的安全性要求如下：</p><ul><li>一个值只有被提出才可能被选中，</li><li>只有一个值能被选中，并且</li><li>一个进程在一个值被选中之前永远不会知道这个值是什么。</li></ul><p>目标是保证一些被提出的值能最终被选中，并且如果一个值被选中，那么进程最终能够知道（learn）该值。</p><p>我们让共识算法中的三个角色（role）由三个代理（agent）来执行：<strong>proposers</strong>，<strong>acceptors</strong>，<strong>learners</strong>。在实现中，单个进程可能不止扮演一个代理，但这里我们不关心代理和进程的映射。</p><p>假设代理能够通过消息传递与另一个进行通信，使用常用的异步，非拜占庭模型，其中：</p><ul><li>代理以任意的速度执行，可能会因为停止而失败，也可能重启。因为所有代理都可能在一个值被选中之后失败并重启，除非某些信息能被失败重启的代理记住，否则不可能有解决方案。</li><li>消息能以任意长的时间传递，可以重复，可以丢失，但是不会损坏。</li></ul><h1 id="选中一个值（Choosing-a-Value）"><a href="#选中一个值（Choosing-a-Value）" class="headerlink" title="选中一个值（Choosing a Value）"></a>选中一个值（Choosing a Value）</h1><p>选择一个值最简单的方法就是只有一个 Acceptor 代理。Proposer 给 Acceptor 发送一个提案（Proposer），Acceptor 选择其收到的第一个建议值。这样虽然简单，但是这种解决方案一定会有单机问题（原文中是：该 Acceptor 的失败会让任何进一步的进展都不可能执行。我认为此处是指单机问题。欢迎指正^ . ^）。</p><p>所以，让我们尝试另一种方法。我们用多个 Acceptor 代理代替单个 Acceptor。一个 Proposer 向一个 Acceptor 集合发送提案。一个 Acceptor 可能会接受该提案值。当一个足够大的 Acceptor 集合接受了这个建议值，则该值被选中。但是多大是足够大呢？为了保证只有一个值能被选中，我们让这个足够大的集合由任意多数派的代理集合 (majority of agents) 组成。因为任意两个多数派集合 (any two majorities) 至少有一个公共的代理，这在一个 Acceptor 最多能接受一个值时有效。</p><p>在不存在失败或者消息丢失的情况下，我们想让即使只有一个建议值被提出也能被选中，这表明了这一个要求：</p><blockquote><p>P1. An acceptor must accept the first proposal that it receives.</p><p>翻译：一个 Acceptor 必须接受它收到的第一个提案。</p></blockquote><p>但是这个要求引发了一个问题，不同的 Proposer 可以同时提出一些不同的提案，这就可能会造成每个提案会被相同数量的 Acceptor 接受，例如两个提案分别被半数的 Acceptor 接受，没有一个提案值被多数派的 Acceptor 所接受。而这样就无法知道选择了哪个提案值。</p><p>P1 和 一个值只有被多数派的 Acceptor 接受才会被选择的要求意味着一个 Acceptor 允许接受多个提案。我们通过分配编号来追踪不同的提案，所以<strong>一个提案 (proposal) 就由编号和提案值组成</strong> (假设一个提案的表现形式为 [n, v] )。为了防止混淆，我们要求每个提案的编号都不一样。How this is achieved depends on  the implementation, so for now we just assume it。当用以一个<strong>值</strong>的 proposal 被多数派的 Acceptor 接受，该<strong>值</strong>才会被选择。这种情况下，我们称一个<strong>提案</strong>被选择。</p><p>我们允许多个提案被选择，但是我们必须保证所有被选择的<strong>提案</strong>都有相同的<strong>值</strong>。通过对提案编号的归纳，足以保证：</p><blockquote><p>P2. If a proposal with value v is chosen,  then every higher-numbered proposal  that is  chosen has value v.</p><p>翻译：如果一个提案值为 v 的提案被选择，那么每个被选择且编号比该提案大的提案的值都是 v。</p></blockquote><p>因为编号是被完全排序的，条件 P2 保证了只有一个<strong>值</strong>能被选择的关键性安全属性。</p><p>一个提案要被选择，则必须至少被一个 Acceptor 接受，所以我们可以通过满足以下条件 (P2a) 来满足 P2：</p><blockquote><p>P2a.  If a proposal with value v is chosen, then every higher-numbered proposal accepted by any acceptor has value v.</p><p>翻译：如果一个提案值为 v 的提案被选择，那么被任意 Acceptor 所接受的更高编号的提案的提案值都为 v。(这里说明了如果一个提案值 v 被选择，Acceptor就不再通过提案值不为 v 的提案了)</p></blockquote><p>我们仍然要维持 P1 确保有提案能被选择。因为通信是<strong>异步</strong>的 (上文有提到前提条件)，可能会出现一个提案被选择了，但 Acceptor <strong><em>c</em></strong> 还没有接受（accept）任何任何提案，如果这时一个新的 Proposer “醒来”并发布了一个拥有更高编号且提案值不同的提案，这时 P1 就要求 Acceptor <strong><em>c</em></strong> 接受这个提案，则违反了 P2a。为了维持 P1 和 P2a，我们需要增强 P2a：</p><blockquote><p>P2b. If a proposal with value v is chosen, then every higher-numbered proposal issued by any proposer has value v.</p><p>翻译：如果一个提案值为 v 的提案被选择了，那么 Proposer 发布的所有更高编号的提案的提案值都为 v。（Proposer 只会提出提案值为 v 的提案）</p></blockquote><p>因为一个提案在被一个 Acceptor 接受之前必须要被 Proposer 提出，P2b 满足了 P2a，且满足了 P2。</p><p>想要知道如何去满足 P2b，让我们想想如何证明它是成立的。我们假设编号为 m 且提案值为 v 的提案被选择并且这表示任何 Proposer 提出的编号 n &gt; m 的提案的提案值都是 v。我们能通过对 n 进行归纳使证明更简单，所以我们能证明在这个额外的假设（每个被提出的编号在 m 到 n - 1 之间的提案的值都是 v）下，编号 n 的提案具有值 v。对于编号为 m 的提案被选择，一定有某个由多数派的 Acceptor 组成的集合 <em>C</em> 中每个 Acceptor 都接受了这个提案。将此与归纳假设相结合，编号为 m 的提案被选择的假设意味着：</p><blockquote><p>Every acceptor in C has accepted a proposal with number in m . .(n − 1), and every proposal with number in m . .(n − 1) accepted by any acceptor has value v.</p><p>翻译：集合 C 中的每个 Acceptor 都接受了编号 m 到 n-1 的提案，并且编号为 m 到 n-1 的每个提案的提案值都是 v。</p></blockquote><p>因为任意大多数 Acceptor 集合 <em>S</em> 至少含有一个集合 <em>C</em> 中的成员，我们就可以通过保证维持以下条件 (invariant) 来得出编号为 n 的提案的值是 v：</p><blockquote><p>P2c. For any v and n, if a proposal with value v and number n is issued, then there is a set S consisting of a majority of acceptors such that either (a) no acceptor in S has accepted any proposal numbered less than n, or (b) v is the value of the highest-numbered proposal among all proposals numbered less than n accepted by the acceptors in S.</p><p>翻译：对于任意的 v 和 n，如果一个编号为 n 且提案值为 v 的提案被发布了，那么会有一个由大多数 Acceptor 组成的集合 S 包含以下两种情况：(a) 在集合 S 中没有 Acceptor 接受了编号比 n 小的任何提案。或者 (b) v 是在 S 中被 Acceptors 接受的编号小于 n 的提案中编号最大的提案的值。</p></blockquote><p>因此我们能通过来维持不变量 (invariance) P2c 来满足 P2b。</p><p>要维持 P2c，一个想要提出编号为 n 的提案的 Proposer 必须要知道编号小于 n 之中编号最大的提案，如果存在该提案，则该提案已经或者将要被多数派集合中的每个 Acceptor 接受。想要知道一个已经被接受的提案很简单，但要预测一个将要被接受的提案很难。所以 Proposer 通过向 Acceptor 获取一个承诺来代替预测未来（这里指预测<strong>将要</strong>被多数派集合中的 Acceptor 接受的提案）。换句话说，Proposer 会请求 Acceptor 不要再接受编号小于 n 的提案。这就将我们引入到以下发布提案的算法中。</p><blockquote><ol><li><p>A proposer chooses a new proposal number n and sends a request to each member of some set of acceptors, asking it to respond with:</p><ul><li>(a) A promise never again to accept a proposal numbered less than n, and</li><li>(b) The proposal with the highest number less than n that it has accepted, if any.</li></ul><p>I will call such a request a <strong><em>prepare request</em></strong> with number n.</p></li></ol></blockquote><p>翻译：</p><ol><li>一个 Propoer 选一个新的提案编号 n 向某个 Acceptor 集合中的每个成员发送请求，并获取响应：<ul><li>(a) 一个不会再接受提案编号小于 n 的提案的承诺 (promise)，和</li><li>(b) 如果存在，返回编号小于 n 的提案中编号最大的提案。</li></ul></li></ol><p>我称这个请求为编号 n 的 <strong><em>prepare request</em></strong>。</p><blockquote><ol start="2"><li>If the proposer receives the requested responses from a majority of the acceptors, then it can issue a proposal with number n and value v, where v is the value of the highest-numbered proposal among the responses, or is any value selected by the proposer if the responders reported no proposals.</li></ol></blockquote><p>翻译：</p><ol start="2"><li>如果 Proposer 获取到了大多数 Acceptor 集合的响应，那么它就能发布编号为 n 且提案值为 v的提案，此处 v 是所有相应中获取到的编号最大的提案的值，或者是 Proposer 选择的任意值 (个人认为这里指 prepare request 过程中获取的响应中不含有提案，意味着 Acceptor 未接受任何提案)</li></ol><p>Proposer 通过向一组 Acceptors 发送提议被接受的请求来发布提议 (不需要和响应初始化请求的集合一样)。我们称这个阶段为 <strong><em>accept request</em></strong>。</p><p>这就描述了一个 Proposer 的算法。那 Acceptor 呢？它能接受 Proposer 的两种请求：<strong><em>prepare request</em></strong> 和 <strong><em>accept request</em></strong>。Acceptor 可以在不影响安全的情况下忽略任何请求。所以，当它被允许响应一个请求时，它一定能响应 <strong><em>prepare request</em></strong>。如果没有承诺不接受，也可以响应 <strong><em>accept request</em></strong> 并接受一个提案。换句话说：</p><blockquote><p>P1a. An acceptor can accept a proposal numbered n iff it has not responded to a prepare request having a number greater than n.</p><p>翻译：如果一个 Acceptor 没有响应过编号大于 n 的 prepare request，它就能接受编号为 n 的提议。</p></blockquote><p>可以观察到 P1a 包含了 P1。(解释：P1 中说明 Acceptor 一定会接受它收到的第一个提议，所以 P1a 一定包含了 P1)</p><p>现在我们对 Choosing a Value 有了一个完整的满足安全性 (假设提案编号唯一) 的算法。我们通过一个小优化来得到最终的算法。</p><p>假设一个 Acceptor 收到了一个含有编号 n 的 <strong><em>prepare request</em></strong>，但是它已经响应过编号大于 n 的 <strong><em>prepare request</em></strong> 了，从而承诺不会接受编号为 n 的提案了。那么这个 Acceptor 没有理由响应这个新的请求，因为它不会接受 Proposer 想要提出的编号为 n 的提案。所以我们让 Acceptor 忽略这样的 <strong><em>prepare request</em></strong>，我们也让它忽略已经接受过的提案的 <strong><em>prepare request</em></strong>。</p><p>通过这个优化，一个 Acceptor 只需要记住它已经接受过的编号最大的提案和它响应的最大编号的 <strong><em>prepare request</em></strong> 中的编号。因为无论是否失败，必须要保持 P2c 不变，一个 Acceptor 即使失败重启也必须记住这个信息。请注意，Proposer 可以放弃并且忘记一个提案——只要它永远不会尝试提出另一个编号相同的提案。</p><p>把这些 Proposer 和 Acceptor 的行为放在一起，我们能发现这个算法执行了下面两个阶段：</p><blockquote><p>Phase 1. (a) A proposer selects a proposal number n and sends a prepare request with number n to a majority of acceptors. (b) If an acceptor receives a prepare request with number n greater than that of any prepare request to which it has already responded, then it responds to the request with a promise not to accept any more proposals numbered less than n and with the highest-numbered proposal (if any) that it has accepted.</p></blockquote><p>翻译：阶段一：(a) 一个 Proposer 选择一个提案编号 n 并向一个多数派集合中的 Acceptors 发送 prepare request。(b) 如果一个 Acceptor 收到了一个 prepare request，其中含有的编号 n 大于所有它已经响应过的 prepare request 的编号，那么它会响应这个请求，承诺不会再接受提案编号小于 n 的提案和它接受过的最高编号的提案（如果存在）。</p><blockquote><p>Phase 2. (a) If the proposer receives a response to its prepare requests (numbered n) from a majority of acceptors, then it sends an accept request to each of those acceptors for a proposal numbered n with a value v, where v is the value of the highest-numbered proposal among the responses, or is any value if the responses reported no proposals. (b) If an acceptor receives an accept request for a proposal numbered n, it accepts the proposal unless it has already responded to a prepare request having a number greater than n.</p></blockquote><p>翻译：阶段二：(a) 如果 Proposer 从一个多数派集合的 Acceptors 收到了它发送的 <strong><em>prepare request</em></strong> 的响应 (编号为 n)，那么它会以编号为 n 值为 v 的提案向这个集合中每个 Acceptor 发送一个 <strong><em>accept reqeust</em></strong> ，此处 v 是响应中编号最大的提案的提案值，或者（如果响应中没有提案）一个任意的值。 (b) 如果一个 Acceptor 收到了一个编号为 n 的 <strong><em>accept request</em></strong>，除非他已经响应过持有编号大于 n 的 <strong><em>prepare request</em></strong>，那么它将会接受这个提案。</p><p>一个 Proposer 能发布多个提案，只要每个都遵循这个算法。他能随时放弃协议中的提案（尽管请求和(或者)响应在提案被放弃很久之后才到达，仍然能保持正确性。）如果某个 Proposer 已经发布了编号更高的提案那么放弃提案可能是一个好主意。因此，如果一个 Acceptor 忽略了一个 prepare request 或者 accept request，是因为它已经收到了编号更高的 <strong><em>prepare request</em></strong>，那么这时它应该通知发布这个提案的 Proposer 应该放弃这个提案。这就是不影响正确性的性能优化。</p><h1 id="Learning-a-Chosen-Value"><a href="#Learning-a-Chosen-Value" class="headerlink" title="Learning a Chosen Value"></a>Learning a Chosen Value</h1><p>—— 未完待续 ——</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在一个分布式的系统中，数据的一致性是非常重要的。所以需要用到一致性算法来解决数据一致性的问题。大家都知道 Zookeeper 的 zab 协议就是基于 Paxos 算法的，而我最近正好看了 &lt;strong&gt;Leslie Lamport&lt;/strong&gt; 的 &lt;a href=&quot;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Paxos Made Simple&lt;/a&gt; 这篇论文，以下是我对 Paxos Made Simple 参杂自己的理解之后的翻译 (某些地方有机翻😄)，如果有错误的地方请指正，谢谢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://ryan4cloud.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java 垃圾回收</title>
    <link href="http://ryan4cloud.github.io/jvm-garbage-collection/"/>
    <id>http://ryan4cloud.github.io/jvm-garbage-collection/</id>
    <published>2019-07-22T14:17:08.000Z</published>
    <updated>2019-11-11T11:17:51.760Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Java 回收的文章大同小异，我将我查阅的各种资料整合了一下，取文章中写的好的部分以及自我总结，写出这篇文章。</p><a id="more"></a><h1 id="Java-堆空间的基本结构"><a href="#Java-堆空间的基本结构" class="headerlink" title="Java 堆空间的基本结构"></a>Java 堆空间的基本结构</h1><p><img src="Java_Heap.png" alt="Java 堆空间基本结构"></p><p>上图的 Eden 区和 Survivor From 区、Survivor To 区都属于新生代，Tenured 区属于老年代，在大部分情况，对象首先会在 Eden 区域分配，在第一次新生代垃圾回收（Minor GC）后，如果对象还存活，则该对象会进入 Survivor To 区，并且年龄会加1（第一次从 Eden 到 Survivor 区时年龄是1），当年龄到达一定程度时（默认为 15 岁，但是不一定必须到达 15 岁才会进入老年代区），对象会被晋升到老年代中，对象晋升到老年代的年龄阀值，可以通过设置参数 <code>-XX:MaxTenuringThreshold</code> 来控制。经过这次 GC 之后，Eden 区 和 From 区已经被清空，这时候，From 和 To 会交换他们的角色，也就是说此时新的 Survivor To 区就是 GC 之前的 Survivor From 区，新的 Survivor From 区就是 GC 之前的 Survivor To 区。Minor GC 会一直重复这个过程，直到 Survivor To 区被填满，To 区被填满之后，会将所有对象移动到老年代中。</p><p><strong>堆内存常见的分配策略：</strong></p><ul><li>对象优先分配在 Eden 区</li><li>大对象直接进入老年代</li><li>长期存活的对象将进入老年代</li></ul><h1 id="Java-垃圾收集算法"><a href="#Java-垃圾收集算法" class="headerlink" title="Java 垃圾收集算法"></a>Java 垃圾收集算法</h1><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记 - 清除算法"></a>标记 - 清除算法</h2><p>该算法首先标记出需要回收的对象，在标记完成后统一回收所有被标记的对象。该算法是垃圾回收最基础的算法，后续的算法都是对其不足进行改进得到的。它会带来两个很明显的问题：</p><ul><li><strong>效率问题</strong></li><li><strong>空间浪费问题（标记清除后会产生大量不连续的碎片，导致大量空间无法使用）</strong></li></ul><p><img src="标记 - 清除.png" alt="标记 - 清除"></p><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>将堆内存分为大小相同的两块，每次只使用一块。这块内存使用完后，将还存活的对象复制到另一块内存中，然后把使用的空间一次全部清理，这样每次回收都只对内存的一半进行回收。</p><p>这样也会有一定的问题，就好比我们买了200平的房子，却只能使用100平，这就造成了使用空间的缩小。</p><p><img src="复制算法.png" alt="复制算法"></p><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记 - 整理算法"></a>标记 - 整理算法</h2><p>针对老年代特点特出的一种标记算法，过程与“标记 - 清除”算法一样，但是标记之后不是直接对可回收对象进行回收，而是让所有存活对象向一端移动，然后清理掉存活对象端边界以外的内存。</p><p><img src="标记 - 整理算法.png" alt="标记 - 整理算法"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><blockquote><p>问题：HotSpot 为什么要分为新生代和老年代？</p></blockquote><p>根据对象存活周期的不同将内存分为几块（一般将 Java 堆分为新生代和老年代），这样就可以根据各年代的特点来选择合适的垃圾收集算法。</p><p>比如在新生代中，每次垃圾收集都会有大量的对象死去，所以我们可以选择复制算法，只需要付出少量对象的复制成本则可以完成每次垃圾收集。而老年代中对象的存活几率都是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择 “标记 - 清除” 或者 “标记 - 整理” 算法进行垃圾收集。</p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p>图片来源：<a href="https://yemengying.com/2015/11/12/读书笔记-深入理解Java虚拟机1/" target="_blank" rel="noopener">读书笔记—深入理解Java虚拟机1</a></p><p><img src="垃圾收集器.png" alt="垃圾收集算法"></p><h2 id="新生代串行收集器-Serial"><a href="#新生代串行收集器-Serial" class="headerlink" title="新生代串行收集器 - Serial"></a>新生代串行收集器 - Serial</h2><p>串行收集器主要有两个特点：1、使用单线程进行垃圾回收；2、独占式的垃圾回收。</p><p>在串行收集器进行垃圾回收时，Java 应用程序中的线程都需要暂停，等待垃圾回收完成，这样就会造成较差的用户体验。但是串行收集器仍然是一个成熟的、经过长时间生产环境考验的极为高效的收集器。</p><p>新生代串行收集器采用<strong>复制算法</strong>，实现相对简单，并且没有线程切换的开销。在 HotSpot 虚拟机中，使用 <code>-XX:+UseSerialGC</code> 参数可以指定新生代串行收集器和老年代串行收集器。当 JVM 在 Client 模式下运行时，默认使用新生代串行收集器。一次新生代串行收集器的工作输出日志类似于下（使用 <code>-XX:PrintGCDetails</code> 开关）：</p><pre><code>[GC [DefNew: 3468K-&gt;150K(9216K), 0.0028638 secs][Tenured:  1562K-&gt;1712K(10240K), 0.0084220 secs] 3468K-&gt;1712K(19456K),  [Perm : 377K-&gt;377K(12288K)],  0.0113816 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]</code></pre><p>它显示了垃圾回收之前新生代的占用内存和垃圾回收后的占用内存，以及垃圾回收的时间。</p><h2 id="新生代并行收集器-ParNew"><a href="#新生代并行收集器-ParNew" class="headerlink" title="新生代并行收集器 - ParNew"></a>新生代并行收集器 - ParNew</h2><p>它是新生代串行收集器的多线程版本，垃圾回收时也会暂停 Java 应用程序的线程。它除了使用多线程处理垃圾回收外，其他的功能与 Serial 收集器一样。在单 CPU 的环境下，ParNew 收集器的表现不会比 Serial 更优秀。</p><h2 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h2><p>Parallel Scavenge 收集器也是使用复制算法的多线程垃圾收集器，它看上去几乎和 ParNer 一模一样。<strong>但是 Parallel Scavenge 收集器的关注点是吞吐量（高效率的利用 CPU），吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。而 CMS 等垃圾收集器关注的更多的是用户线程的停顿时间，提高用户体验。</strong>Parallel Scavenge 收集器提供了很多参数供用户找到最适合的停顿时间或最大的吞吐量。</p><pre><code>-XX:UseParallelGC  // 使用 Parrallel 收集器（新生代），老年代使用串行收集器-XX:UseParallelOldGC  // 使用 Parallel 收集器，老年代并行</code></pre><p><strong>此收集器中，新生代采用复制算法，老年代采用“标记-整理”算法</strong></p><h2 id="老年代串行收集器-Serial-Old"><a href="#老年代串行收集器-Serial-Old" class="headerlink" title="老年代串行收集器 - Serial Old"></a>老年代串行收集器 - Serial Old</h2><p>老年代串行收集器是 Serial 收集器的老年代版本，同样是单线程，但是它使用<strong>标记-整理算法</strong>。他也是一个串行的、独占式的垃圾回收器。由于老年代垃圾回收通常会使用比新生代垃圾回收更长的时间，因此，在堆空间较大的应用程序中，一旦老年代串行收集器启动，应用程序很可能会因此停顿几秒甚至更长时间。但是Serial Old 收集器可以和多种新生代收集器配合使用，而且可以作为 CMS 收集器的备用收集器。可以通过参数 <code>-XX:+UseSerialGC</code> 将新生代和老年代都使用串行收集器，使用 <code>-XX:UseParallelOldGC</code> 设置新生代和老年代都使用并行收集器。</p><h2 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h2><p><strong>Parallel Scavenge 收集器的老年代版本。</strong>该收集器采用”标记-整理“算法。注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 和 Parallel Old 收集器。</p><h2 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h2><p><strong>CMS (Concurrent Mark Sweep)</strong> 收集器是一种以<strong>获取最短回收停顿时间</strong>为目标的收集器，它非常符合网站或者 B/S 系统的服务端上的 Java 应用等重视响应速度的场景。从名字上可以看出，它是基于 “标记-清除”算法实现的。</p><p>CMS 收集器的整个工作流程为以下 4 个步骤：</p><ul><li><strong>初始标记</strong>：暂停所有其他线程，标记 GC Roots 能直接关联的对象，速度很快。</li><li><strong>并发标记</strong>：同时开启 GC 线程和用户线程，用闭包结构去记录可达对象。但是这个阶段结束后，并不能保证这个闭包包含所有的可达对象，因为用户线程可能同时会更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个阶段就是 GC Roots Tracing 过程，记录发生引用更新的地方。</li><li><strong>重新标记</strong>：修正并发标记期间发生引用变化的那一部分对象。这一阶段的停顿时间会比初始标记阶段的时间稍长，但远远比并发标记的时间短。</li><li><strong>并发清除</strong>：开启用户线程，同时 GC 线程对未标记的区域进行清除。</li></ul><p><img src="cms_collector.png" alt="CMS 垃圾收集器"></p><p>优点：并发，低停顿</p><p>缺点：</p><p>1、当次收集无法处理并发标记时用户线程产生的新的垃圾。</p><p>2、因为使用 “标记-清除” 算法，所以会产生很多内存空间碎片，导致当前堆中老年代空间有剩余，但是无法找到足够大的连续空间来分配当前对象，这样会提前触发一次 Full GC。</p><h3 id="CMS-垃圾收集器的优化"><a href="#CMS-垃圾收集器的优化" class="headerlink" title="CMS 垃圾收集器的优化"></a>CMS 垃圾收集器的优化</h3><p><code>-XX:ParallelCMSThreads</code>：手动设置 CMS 的线程数量。CMS 默认启动的线程是 <code>(ParallelGCThreads+3)/4)</code> ，其中 ParallelGCThreads 是新生代并行收集器的线程数量。</p><p><code>-XX:CMSInitiatingOccupancyFraction</code>：CMS 收集器进行垃圾回收的阀值（当前堆内存的使用率阀值），默认为 68，也就是说当堆内存的使用率达到 68% 时，会执行一次 CMS 回收。<strong>如果应用程序内内存增长很快，在 CMS 执行过程中，已经出现了内存不足的情况（用户线程会并行执行），就会导致 CMS 回收失败，JVM 将启动老年代串行收集器进行垃圾回收。这样会造成线程的停顿，影响用户体验，这时可以将 <code>-XX:CMSInitiatingOccupancyFraction</code> 调小。如果应用程序的内存增长缓慢的话，可以适当调大这个阀值，可以有效的降低 CMS 的触发频率</strong></p><p><code>-XX:+UseCMSCompactAtFullCollection</code>：因为 CMS 采用 “标记-清除” 算法，会造成大量内存碎片，这样会导致无法分配较大的对象，而触发 Full GC，这很影响系统性能。<strong>设置此参数可以使 CMS 在垃圾收集完成后，进行一次内存碎片整理（内存碎片整理不是并发进行的）。可以使用 <code>-XX:CMSFullGCsBeforeCompaction</code> 参数来设定进行多少次 CMS 回收后，进行一次内存压缩。</strong></p><h2 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h2><p><strong>G1 GC 是 JDK 7 的新特性之一</strong>，它的目标是作为一款服务器的垃圾收集器。所以它在吞吐量和停顿控制上，都要优于 CMS。</p><blockquote><p>以下引用自 <a href="http://wuzhangyang.com/2019/01/17/java-garbage-collector/#" target="_blank" rel="noopener">JVM 七种垃圾收集器</a></p></blockquote><p>G1 (Garbage First) 的各代存储地址是不连续的，每一代都使用了 n 个不连续的大小相同的 region， 每个 region 占有一块连续的虚拟内存地址。</p><p><img src="g1_region.png" alt="G1 Region"></p><p>G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><h3 id="避免全堆扫描"><a href="#避免全堆扫描" class="headerlink" title="避免全堆扫描"></a>避免全堆扫描</h3><p>多个 Region 之前的对象可能会有引用关系，在做可达性分析时需要扫描整个堆才能保证准确性，这显然降低了 GC 效率。</p><p>为避免全堆扫描，虚拟机为 G1 中每个 Region 维护了一个与之对应的 Remembered Set。虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier 暂时中断写操作，检查 Reference 引用的对象是否处于不同的 Region 之中（在分代的例子中就是检查是否老年代中的对象引用了新生代中的对象），如果是，便通过 CardTable <strong>把相关引用信息记录到被引用对象所属的Region的 Remembered Set 之中</strong>。当进行内存回收时，在GC根节点的枚举范围中加入 Remembered Set 即可保证不对全堆扫描也不会有遗漏。</p><h3 id="G1-的运作步骤"><a href="#G1-的运作步骤" class="headerlink" title="G1 的运作步骤"></a>G1 的运作步骤</h3><ul><li>初始标记（Initial Marking）</li><li>并发标记（Concurrent Marking）</li><li>最终标记（Final Marking）</li><li>筛选回收（Live Data Counting and Evacuation）</li></ul><p><img src="g1_collector.png" alt="G1 Collector"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul><blockquote><p>以上引用自 <a href="http://wuzhangyang.com/2019/01/17/java-garbage-collector/#" target="_blank" rel="noopener">JVM 七种垃圾收集器</a></p></blockquote><h1 id="GC-相关参数设置"><a href="#GC-相关参数设置" class="headerlink" title="GC 相关参数设置"></a>GC 相关参数设置</h1><p>可以适当使用这些参数对 GC 进行调优。</p><p>1、输出 GC 日志</p><pre><code>-XX:+PrintGCDetails        // 输出 GC 日志-XX:+DisableExplicitGC        // 禁用显示 GC</code></pre><p>2、串行 GC 相关设置</p><pre><code>-XX:+UseSerialGC        // 指定新生代和老年代都使用串行收集器（Client模式默认值）-XX:+SurvivorRatio        // 设置 eden 区大小和 survivor 区大小的比例，默认为8-XX:+PretenureSizeThreshold        // 设置大对象直接进入老年代的阈值。当对象的大小超过这个值时，将直接在老年代分配。-XX:MaxTenuringThreshold        // 设置对象进入老年代的年龄的最大值。每一次 Minor GC 后，对象年龄就加 1。任何大于这个年龄的对象，一定会进入老年代。</code></pre><p>3、并行 GC 参数设置</p><pre><code>-XX:+UseParNewGC        // 使用 ParNew + Serial Old 组合进行垃圾回收（不推荐）-XX:+UseParallelGC        // 使用 Parallel Scavenge 和 Serial Old 组合进行回收-XX:+UseParallelOldGC        // Parallel Scavenge + Parallel Old 收集组合进行垃圾回收-XX:ParallelGCThreads        //并行收集器工作时的线程数量，在 CPU 数量小于8个时，ParallelGCThreads 等于 CPU 数量；如果大于8个，ParalellGCThreads 的值等于 3+[5*CPU_Count]/8]；-XX:+MaxGCPauseMills        // 设置最大垃圾收集停顿时间-XX:+GCTimeRatio        // 设置吞吐量大小（0 - 100之间的整数）垃圾收集时间不会超过 1/(1+n) -XX:+UseAdaptiveSizePolicy        // 打开自适应 GC 策略</code></pre><p>4、CMS 收集器相关参数设置</p><pre><code>-XX:+UseConcMarkSweepGC        // 新生代使用并行收集器，老年代使用 CMS + 串行收集器-XX:ParallelCMSThreads        // 手动设定 CMS 的线程数量-XX:CMSInitiatingOccupancyFraction        // CMS 回收触发阀值（当前堆内存的使用率）默认为68（68%）-XX:+UseCMSCompactAtFullCollection        // CMS 垃圾回收完成后，进行一次内存碎片整理-XX:CMSFullGCsBeforeCompaction        // 多少次 CMS 垃圾回收后，进行一次内存整理（压缩）-XX:+CMSClassUnloadingEnabled        // 允许对类元数据进行回收-XX:+CMSParallelRemarkEndable        // 启用并行重标记-XX:CMSInitatingPermOccupancyFraction        // 当永久区占用率达到这一百分比后，启动 CMS 回收（需要开启 -                                                                                    XX:+CMSClassUnloadingEnabled）-XX:UseCMSInitatingOccupancyOnly        // 只有到达阀值的时候，才进行 CMS 回收-XX:+CMSIncrementalMode        // 使用增量模式，适用于单 CPU</code></pre><p>5、G1 收集器相关参数设置参数</p><pre><code>-XX:+UseG1GC        // 使用 G1 收集器-XX:+UnlockExperimentalVMOptions        // 允许使用实验性参数-XX:+MaxGCPauseMills        // 设置垃圾收集最大停顿时间-XX:+GCPauseIntervalMills        // 设置停顿间隔时间</code></pre><p>基于对 JVM 垃圾回收器的工作原理以及程序设计的了解，希望大家都能找出适合自己的最优优化方案。</p><h1 id="对于几个问题的解答"><a href="#对于几个问题的解答" class="headerlink" title="对于几个问题的解答"></a>对于几个问题的解答</h1><h2 id="对象死亡的判断"><a href="#对象死亡的判断" class="headerlink" title="对象死亡的判断"></a>对象死亡的判断</h2><p>堆中几乎存放着所有的实例对象，所以要了解垃圾回收器，首先要学会判断哪些对象已经死亡（不能再使用）。</p><p>JVM 有两种方法判断对象是否死亡：</p><ul><li><strong>引用计数法</strong></li></ul><p>给对象添加一个引用计数器，如果有一个地方引用它，计数器就加1，引用失效时，计数器减1。计数器值为0的对象就是不能再使用的。</p><p>这种方法实现简单，效率高，但是目前主流的虚拟机没有再使用这种方法了，因为它无法解决对象之间相互引用的的问题。</p><ul><li><strong>可达性分析法</strong></li></ul><p>此算法的基本思想就是通过一系列的称为 “GC Roots” 的对象作为起点，从这些节点开始向下搜索，借点娑走过的路径叫做引用链，当一个对象到 GC Roots 没有任何引用链相连的话，就说明此对象是不可用的。</p><h2 id="Minor-GC-和-Full-GC-的区别"><a href="#Minor-GC-和-Full-GC-的区别" class="headerlink" title="Minor GC 和 Full GC 的区别"></a>Minor GC 和 Full GC 的区别</h2><ul><li>新生代 GC（Minor GC）：发生在新生代的垃圾收集操作，Minor GC 非常频繁，且一般速度也比较快。</li><li>Major GC / Full GC：发生在老年代的 GC，速度一般比 Minor GC 慢10倍以上。</li></ul><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>Java 四种引用类型 ～ 强引用，软引用，弱引用，虚引用（虚引用与软引用和弱引用的区别，使用软引用的好处）</li><li>如何判断一个常量是废弃常量</li><li>如何判断一个类是无用的类</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>来源于 <a href="http://wuzhangyang.com/2019/01/17/java-garbage-collector/" target="_blank" rel="noopener">JVM 七种垃圾收集器</a></p><table><thead><tr><th>收集器</th><th>串行、并行or并发</th><th>新生代/老年代</th><th>算法</th><th>目标</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>串行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>单CPU环境下的Client模式</td></tr><tr><td><strong>Serial Old</strong></td><td>串行</td><td>老年代</td><td>标记-整理</td><td>响应速度优先</td><td>单CPU环境下的Client模式、CMS的后备预案</td></tr><tr><td><strong>ParNew</strong></td><td>并行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>多CPU环境时在Server模式下与CMS配合</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>并行</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td></tr><tr><td><strong>Parallel Old</strong></td><td>并行</td><td>老年代</td><td>标记-整理</td><td>吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td></tr><tr><td><strong>CMS</strong></td><td>并发</td><td>老年代</td><td>标记-清除</td><td>响应速度优先</td><td>集中在互联网站或B/S系统服务端上的Java应用</td></tr><tr><td><strong>G1</strong></td><td>并发</td><td>both</td><td>标记-整理+复制算法</td><td>响应速度优先</td><td>面向服务端应用</td></tr></tbody></table><p>[参考链接]</p><ul><li><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html" target="_blank" rel="noopener">Java Garbage Collection Basics</a></li><li><a href="https://www.baeldung.com/jvm-garbage-collectors" target="_blank" rel="noopener">JVM Garbage Collectors</a></li><li><a href="https://howtodoinjava.com/java/garbage-collection/all-garbage-collection-algorithms/" target="_blank" rel="noopener">Java Garbage Collection Algorithms</a></li><li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/jvm/JVM垃圾回收.md" target="_blank" rel="noopener">SnailClimb JavaGuide - Java垃圾回收</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html" target="_blank" rel="noopener">JVM 垃圾回收器工作原理及使用实例介绍</a></li><li><a href="http://wuzhangyang.com/2019/01/17/java-garbage-collector/" target="_blank" rel="noopener">JVM 七种垃圾收集器</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Java 回收的文章大同小异，我将我查阅的各种资料整合了一下，取文章中写的好的部分以及自我总结，写出这篇文章。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ryan4cloud.github.io/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://ryan4cloud.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建个人博客 - 使用 GitHub Page</title>
    <link href="http://ryan4cloud.github.io/build-hexo-blog/"/>
    <id>http://ryan4cloud.github.io/build-hexo-blog/</id>
    <published>2019-07-13T12:01:55.000Z</published>
    <updated>2019-11-11T11:17:14.580Z</updated>
    
    <content type="html"><![CDATA[<p>现在国内已经有很多家做博客的平台了，比如说 CSDN，掘金但是有些博客平台都有限制或者 UI 并不好看，所以很多技术开发者自己搭建博客发布文章，不依赖于任何平台。GitHub 则提供了平台能让网站挂在他的 GitHub Page 下，这就省去了一大笔服务器的开销，很多人都在使用。所以我写这篇文章记录搭建博客的流程。</p><a id="more"></a><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h3><p>百度或者 google “node” ，进入官网，选择自己系统合适的安装包，下载，版本无要求。</p><p>还是留个下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node 下载</a></p><p>安装好之后进入 cmd 或者终端输入 <code>npm -v</code>，会打印出你安装的当前版本。</p><p><img src="hexo1.png" alt="image-20190713182925917"></p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>进入 Windows 的 cmd 或者 macOS/Linux 的终端，执行以下命令安装 Hexo</p><p><code>npm install -g hexo-cli</code></p><p>安装好之后，执行  <code>hexo -v</code> 会打印出各个组件的版本号。</p><p><img src="hexo2.png" alt="image-20190713183205874"></p><p>安装完成后，找一个空文件夹（专门存放 hexo 生成的文件），进入该文件夹，执行以下命令：</p><pre><code>hexo init    -- 在当前路径下初始化，如果想指定路径请使用 `hexo init 指定路径`npm install  -- 安装依赖组件</code></pre><p>完成后在当前文件夹下会有以下文件：</p><p><img src="hexo3.png" alt="image-20190713183725037"></p><p>其中 <code>_config.yml</code> 为主要配置文件，至此，Hexo 安装完毕，执行 <code>hexo s</code> 命令启动一个本地服务器，然后在浏览器中访问 <code>localhost:4000</code> 就可以预览到默认的页面效果了。</p><h2 id="创建-GitHub-Page"><a href="#创建-GitHub-Page" class="headerlink" title="创建 GitHub Page"></a>创建 GitHub Page</h2><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h3><p>首先创建一个 GitHub 账号，然后进入你的账户主页，点击 <code>Repositories</code> </p><p><img src="hexo4.png" alt="image-20190713193954933"></p><p>新建 Repository：</p><p><img src="hexo5.png" alt="image-20190713194034624"></p><p>创建的 Repository 的名称格式必须为 <code>GitHub账户名称.github.io</code> ，一定要这种格式，不然。。你可以试试好不好使。</p><p><img src="hexo6.png" alt="image-20190713194213697"></p><p>我这里警告是因为我已经创建了一个名字是 <code>keanu96.github.io</code> 的仓库了。</p><p>到这里，这个 GitHub 仓库就已经创建好了。</p><h3 id="配置-Hexo-提交到-GitHub"><a href="#配置-Hexo-提交到-GitHub" class="headerlink" title="配置 Hexo 提交到 GitHub"></a>配置 Hexo 提交到 GitHub</h3><p>打开安装博客的根目录，找到其中的 <code>_config.yml</code> 文件打开。</p><p>找到一下配置并修改成自己对应的配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//github.com/keanu96/keanu96.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 repo 中的链接改为刚刚创建好的 GitHub 仓库的链接。</p><p><img src="hexo7.png" alt="image-20190713194721553"></p><p>设置为这个即可。</p><p>然后安装 Hexo 的部署插件 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p><pre><code>npm install hexo-deployer-git --save</code></pre><p>然后打开 cmd 或者终端，进入到博客的根目录下，执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> ，就会发现一大堆日志打印出来，如果没有报错，就说明应提交到 GitHub 上了。在浏览器中打开 <code>https://GitHub用户名.github.io</code> 就能看到你的博客的初始页面了。</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>以上只是将博客挂在 GitHub Page 中，并没有做过多配置，如果想更换主题的话，推荐我使用的主题，简单易用：<a href="https://github.com/theme-next/hexo-theme-next.git" target="_blank" rel="noopener">hexo-theme-next</a></p><p>稍后将我的博客及主题配置上传上来提供下载参照。</p><p><a href="/download/_config.yml">博客根目录配置文件</a></p><p><a href="/download/_config_theme.yml">主题配置文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在国内已经有很多家做博客的平台了，比如说 CSDN，掘金但是有些博客平台都有限制或者 UI 并不好看，所以很多技术开发者自己搭建博客发布文章，不依赖于任何平台。GitHub 则提供了平台能让网站挂在他的 GitHub Page 下，这就省去了一大笔服务器的开销，很多人都在使用。所以我写这篇文章记录搭建博客的流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://ryan4cloud.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo 博客搭建" scheme="http://ryan4cloud.github.io/tags/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习 - 持久化机制</title>
    <link href="http://ryan4cloud.github.io/redis-persistence/"/>
    <id>http://ryan4cloud.github.io/redis-persistence/</id>
    <published>2019-07-09T13:27:26.000Z</published>
    <updated>2019-11-11T11:18:04.910Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 是一个基于内存的数据库，数据都是存储在内存当中，这样当服务器宕机或者程序异常退出时，会有大量数据丢失，所以为了避免数据丢失，需要将数据持久化到到硬盘中，Redis 的持久化就是将内存中的数据写入到磁盘中进行存储，这样 Redis 在下次重启时可以利用持久化文件来进行数据恢复。</p><a id="more"></a><p>Redis 提供了两种数据持久化方案：</p><ul><li>数据快照：<strong>Redis RDB</strong></li><li>命令日志：<strong>Redis AOF</strong></li></ul><p>Redis 中允许两种方案结合使用，也允许两者同时关闭。</p><h1 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h1><p>RDB持久化是 Redis 默认的持久化方式，它是将<strong>当前内存</strong>中<strong>某个时间点</strong>的数据生成快照存储在硬盘上，存储的文件后缀为 rdb，Redis 重启时，可以读取快照文件来恢复数据。rdb 是一个经过压缩的<strong>二进制文件</strong>，采用 RDB 持久化时服务器只会保存一个 rdb 文件，这样使维护更加简单。</p><p>每次进行 RDB 持久化时，Redis 都是在某个时间点将数据写入一个临时文件（全量），当持久化结束后，用这个临时文件替换上次持久化的文件。</p><h2 id="RDB-持久化流程"><a href="#RDB-持久化流程" class="headerlink" title="RDB 持久化流程"></a>RDB 持久化流程</h2><p>RDB 持久化的触发分为<strong>手动触发</strong>和<strong>自动触发</strong>两种形式。</p><h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>在 Redis 中，save 和 bgsave 命令都可以生成 rdb 文件。</p><ul><li>save : 会阻塞 Redis 服务器进程，直到 rdb 文件创建完毕为止，在 Redis 服务器阻塞期间，服务器不能处理任何命令请求</li><li>bgsave : 会 fork 一个子进程来创建 rdb 文件，父进程可以继续处理命令请求（fork 子进程期间，服务器也处于阻塞状态）</li></ul><p>bgsave 命令执行流程如下：</p><p><center><img style="border-radius: 0.5125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="redis1.png"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block; color: #999; padding: 2px;">Redis bgsave 执行流程</div><center></center></center></p><ul><li>执行 bgsave 命令，父进程会判断当前是否存在正在执行的子进程，如 RDB/AOF 子进程，如果存在，则 bgave 命令直接返回</li><li>父进程执行 fork 操作创建子进程，fork 操作过程中父进程会阻塞，通过 <code>info stats</code> 命令 查看 <code>latest_fork_usec</code> 选项，可以获取最近一个 fork 操作的耗时，单位为毫秒</li><li>父进程 fork 完成后，bgsave 命令返回 Background saving started 信息并不会阻塞父进程，父进程可以继续处理其他命令请求</li><li>子进程创建 rdb 文件，根据父进程的内存生成临时快照文件，完成后对原有文件进行原子替换</li><li>进程发送信号给父进程表示完成，父进程更新统计信息</li></ul><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p>自动触发最常见的情况是在配置文件中通过 <code>save m n</code>，指定当 m 秒内发生 n 次变化时，会触发 RDB 持久化，默认采用 bgsave 策略。</p><pre><code># 快照的文件名dbfilename dump.rdb# 存放快照的目录dir ./# 在进行快照备份时,是否进行压缩。# yes：压缩，但是需要一些cpu的消耗。# no：不压缩，需要更多的磁盘空间。rdbcompression yes# 是否开启RDB文件的校验，在写入文件和读取文件时都起作用,关闭时，写入和启动文件有大约10%的性能提升，但无法检查RDB的损坏情况rdbchecksum yes#自动触发#900秒后且至少1个key发生变化时创建快照  save 900 1  #300秒后且至少10个key发生变化时创建快照  save 300 10  #60秒后且至少10000个key发生变化时创建快照  save 60 10000 </code></pre><h2 id="RDB-持久化优缺点"><a href="#RDB-持久化优缺点" class="headerlink" title="RDB 持久化优缺点"></a>RDB 持久化优缺点</h2><h3 id="RDB-优势"><a href="#RDB-优势" class="headerlink" title="RDB 优势"></a>RDB 优势</h3><blockquote><ul><li>RDB is a very compact single-file point-in-time representation of your Redis data. RDB files are perfect for backups. For instance you may want to archive your RDB files every hour for the latest 24 hours, and to save an RDB snapshot every day for 30 days. This allows you to easily restore different versions of the data set in case of disasters.</li><li>RDB is very good for disaster recovery, being a single compact file can be transferred to far data centers, or on Amazon S3 (possibly encrypted).</li><li>RDB maximizes Redis performances since the only work the Redis parent process needs to do in order to persist is forking a child that will do all the rest. The parent instance will never perform disk I/O or alike.</li><li>RDB allows faster restarts with big datasets compared to AOF.</li></ul></blockquote><p>这是在 Redis 官网中对于 RDB 持久化优点的一段描述，RDB文件是一个非常紧凑的单文件，描述了某个时间点的数据，所以它非常适用于备份。并且它很适用于灾难恢复，因为它能存储不同版本的数据集，能够让你在发生灾难时回复不同版本的数据集。</p><h3 id="RDB-缺点"><a href="#RDB-缺点" class="headerlink" title="RDB 缺点"></a>RDB 缺点</h3><blockquote><ul><li>RDB is NOT good if you need to minimize the chance of data loss in case Redis stops working (for example after a power outage). You can configure different <em>save points</em> where an RDB is produced (for instance after at least five minutes and 100 writes against the data set, but you can have multiple save points). However you’ll usually create an RDB snapshot every five minutes or more, so in case of Redis stopping working without a correct shutdown for any reason you should be prepared to lose the latest minutes of data.</li><li>RDB needs to fork() often in order to persist on disk using a child process. Fork() can be time consuming if the dataset is big, and may result in Redis to stop serving clients for some millisecond or even for one second if the dataset is very big and the CPU performance not great. AOF also needs to fork() but you can tune how often you want to rewrite your logs without any trade-off on durability.</li></ul></blockquote><p>官网已经声明了，如果你想最小化数据丢失，RBD 不是一个好的选择，因为 RDB 是在一定间隔时间做一次备份，如果 Redis 意外宕机，就会丢失掉最后一次备份之后的所有数据。</p><p>RDB 默认采用 bgsave 来进行持久化，每次 bgsave 每次运行都要调用 fork() 创建一个子进程，而如果内存中的数据集非常大，fork() 会因为要为子进程产生一份虚拟空间表而花费较长的时间；如果此时客户端请求数量非常大的话，会导致较多的写时拷贝操作；在 RDB 持久化操作过程中，每一个数据都会导致 write() 系统调用，CPU 资源很紧张。因此，如果在一台物理机上部署多个 redis，应该避免同时持久化操作。</p><p><strong>那如何知道 BGSAVE 占用了多少内存？</strong>子进程在结束之前，读取了自身私有脏数据 Private_Dirty 的大小，这样做是为了让用户看到 redis 的持久化进程所占用了有多少的空间。在父进程 fork 产生子进程过后，父子进程虽然有不同的虚拟空间，但物理空间上是共存的，直至父进程或者子进程修改内存数据为止，所以脏数据 Private_Dirty 可以近似的认为是子进程，即持久化进程占用的空间。</p><h1 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h1><p>AOF 即 Append-only file 的缩写，它将 “操作 + 数据” 以格式化指令的方式追加到操作日志文件的尾部。也就是说，Redis 是将所有服务器中执行的命令追加到 AOF 文件中，而在 append 操作返回之后，才进行实际的数据变更。</p><h2 id="AOF-配置"><a href="#AOF-配置" class="headerlink" title="AOF 配置"></a>AOF 配置</h2><p>Redis 默认是没有开启 AOF 持久化的，需要修改 redis.conf 来开启，配置如下：</p><pre><code>##此选项为aof功能的开关，默认为“no”，可以通过“yes”来开启aof功能  ##只有在“yes”下，aof重写/文件同步等特性才会生效  appendonly yes  ##指定aof文件名称  appendfilename appendonly.aof  ##指定aof操作中文件同步策略，有三个合法值：always everysec no,默认为everysec  appendfsync everysec  ##在aof-rewrite期间，appendfsync是否暂缓文件同步，&quot;no&quot;表示“不暂缓”，“yes”表示“暂缓”，默认为“no”  no-appendfsync-on-rewrite no  ##aof文件rewrite触发的最小文件尺寸(mb,gb),只有大于此aof文件大于此尺寸是才会触发rewrite，默认“64mb”，建议“512mb”  auto-aof-rewrite-min-size 64mb  ##相对于“上一次”rewrite，本次rewrite触发时aof文件应该增长的百分比。  ##每一次rewrite之后，redis都会记录下此时“新aof”文件的大小(例如A)，那么当aof文件增长到A*(1 + p)之后  ##触发下一次rewrite，每一次aof记录的添加，都会检测当前aof文件的尺寸。auto-aof-rewrite-percentage 100</code></pre><h2 id="AOF-文件恢复"><a href="#AOF-文件恢复" class="headerlink" title="AOF 文件恢复"></a>AOF 文件恢复</h2><h2 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h2><h2 id="AOF-优缺点"><a href="#AOF-优缺点" class="headerlink" title="AOF 优缺点"></a>AOF 优缺点</h2><blockquote><p>参考链接：<br><br><a href="https://redis.io/topics/persistence" target="_blank" rel="noopener">Redis persistence</a><br><br><a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html" target="_blank" rel="noopener">Redis persistence demystified</a><br><br><a href="https://www.cnblogs.com/kismetv/p/9137897.html" target="_blank" rel="noopener">深入学习Redis（2）：持久化</a><br><br><a href="https://www.cnblogs.com/ysocean/p/9114268.html" target="_blank" rel="noopener">Redis详解（六）—— RDB 持久化</a><br><br><a href="https://yq.aliyun.com/articles/617663" target="_blank" rel="noopener">Redis详解（七）—— AOF 持久化</a><br></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 是一个基于内存的数据库，数据都是存储在内存当中，这样当服务器宕机或者程序异常退出时，会有大量数据丢失，所以为了避免数据丢失，需要将数据持久化到到硬盘中，Redis 的持久化就是将内存中的数据写入到磁盘中进行存储，这样 Redis 在下次重启时可以利用持久化文件来进行数据恢复。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://ryan4cloud.github.io/categories/Redis/"/>
    
    
      <category term="Redis 持久化" scheme="http://ryan4cloud.github.io/tags/Redis-%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>104.Maximum Depth of Binary Tree</title>
    <link href="http://ryan4cloud.github.io/maximum-depth-of-binary-tree/"/>
    <id>http://ryan4cloud.github.io/maximum-depth-of-binary-tree/</id>
    <published>2019-05-30T08:06:54.000Z</published>
    <updated>2019-11-11T11:18:02.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Title</strong>：104 - Maximum Depth of Binary Tree - Easy</p></blockquote><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>解题思路：如果给我们的二叉树为 <code>null</code>，则返回 <code>0</code> 。如果不为空，则二叉树的深度至少为 <code>1</code>，再将每个节点的左子节点和又子节点进行递归，查询出深度最大的一条路径。</p><p>具体代码如下：（<strong>题目过于简单</strong>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;：104 - Maximum Depth of Binary Tree - Easy&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://ryan4cloud.github.io/categories/Leetcode/"/>
    
      <category term="Easy" scheme="http://ryan4cloud.github.io/categories/Leetcode/Easy/"/>
    
    
      <category term="Algorithm" scheme="http://ryan4cloud.github.io/tags/Algorithm/"/>
    
      <category term="Binary Tree" scheme="http://ryan4cloud.github.io/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 源码分析</title>
    <link href="http://ryan4cloud.github.io/Spring-MVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://ryan4cloud.github.io/Spring-MVC-源码分析/</id>
    <published>2019-05-29T12:50:02.000Z</published>
    <updated>2019-11-11T11:17:13.410Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>前两天看了 Spring IOC 容器的源码，了解了容器是怎么初始化，Spring Beans 的生命周期，以及初始化时很多设计模式的使用。这篇文章将带大家阅读 Spring MVC 处理请求的流程源码（有理解不当之处请谅解），在阅读 Spring MVC 源码之前，建议读者先阅读这一篇文章 <a href="[https://rayyq.github.io/2019/05/27/Spring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/](https://rayyq.github.io/2019/05/27/Spring-IOC-容器源码分析/">Spring IOC 容器源码分析</a>)，这将有助于读者理解 Spring MVC 中部分源码。</p><blockquote><p>本文采用的源码版本为 <code>5.0.x.RELEASE</code></p></blockquote><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Spring MVC 是基于 <code>Servlet</code> 开发的一个 Web 框架，其核心为 <code>DispatcherServlet</code>，我们先来看一下它的继承结构。</p><p> <center><img src="1.png"></center><br>很明显，DispatcherServlet 中一定封装了 <code>Servlet</code> 的方法，这也能说明为什么 Spring MVC 是一个基于 <code>Sevlet</code>开发的 Web MVC 框架了。</p><h3 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h3><p>在往下分析之前，我们先了解一下 Servlet 的生命周期方法（假设读者忘记或者对<code>Servlet</code> 生命周期不熟悉）：</p><ul><li><strong>init</strong>：<code>Servlet</code> 创建对象之后调用</li><li><strong>service</strong>：<code>Servlet</code> 对象被 <code>HTTP</code> 请求访问时调用</li><li><strong>destroy</strong>：<code>Servlet</code> 对象被销毁之前调用</li></ul><h2 id="Spring-MVC-总体流程"><a href="#Spring-MVC-总体流程" class="headerlink" title="Spring MVC 总体流程"></a>Spring MVC 总体流程</h2><p>首先我们来看看 Spring MVC 中处理流程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;前两天看了 Spring IOC 容器的源码，了解了容器是怎么初始化，Spring Beans 的生命周期，以及初始化时很多设计模式的使用。这篇文章将带大家阅读 Spring MVC 处理请求的流程源码（有理解不当之处请谅解），在阅读 Spring MVC 源码之前，建议读者先阅读这一篇文章 &lt;a href=&quot;[https://rayyq.github.io/2019/05/27/Spring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/](https://rayyq.github.io/2019/05/27/Spring-IOC-容器源码分析/&quot;&gt;Spring IOC 容器源码分析&lt;/a&gt;)，这将有助于读者理解 Spring MVC 中部分源码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文采用的源码版本为 &lt;code&gt;5.0.x.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ryan4cloud.github.io/categories/Spring/"/>
    
    
      <category term="Spring MVC" scheme="http://ryan4cloud.github.io/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC 容器源码分析（转载）</title>
    <link href="http://ryan4cloud.github.io/Spring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://ryan4cloud.github.io/Spring-IOC-容器源码分析/</id>
    <published>2019-05-27T12:12:58.000Z</published>
    <updated>2019-11-11T11:17:14.540Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 最重要的概念是 IOC 和 AOP，本篇文章其实就是要带领大家来分析下 Spring 的 IOC 容器。既然大家平时都要用到 Spring，怎么可以不好好了解 Spring 呢？阅读本文并不能让你成为 Spring 专家，不过一定有助于大家理解 Spring 的很多概念，帮助大家排查应用中和 Spring 相关的一些问题。</p><a id="more"></a><blockquote><p>转载自：<a href="https://javadoop.com/post/spring-ioc" target="_blank" rel="noopener">Spring IOC 容器源码分析</a></p></blockquote><p>本文采用的源码版本是 4.3.11.RELEASE，算是 5.0.x 前比较新的版本了。为了降低难度，本文所说的所有的内容都是基于 xml 的配置的方式，实际使用已经很少人这么做了，至少不是纯 xml 配置，不过从理解源码的角度来看用这种方式来说无疑是最合适的。</p><p>阅读建议：读者至少需要知道怎么配置 Spring，了解 Spring 中的各种概念，少部分内容我还假设读者使用过 SpringMVC。本文要说的 IOC 总体来说有两处地方最重要，一个是创建 Bean 容器，一个是初始化 Bean，如果读者觉得一次性看完本文压力有点大，那么可以按这个思路分两次消化。读者不一定对 Spring 容器的源码感兴趣，也许附录部分介绍的知识对读者有些许作用。</p><p>希望通过本文可以让读者不惧怕阅读 Spring 源码，也希望大家能反馈表述错误或不合理的地方。</p><p><strong>目录</strong></p><!-- toc --><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>先看下最基本的启动 Spring 容器的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationfile.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上代码就可以利用配置文件来启动一个 Spring 容器了，请使用 maven 的小伙伴直接在 dependencies 中加上以下依赖即可，个人比较反对那些不知道要添加什么依赖，然后把 Spring 的所有相关的东西都加进来的方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>spring-context 会自动将 spring-core、spring-beans、spring-aop、spring-expression 这几个基础 jar 包带进来。</p></blockquote><p>多说一句，很多开发者入门就直接接触的 SpringMVC，对 Spring 其实不是很了解，Spring 是渐进式的工具，并不具有很强的侵入性，它的模块也划分得很合理，即使你的应用不是 web 应用，或者之前完全没有使用到 Spring，而你就想用 Spring 的依赖注入这个功能，其实完全是可以的，它的引入不会对其他的组件产生冲突。</p><p>废话说完，我们继续。<code>ApplicationContext context = new ClassPathXmlApplicationContext(...)</code> 其实很好理解，从名字上就可以猜出一二，就是在 ClassPath 中寻找 xml 配置文件，根据 xml 文件内容来构建 ApplicationContext。当然，除了 ClassPathXmlApplicationContext 以外，我们也还有其他构建 ApplicationContext 的方案可供选择，我们先来看看大体的继承结构是怎么样的：</p><p><img src="https://www.javadoop.com/blogimages/spring-context/1.png" alt="1"></p><blockquote><p>读者可以大致看一下类名，源码分析的时候不至于找不着看哪个类，因为 Spring 为了适应各种使用场景，提供的各个接口都可能有很多的实现类。对于我们来说，就是揪着一个完整的分支看完。</p><p>当然，读本文的时候读者也不必太担心，每个代码块分析的时候，我都会告诉读者我们在说哪个类第几行。</p></blockquote><p>我们可以看到，ClassPathXmlApplicationContext 兜兜转转了好久才到 ApplicationContext 接口，同样的，我们也可以使用绿颜色的 <strong>FileSystemXmlApplicationContext</strong> 和 <strong>AnnotationConfigApplicationContext</strong> 这两个类。</p><p><strong>FileSystemXmlApplicationContext</strong> 的构造函数需要一个 xml 配置文件在系统中的路径，其他和 ClassPathXmlApplicationContext 基本上一样。</p><p><strong>AnnotationConfigApplicationContext</strong> 是基于注解来使用的，它不需要配置文件，采用 java 配置类和各种注解来配置，是比较简单的方式，也是大势所趋吧。</p><p>不过本文旨在帮助大家理解整个构建流程，所以决定使用 ClassPathXmlApplicationContext 进行分析。</p><p>我们先来一个简单的例子来看看怎么实例化 ApplicationContext。</p><p>首先，定义一个接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义接口实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们在 <strong>resources</strong> 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml 就可以了：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们就可以跑起来了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用我们的配置文件来启动一个 ApplicationContext</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"context 启动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span>        MessageService messageService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MessageService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这句将输出: hello world</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageService<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上例子很简单，不过也够引出本文的主题了，就是怎么样通过配置文件来启动 Spring 的 ApplicationContext？也就是我们今天要分析的 IOC 的核心了。ApplicationContext 启动过程中，会负责创建实例 Bean，往各个 Bean 中注入依赖等。</p><h2 id="BeanFactory-简介"><a href="#BeanFactory-简介" class="headerlink" title="BeanFactory 简介"></a>BeanFactory 简介</h2><p>BeanFactory，从名字上也很好理解，生产 bean 的工厂，它负责生产和管理各个 bean 实例。</p><p>初学者可别以为我之前说那么多和 BeanFactory 无关，前面说的 ApplicationContext 其实就是一个 BeanFactory。我们来看下和 BeanFactory 接口相关的主要的继承结构：</p><p><img src="https://www.javadoop.com/blogimages/spring-context/2.png" alt="2"></p><p>我想，大家看完这个图以后，可能就不是很开心了。ApplicationContext 往下的继承结构前面一张图说过了，这里就不重复了。这张图呢，背下来肯定是不需要的，有几个重点和大家说明下就好。</p><ol><li>ApplicationContext 继承了 ListableBeanFactory，这个 Listable 的意思就是，通过这个接口，我们可以获取多个 Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean 的。</li><li>ApplicationContext 继承了 HierarchicalBeanFactory，Hierarchical 单词本身已经能说明问题了，也就是说我们可以在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</li><li>AutowireCapableBeanFactory 这个名字中的 Autowire 大家都非常熟悉，它就是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext 并没有继承它，不过不用担心，不使用继承，不代表不可以使用组合，如果你看到 ApplicationContext 接口定义中的最后一个方法 getAutowireCapableBeanFactory() 就知道了。</li><li>ConfigurableListableBeanFactory 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。</li><li>请先不用花时间在其他的接口和类上，先理解我说的这几点就可以了。</li></ol><p>然后，请读者打开编辑器，翻一下 BeanFactory、ListableBeanFactory、HierarchicalBeanFactory、AutowireCapableBeanFactory、ApplicationContext 这几个接口的代码，大概看一下各个接口中的方法，大家心里要有底，限于篇幅，我就不贴代码介绍了。</p><h2 id="启动过程分析"><a href="#启动过程分析" class="headerlink" title="启动过程分析"></a>启动过程分析</h2><p>下面将会是冗长的代码分析，记住，一定要自己打开源码来看，不然纯看是很累的。</p><p>第一步，我们肯定要从 ClassPathXmlApplicationContext 的构造方法说起。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractXmlApplicationContext</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> configResources<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果已经有 ApplicationContext 并需要配置成父子关系，那么调用这个构造方法</span>  <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>ApplicationContext parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> ApplicationContext parent<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span>    <span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 核心方法</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，就是 refresh()，这里简单说下为什么是 refresh()，而不是 init() 这种名字的方法。因为 ApplicationContext 建立起来以后，其实我们是可以通过调用 refresh() 这个方法重建的，refresh() 会将原来的 ApplicationContext 销毁，然后再重新执行一次初始化操作。</p><p>往下看，refresh() 方法里面调用了那么多方法，就知道肯定不简单了，请读者先看个大概，细节之后会详细说。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>      <span class="token comment" spellcheck="true">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>      <span class="token comment" spellcheck="true">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-> beanDefinition 的 map)</span>      ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>      <span class="token comment" spellcheck="true">// 这块待会会展开说</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>         <span class="token comment" spellcheck="true">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>         <span class="token comment" spellcheck="true">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>         <span class="token comment" spellcheck="true">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>         <span class="token comment" spellcheck="true">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 重点，重点，重点</span>         <span class="token comment" spellcheck="true">// 初始化所有的 singleton beans</span>         <span class="token comment" spellcheck="true">//（lazy-init 的除外）</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 最后，广播事件，ApplicationContext 初始化完成</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token comment" spellcheck="true">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把异常往外抛</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们开始一步步来肢解这个 refresh() 方法。</p><h3 id="创建-Bean-容器前的准备工作"><a href="#创建-Bean-容器前的准备工作" class="headerlink" title="创建 Bean 容器前的准备工作"></a>创建 Bean 容器前的准备工作</h3><p>这个比较简单，直接看代码中的几个注释即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 记录启动时间，</span>   <span class="token comment" spellcheck="true">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Initialize any placeholder property sources in the context environment</span>   <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 校验 xml 配置文件</span>   <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>ApplicationEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建-Bean-容器，加载并注册-Bean"><a href="#创建-Bean-容器，加载并注册-Bean" class="headerlink" title="创建 Bean 容器，加载并注册 Bean"></a>创建 Bean 容器，加载并注册 Bean</h3><p>我们回到 refresh() 方法中的下一行 obtainFreshBeanFactory()。</p><p>注意，这个方法是全文最重要的部分之一，这里将会初始化 BeanFactory、加载 Bean、注册 Bean 等等。</p><p>当然，这步结束后，Bean 并没有完成初始化。这里指的是 Bean 实例并未在这一步生成。</p><p>// AbstractApplicationContext.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> ConfigurableListableBeanFactory <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span>   <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回刚刚创建的 BeanFactory</span>   ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean factory for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> beanFactory<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>// AbstractRefreshableApplicationContext.java 120</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span>   <span class="token comment" spellcheck="true">// 注意，应用中 BeanFactory 本来就是可以多个的，这里可不是说应用全局是否有 BeanFactory，而是当前</span>   <span class="token comment" spellcheck="true">// ApplicationContext 是否有 BeanFactory</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始化一个 DefaultListableBeanFactory，为什么用这个，我们马上说。</span>      DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 用于 BeanFactory 的序列化，我想不部分人应该都用不到</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 下面这两个方法很重要，别跟丢了，具体细节之后说</span>      <span class="token comment" spellcheck="true">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span>      <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 加载 Bean 到 BeanFactory 中</span>      <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactoryMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"I/O error parsing bean definition source for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>看到这里的时候，我觉得读者就应该站在高处看 ApplicationContext 了，ApplicationContext 继承自 BeanFactory，但是它不应该被理解为 BeanFactory 的实现类，而是说其内部持有一个实例化的 BeanFactory（DefaultListableBeanFactory）。以后所有的 BeanFactory 相关的操作其实是委托给这个实例来处理的。</p></blockquote><p>我们说说为什么选择实例化 <strong>DefaultListableBeanFactory</strong> ？前面我们说了有个很重要的接口 ConfigurableListableBeanFactory，它实现了 BeanFactory 下面一层的所有三个接口，我把之前的继承图再拿过来大家再仔细看一下：</p><p><img src="https://www.javadoop.com/blogimages/spring-context/3.png" alt="3"></p><p>我们可以看到 ConfigurableListableBeanFactory 只有一个实现类 DefaultListableBeanFactory，而且实现类 DefaultListableBeanFactory 还通过实现右边的 AbstractAutowireCapableBeanFactory 通吃了右路。所以结论就是，最底下这个家伙 DefaultListableBeanFactory 基本上是最牛的 BeanFactory 了，这也是为什么这边会使用这个类来实例化的原因。</p><blockquote><p>如果你想要在程序运行的时候动态往 Spring IOC 容器注册新的 bean，就会使用到这个类。那我们怎么在运行时获得这个实例呢？</p><p>之前我们说过 ApplicationContext 接口能获取到 AutowireCapableBeanFactory，就是最右上角那个，然后它向下转型就能得到 DefaultListableBeanFactory 了。</p></blockquote><p>在继续往下之前，我们需要先了解 BeanDefinition。<strong>我们说 BeanFactory 是 Bean 容器，那么 Bean 又是什么呢？</strong></p><p>这里的 BeanDefinition 就是我们所说的 Spring 的 Bean，我们自己定义的各个 Bean 其实会转换成一个个 BeanDefinition 存在于 Spring 的 BeanFactory 中。</p><p>所以，如果有人问你 Bean 是什么的时候，你要知道 Bean 在代码层面上可以认为是 BeanDefinition 的实例。</p><blockquote><p>BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</p></blockquote><h4 id="BeanDefinition-接口定义"><a href="#BeanDefinition-接口定义" class="headerlink" title="BeanDefinition 接口定义"></a>BeanDefinition 接口定义</h4><p>我们来看下 BeanDefinition 的接口定义：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinition</span> <span class="token keyword">extends</span> <span class="token class-name">AttributeAccessor</span><span class="token punctuation">,</span> BeanMetadataElement <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 我们可以看到，默认只提供 sington 和 prototype 两种，</span>   <span class="token comment" spellcheck="true">// 很多读者可能知道还有 request, session, globalSession, application, websocket 这几种，</span>   <span class="token comment" spellcheck="true">// 不过，它们属于基于 web 的扩展。</span>   String SCOPE_SINGLETON <span class="token operator">=</span> ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_SINGLETON<span class="token punctuation">;</span>   String SCOPE_PROTOTYPE <span class="token operator">=</span> ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 比较不重要，直接跳过吧</span>   <span class="token keyword">int</span> ROLE_APPLICATION <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> ROLE_SUPPORT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> ROLE_INFRASTRUCTURE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置父 Bean，这里涉及到 bean 继承，不是 java 继承。请参见附录的详细介绍</span>   <span class="token comment" spellcheck="true">// 一句话就是：继承父 Bean 的配置信息而已</span>   <span class="token keyword">void</span> <span class="token function">setParentName</span><span class="token punctuation">(</span>String parentName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取父 Bean</span>   String <span class="token function">getParentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置 Bean 的类名称，将来是要通过反射来生成实例的</span>   <span class="token keyword">void</span> <span class="token function">setBeanClassName</span><span class="token punctuation">(</span>String beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 Bean 的类名称</span>   String <span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置 bean 的 scope</span>   <span class="token keyword">void</span> <span class="token function">setScope</span><span class="token punctuation">(</span>String scope<span class="token punctuation">)</span><span class="token punctuation">;</span>   String <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置是否懒加载</span>   <span class="token keyword">void</span> <span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> lazyInit<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置该 Bean 依赖的所有的 Bean，注意，这里的依赖不是指属性依赖(如 @Autowire 标记的)，</span>   <span class="token comment" spellcheck="true">// 是 depends-on="" 属性设置的值。</span>   <span class="token keyword">void</span> <span class="token function">setDependsOn</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> dependsOn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回该 Bean 的所有依赖</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置该 Bean 是否可以注入到其他 Bean 中，只对根据类型注入有效，</span>   <span class="token comment" spellcheck="true">// 如果根据名称注入，即使这边设置了 false，也是可以的</span>   <span class="token keyword">void</span> <span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 该 Bean 是否可以注入到其他 Bean 中</span>   <span class="token keyword">boolean</span> <span class="token function">isAutowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 主要的。同一接口的多个实现，如果不指定名字的话，Spring 会优先选择设置 primary 为 true 的 bean</span>   <span class="token keyword">void</span> <span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> primary<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否是 primary 的</span>   <span class="token keyword">boolean</span> <span class="token function">isPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果该 Bean 采用工厂方法生成，指定工厂名称。对工厂不熟悉的读者，请参加附录</span>   <span class="token comment" spellcheck="true">// 一句话就是：有些实例不是用反射生成的，而是用工厂模式生成的</span>   <span class="token keyword">void</span> <span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span>String factoryBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取工厂名称</span>   String <span class="token function">getFactoryBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指定工厂类中的 工厂方法名称</span>   <span class="token keyword">void</span> <span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span>String factoryMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取工厂类中的 工厂方法名称</span>   String <span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 构造器参数</span>   ConstructorArgumentValues <span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Bean 中的属性值，后面给 bean 注入属性值的时候会说到</span>   MutablePropertyValues <span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否 singleton</span>   <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否 prototype</span>   <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果这个 Bean 是被设置为 abstract，那么不能实例化，</span>   <span class="token comment" spellcheck="true">// 常用于作为 父bean 用于继承，其实也很少用......</span>   <span class="token keyword">boolean</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String <span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   BeanDefinition <span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个 BeanDefinition 其实已经包含很多的信息了，暂时不清楚所有的方法对应什么东西没关系，希望看完本文后读者可以彻底搞清楚里面的所有东西。</p><p>这里接口虽然那么多，但是没有类似 getInstance() 这种方法来获取我们定义的类的实例，真正的我们定义的类生成的实例到哪里去了呢？别着急，这个要很后面才能讲到。</p></blockquote><p>有了 BeanDefinition 的概念以后，我们再往下看 refreshBeanFactory() 方法中的剩余部分：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>虽然只有两个方法，但路还很长啊。。。</p><h4 id="customizeBeanFactory"><a href="#customizeBeanFactory" class="headerlink" title="customizeBeanFactory"></a>customizeBeanFactory</h4><p>customizeBeanFactory(beanFactory) 比较简单，就是配置是否允许 BeanDefinition 覆盖、是否允许循环引用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 是否允许 Bean 定义覆盖</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 是否允许 Bean 间的循环依赖</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setAllowCircularReferences</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BeanDefinition 的覆盖问题可能会有开发者碰到这个坑，就是在配置文件中定义 bean 时使用了相同的 id 或 name，默认情况下，allowBeanDefinitionOverriding 属性为 null，如果在同一配置文件中重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p><p>循环引用也很好理解：A 依赖 B，而 B 依赖 A。或 A 依赖 B，B 依赖 C，而 C 依赖 A。</p><p>默认情况下，Spring 允许循环依赖，当然如果你在 A 的构造方法中依赖 B，在 B 的构造方法中依赖 A 是不行的。</p><p>至于这两个属性怎么配置？我在附录中进行了介绍，尤其对于覆盖问题，很多人都希望禁止出现 Bean 覆盖，可是 Spring 默认是不同文件的时候可以覆盖的。</p><p>之后的源码中还会出现这两个属性，读者有个印象就可以了。</p><h4 id="加载-Bean-loadBeanDefinitions"><a href="#加载-Bean-loadBeanDefinitions" class="headerlink" title="加载 Bean: loadBeanDefinitions"></a>加载 Bean: loadBeanDefinitions</h4><p>接下来是最重要的 loadBeanDefinitions(beanFactory) 方法了，这个方法将根据配置，加载各个 Bean，然后放到 BeanFactory 中。</p><p>读取配置的操作在 XmlBeanDefinitionReader 中，其负责加载配置、解析。</p><p>// AbstractXmlApplicationContext.java 80</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 我们可以看到，此方法将通过一个 XmlBeanDefinitionReader 实例来加载各个 Bean。*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader</span>   XmlBeanDefinitionReader beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Configure the bean definition reader with this context's</span>   <span class="token comment" spellcheck="true">// resource loading environment.</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 初始化 BeanDefinitionReader，其实这个是提供给子类覆写的，</span>   <span class="token comment" spellcheck="true">// 我看了一下，没有类覆写这个方法，我们姑且当做不重要吧</span>   <span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重点来了，继续往下</span>   <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在还在这个类中，接下来用刚刚初始化的 Reader 开始来加载 xml 配置，这块代码读者可以选择性跳过，不是很重要。也就是说，下面这个代码块，读者可以很轻松地略过。</p><p>// AbstractXmlApplicationContext.java 120</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>XmlBeanDefinitionReader reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>   Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 往下看</span>      reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2</span>      reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> <span class="token string">"Resource array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注意这里是个 for 循环，也就是每个文件是一个 resource</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 继续往下看</span>      counter <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 最后返回 counter，表示总共加载了多少的 BeanDefinition</span>   <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// XmlBeanDefinitionReader 303</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// XmlBeanDefinitionReader 314</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>EncodedResource encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">,</span> <span class="token string">"EncodedResource must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Loading XML bean definitions from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 用一个 ThreadLocal 来存放配置文件资源</span>   Set<span class="token operator">&lt;</span>EncodedResource<span class="token operator">></span> currentResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currentResources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>EncodedResource<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentResources<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>            <span class="token string">"Detected cyclic loading of "</span> <span class="token operator">+</span> encodedResource <span class="token operator">+</span> <span class="token string">" - check your import definitions!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      InputStream inputStream <span class="token operator">=</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         InputSource inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inputSource<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 核心部分是这里，往下面看</span>         <span class="token keyword">return</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>            <span class="token string">"IOException parsing XML document from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      currentResources<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 还在这个文件中，第 388 行</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>InputSource inputSource<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里就不看了，将 xml 文件转换为 Document 对象</span>      Document doc <span class="token operator">=</span> <span class="token function">doLoadDocument</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 继续</span>      <span class="token keyword">return</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 还在这个文件中，第 505 行</span><span class="token comment" spellcheck="true">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   BeanDefinitionDocumentReader documentReader <span class="token operator">=</span> <span class="token function">createBeanDefinitionDocumentReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> countBefore <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里</span>   documentReader<span class="token punctuation">.</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token function">createReaderContext</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> countBefore<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// DefaultBeanDefinitionDocumentReader 90</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> XmlReaderContext readerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext <span class="token operator">=</span> readerContext<span class="token punctuation">;</span>   logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loading bean definitions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Element root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 从 xml 根节点开始解析文件</span>   <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过漫长的链路，一个配置文件终于转换为一颗 DOM 树了，注意，这里指的是其中一个配置文件，不是所有的，读者可以看到上面有个 for 循环的。下面开始从根节点开始解析：</p><h5 id="doRegisterBeanDefinitions："><a href="#doRegisterBeanDefinitions：" class="headerlink" title="doRegisterBeanDefinitions："></a>doRegisterBeanDefinitions：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DefaultBeanDefinitionDocumentReader 116</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 我们看名字就知道，BeanDefinitionParserDelegate 必定是一个重要的类，它负责解析 Bean 定义，</span>   <span class="token comment" spellcheck="true">// 这里为什么要定义一个 parent? 看到后面就知道了，是递归问题，</span>   <span class="token comment" spellcheck="true">// 因为 &lt;beans /> 内部是可以定义 &lt;beans /> 的，所以这个方法的 root 其实不一定就是 xml 的根节点，也可以是嵌套在里面的 &lt;beans /> 节点，从源码分析的角度，我们当做根节点就好了</span>   BeanDefinitionParserDelegate parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token function">createDelegate</span><span class="token punctuation">(</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这块说的是根节点 &lt;beans ... profile="dev" /> 中的 profile 是否是当前环境需要的，</span>      <span class="token comment" spellcheck="true">// 如果当前环境配置的 profile 不包含此 profile，那就直接 return 了，不对此 &lt;beans /> 解析</span>      <span class="token comment" spellcheck="true">// 不熟悉 profile 为何物，不熟悉怎么配置 profile 读者的请移步附录区</span>      String profileSpec <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PROFILE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>profileSpec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> specifiedProfiles <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>               profileSpec<span class="token punctuation">,</span> BeanDefinitionParserDelegate<span class="token punctuation">.</span>MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>specifiedProfiles<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Skipped XML bean definition file due to specified profiles ["</span> <span class="token operator">+</span> profileSpec <span class="token operator">+</span>                     <span class="token string">"] not matching: "</span> <span class="token operator">+</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token function">preProcessXml</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 钩子</span>   <span class="token comment" spellcheck="true">// 往下看</span>   <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">postProcessXml</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 钩子</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>preProcessXml(root) 和 postProcessXml(root) 是给子类用的钩子方法，鉴于没有被使用到，也不是我们的重点，我们直接跳过。</p><p>这里涉及到了 profile 的问题，对于不了解的读者，我在附录中对 profile 做了简单的解释，读者可以参考一下。</p><p>接下来，看核心解析方法 parseBeanDefinitions(root, this.delegate) :</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// default namespace 涉及到的就四个标签 &lt;import />、&lt;alias />、&lt;bean /> 和 &lt;beans />，</span><span class="token comment" spellcheck="true">// 其他的属于 custom 的</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      NodeList nl <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Element ele <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 解析 default namespace 下面的几个元素</span>               <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 解析其他 namespace 的元素</span>               delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码，我们可以看到，对于每个配置来说，分别进入到 parseDefaultElement(ele, delegate); 和 delegate.parseCustomElement(ele); 这两个分支了。</p><p>parseDefaultElement(ele, delegate) 代表解析的节点是 <code>&lt;import /&gt;</code>、<code>&lt;alias /&gt;</code>、<code>&lt;bean /&gt;</code>、<code>&lt;beans /&gt;</code> 这几个。</p><blockquote><p>这里的四个标签之所以是 default 的，是因为它们是处于这个 namespace 下定义的：</p><pre><code>http://www.springframework.org/schema/beans</code></pre><p>又到初学者科普时间，不熟悉 namespace 的读者请看下面贴出来的 xml，这里的第二行 <strong>xmlns</strong> 就是咯。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>            http://www.springframework.org/schema/beans          http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而对于其他的标签，将进入到 delegate.parseCustomElement(element) 这个分支。如我们经常会使用到的 <code>&lt;mvc /&gt;</code>、<code>&lt;task /&gt;</code>、<code>&lt;context /&gt;</code>、<code>&lt;aop /&gt;</code>等。</p><p>这些属于扩展，如果需要使用上面这些 ”非 default“ 标签，那么上面的 xml 头部的地方也要引入相应的 namespace 和 .xsd 文件的路径，如下所示。同时代码中需要提供相应的 parser 来解析，如 MvcNamespaceHandler、TaskNamespaceHandler、ContextNamespaceHandler、AopNamespaceHandler 等。</p><p>假如读者想分析 <code>&lt;context:property-placeholder location=&quot;classpath:xx.properties&quot; /&gt;</code> 的实现原理，就应该到 ContextNamespaceHandler 中找答案。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>           http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context.xsd           http://www.springframework.org/schema/mvc              http://www.springframework.org/schema/mvc/spring-mvc.xsd         <span class="token punctuation">"</span></span>      <span class="token attr-name">default-autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>回过神来，看看处理 default 标签的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> IMPORT_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 &lt;import /> 标签</span>      <span class="token function">importBeanDefinitionResource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> ALIAS_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 &lt;alias /> 标签定义</span>      <span class="token comment" spellcheck="true">// &lt;alias name="fromName" alias="toName"/></span>      <span class="token function">processAliasRegistration</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> BEAN_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 &lt;bean /> 标签定义，这也算是我们的重点吧</span>      <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> NESTED_BEANS_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果碰到的是嵌套的 &lt;beans /> 标签，需要递归</span>      <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果每个标签都说，那我不吐血，你们都要吐血了。我们挑我们的重点 <code>&lt;bean /&gt;</code> 标签出来说。</p><h5 id="processBeanDefinition-解析-bean-标签"><a href="#processBeanDefinition-解析-bean-标签" class="headerlink" title="processBeanDefinition 解析 bean 标签"></a>processBeanDefinition 解析 bean 标签</h5><p>下面是 processBeanDefinition 解析 <code>&lt;bean /&gt;</code> 标签：</p><p>// DefaultBeanDefinitionDocumentReader 298</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 将 &lt;bean /> 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder 中，细节往下看</span>   BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 下面的几行先不要看，跳过先，跳过先，跳过先，后面会继续说的</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Register the final decorated instance.</span>         BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>               bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Send registration event.</span>      <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续往下看怎么解析之前，我们先看下 <strong><code>&lt;bean /&gt;</code></strong> 标签中可以定义哪些属性：</p><table><thead><tr><th>Property</th><th></th></tr></thead><tbody><tr><td>class</td><td>类的全限定名</td></tr><tr><td>name</td><td>可指定 id、name(用逗号、分号、空格分隔)</td></tr><tr><td>scope</td><td>作用域</td></tr><tr><td>constructor arguments</td><td>指定构造参数</td></tr><tr><td>properties</td><td>设置属性的值</td></tr><tr><td>autowiring mode</td><td>no(默认值)、byName、byType、 constructor</td></tr><tr><td>lazy-initialization mode</td><td>是否懒加载(如果被非懒加载的bean依赖了那么其实也就不能懒加载了)</td></tr><tr><td>initialization method</td><td>bean 属性设置完成后，会调用这个方法</td></tr><tr><td>destruction method</td><td>bean 销毁后的回调方法</td></tr></tbody></table><p>上面表格中的内容我想大家都非常熟悉吧，如果不熟悉，那就是你不够了解 Spring 的配置了。</p><p>简单地说就是像下面这样子：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name1, name2, name3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.ExampleBean<span class="token punctuation">"</span></span>      <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cleanup<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以用下面三种形式指定构造参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>years<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- property 的几种情况 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integerProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，除了上面举例出来的这些，还有 factory-bean、factory-method、<code>&lt;lockup-method /&gt;</code>、<code>&lt;replaced-method /&gt;</code>、<code>&lt;meta /&gt;</code>、<code>&lt;qualifier /&gt;</code> 这几个，大家是不是熟悉呢？自己检验一下自己对 Spring 中 bean 的了解程度。</p><p>有了以上这些知识以后，我们再继续往里看怎么解析 bean 元素，是怎么转换到 BeanDefinitionHolder 的。</p><p>// BeanDefinitionParserDelegate 428</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>   String id <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ID_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>   String nameAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>NAME_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> aliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span>   <span class="token comment" spellcheck="true">// 当然，如果你不定义 name 属性的话，就是空的了</span>   <span class="token comment" spellcheck="true">// 我在附录中简单介绍了一下 id 和 name 的配置，大家可以看一眼，有个20秒就可以了</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> nameArr <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">,</span> MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>      aliases<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nameArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   String beanName <span class="token operator">=</span> id<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>aliases<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanName <span class="token operator">=</span> aliases<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No XML 'id' specified - using '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>               <span class="token string">"' as bean name and "</span> <span class="token operator">+</span> aliases <span class="token operator">+</span> <span class="token string">" as aliases"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">checkNameUniqueness</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> aliases<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 根据 &lt;bean ...>...&lt;/bean> 中的配置创建 BeanDefinition，然后把配置中的信息都设置到实例中,</span>   <span class="token comment" spellcheck="true">// 细节后面细说，先知道下面这行结束后，一个 BeanDefinition 实例就出来了。</span>   AbstractBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 到这里，整个 &lt;bean /> 标签就算解析结束了，一个 BeanDefinition 就形成了。</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span>      <span class="token comment" spellcheck="true">// 如果读者不感兴趣的话，我觉得不需要关心这块代码，对本文源码分析来说，这些东西不重要</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 按照我们的思路，这里 containingBean 是 null 的</span>               beanName <span class="token operator">=</span> BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>                     beanDefinition<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 如果我们不定义 id 和 name，那么我们引言里的那个例子：</span>               <span class="token comment" spellcheck="true">//   1. beanName 为：com.javadoop.example.MessageServiceImpl#0</span>               <span class="token comment" spellcheck="true">//   2. beanClassName 为：com.javadoop.example.MessageServiceImpl</span>               beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>               String beanClassName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClassName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                     beanName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> beanClassName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                     <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBeanNameInUse</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 把 beanClassName 设置为 Bean 的别名</span>                  aliases<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Neither XML 'id' nor 'name' specified - "</span> <span class="token operator">+</span>                     <span class="token string">"using generated bean name ["</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliasesArray <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>aliases<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回 BeanDefinitionHolder</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> aliasesArray<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们再看看怎么根据配置创建 BeanDefinition 实例的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> AbstractBeanDefinition <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>      Element ele<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanEntry</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String className <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      className <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      String parent <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>PARENT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         parent <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PARENT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 创建 BeanDefinition，然后设置类信息而已，很简单，就不贴代码了</span>      AbstractBeanDefinition bd <span class="token operator">=</span> <span class="token function">createBeanDefinition</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span>      <span class="token function">parseBeanDefinitionAttributes</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      bd<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>DomUtils<span class="token punctuation">.</span><span class="token function">getChildElementValueByTagName</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> DESCRIPTION_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 下面的一堆是解析 &lt;bean>......&lt;/bean> 内部的子元素，       * 解析出来以后的信息都放到 bd 的属性中       */</span>      <span class="token comment" spellcheck="true">// 解析 &lt;meta /></span>      <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;lookup-method /></span>      <span class="token function">parseLookupOverrideSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;replaced-method /></span>      <span class="token function">parseReplacedMethodSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析 &lt;constructor-arg /></span>      <span class="token function">parseConstructorArgElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;property /></span>      <span class="token function">parsePropertyElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 解析 &lt;qualifier /></span>      <span class="token function">parseQualifierElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>      bd<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Bean class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] not found"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Class that bean class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] depends on not found"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Unexpected failure during bean definition parsing"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们已经完成了根据 <code>&lt;bean /&gt;</code> 配置创建了一个 BeanDefinitionHolder 实例。注意，是一个。</p><p>我们回到解析 <code>&lt;bean /&gt;</code> 的入口方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 将 &lt;bean /> 节点转换为 BeanDefinitionHolder，就是上面说的一堆</span>   BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果有自定义属性的话，进行相应的解析，先忽略</span>      bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 我们把这步叫做 注册Bean 吧</span>         BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>               bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 注册完成后，发送事件，本文不展开说这个</span>      <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家再仔细看一下这块吧，我们后面就不回来说这个了。这里已经根据一个 <code>&lt;bean /&gt;</code> 标签产生了一个 BeanDefinitionHolder 的实例，这个实例里面也就是一个 BeanDefinition 的实例和它的 beanName、aliases 这三个信息，注意，我们的关注点始终在 BeanDefinition 上：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinitionHolder</span> <span class="token keyword">implements</span> <span class="token class-name">BeanMetadataElement</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> BeanDefinition beanDefinition<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String beanName<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们准备注册这个 BeanDefinition，最后，把这个注册事件发送出去。</p><p>下面，我们开始说说注册 Bean 吧。</p><h5 id="注册-Bean"><a href="#注册-Bean" class="headerlink" title="注册 Bean"></a>注册 Bean</h5><p>// BeanDefinitionReaderUtils 143</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>      BeanDefinitionHolder definitionHolder<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   String beanName <span class="token operator">=</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注册这个 Bean</span>   registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果还有别名的话，也要根据别名全部注册一遍，不然根据别名就会找不到 Bean 了</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>aliases <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String alias <span class="token operator">:</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// alias -> beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span>         <span class="token comment" spellcheck="true">// 获取的时候，会先将 alias 转换为 beanName，然后再查找</span>         registry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> alias<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别名注册的放一边，毕竟它很简单，我们看看怎么注册 Bean。</p><p>// DefaultListableBeanFactory 793</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Bean name must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token string">"BeanDefinition must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// old? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span>   BeanDefinition oldBeanDefinition<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span>   oldBeanDefinition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 处理重复名称的 Bean 定义的情况</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBeanDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果不允许覆盖的话，抛异常</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBeanDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// log...用框架定义的 Bean 覆盖用户自定义的 Bean </span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanDefinition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>oldBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// log...用新的 Bean 覆盖旧的 Bean</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// log...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 true 的 Bean</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 覆盖</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断是否已经有其他的 Bean 开始初始化了.</span>      <span class="token comment" spellcheck="true">// 注意，"注册Bean" 这个动作结束，Bean 依然还没有初始化，我们后面会有大篇幅说初始化过程，</span>      <span class="token comment" spellcheck="true">// 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanCreationStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Cannot modify startup-time collection elements anymore (for stable iteration)</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> updatedDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            updatedDefinitions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>            updatedDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames <span class="token operator">=</span> updatedDefinitions<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               Set<span class="token operator">&lt;</span>String<span class="token operator">></span> updatedSingletons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames<span class="token punctuation">)</span><span class="token punctuation">;</span>               updatedSingletons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames <span class="token operator">=</span> updatedSingletons<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 最正常的应该是进到这个分支。</span>         <span class="token comment" spellcheck="true">// 将 BeanDefinition 放到这个 map 中，这个 map 保存了所有的 BeanDefinition</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这是个 ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span>         <span class="token comment" spellcheck="true">// 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span>         <span class="token comment" spellcheck="true">// 手动指的是通过调用以下方法注册的 bean ：</span>         <span class="token comment" spellcheck="true">//     registerSingleton(String beanName, Object singletonObject)</span>         <span class="token comment" spellcheck="true">// 这不是重点，解释只是为了不让大家疑惑。Spring 会在后面"手动"注册一些 Bean，</span>         <span class="token comment" spellcheck="true">// 如 "environment"、"systemProperties" 等 bean，我们自己也可以在运行时注册 Bean 到容器中的</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>manualSingletonNames<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 这个不重要，在预初始化的时候会用到，不必管它。</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>frozenBeanDefinitionNames <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>oldBeanDefinition <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下，到这里已经初始化了 Bean 容器，<code>&lt;bean /&gt;</code> 配置也相应的转换为了一个个 BeanDefinition，然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件。</p><blockquote><p>到这里是一个分水岭，前面的内容都还算比较简单，大家要清楚地知道前面都做了哪些事情。</p></blockquote><h3 id="Bean-容器实例化完成后"><a href="#Bean-容器实例化完成后" class="headerlink" title="Bean 容器实例化完成后"></a>Bean 容器实例化完成后</h3><p>说到这里，我们回到 refresh() 方法，我重新贴了一遍代码，看看我们说到哪了。是的，我们才说完 obtainFreshBeanFactory() 方法。</p><p>考虑到篇幅，这里开始大幅缩减掉没必要详细介绍的部分，大家直接看下面的代码中的注释就好了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>      <span class="token comment" spellcheck="true">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>      <span class="token comment" spellcheck="true">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-> beanDefinition 的 map)</span>      ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>      <span class="token comment" spellcheck="true">// 这块待会会展开说</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>         <span class="token comment" spellcheck="true">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>         <span class="token comment" spellcheck="true">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>         <span class="token comment" spellcheck="true">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>         <span class="token comment" spellcheck="true">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。这里仅仅是注册，之后会看到回调这两方法的时机</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 从方法名就可以知道，典型的模板方法(钩子方法)，不展开说</span>         <span class="token comment" spellcheck="true">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 重点，重点，重点</span>         <span class="token comment" spellcheck="true">// 初始化所有的 singleton beans</span>         <span class="token comment" spellcheck="true">//（lazy-init 的除外）</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 最后，广播事件，ApplicationContext 初始化完成，不展开</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token comment" spellcheck="true">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把异常往外抛</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备-Bean-容器-prepareBeanFactory"><a href="#准备-Bean-容器-prepareBeanFactory" class="headerlink" title="准备 Bean 容器: prepareBeanFactory"></a>准备 Bean 容器: prepareBeanFactory</h3><p>之前我们说过，Spring 把我们在 xml 配置的 bean 都注册以后，会”手动”注册一些特殊的 bean。</p><p>这里简单介绍下 prepareBeanFactory(factory) 方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Configure the factory's standard context characteristics, * such as the context's ClassLoader and post-processors. * @param beanFactory the BeanFactory to configure */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span>   <span class="token comment" spellcheck="true">// 这里设置为加载当前 ApplicationContext 类的类加载器</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置 BeanExpressionResolver</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// </span>   beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 添加一个 BeanPostProcessor，这个 processor 比较简单：</span>   <span class="token comment" spellcheck="true">// 实现了 Aware 接口的 beans 在初始化的时候，这个 processor 负责回调，</span>   <span class="token comment" spellcheck="true">// 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span>   <span class="token comment" spellcheck="true">// 注意：它不仅仅回调 ApplicationContextAware，</span>   <span class="token comment" spellcheck="true">//   还会负责回调 EnvironmentAware、ResourceLoaderAware 等，看下源码就清楚了</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span>   <span class="token comment" spellcheck="true">// Spring 会通过其他方式来处理这些依赖。</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EnvironmentAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>EmbeddedValueResolverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ResourceLoaderAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationEventPublisherAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>MessageSourceAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span>ApplicationContextAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，    * 之前我们说过，"当前 ApplicationContext 持有一个 BeanFactory"，这里解释了第一行    * ApplicationContext 还继承了 ResourceLoader、ApplicationEventPublisher、MessageSource    * 所以对于这几个依赖，可以赋值为 this，注意 this 是一个 ApplicationContext    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean    */</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ResourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationEventPublisher<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span>   <span class="token comment" spellcheck="true">// 那么将其添加到 listener 列表中，可以理解成：注册 事件监听器</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span>   <span class="token comment" spellcheck="true">// tips: ltw 是 AspectJ 的概念，指的是在运行期进行织入，这个和 Spring AOP 不一样，</span>   <span class="token comment" spellcheck="true">//    感兴趣的读者请参考我写的关于 AspectJ 的另一篇文章 https://www.javadoop.com/post/aspectj</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Set a temporary ClassLoader for type matching.</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 从下面几行代码我们可以知道，Spring 往往很 "智能" 就是因为它会帮我们默认注册一些有用的 bean，    * 我们也可以选择覆盖    */</span>   <span class="token comment" spellcheck="true">// 如果没有定义 "environment" 这个 bean，那么 Spring 会 "手动" 注册一个</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果没有定义 "systemProperties" 这个 bean，那么 Spring 会 "手动" 注册一个</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_PROPERTIES_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果没有定义 "systemEnvironment" 这个 bean，那么 Spring 会 "手动" 注册一个</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>SYSTEM_ENVIRONMENT_BEAN_NAME<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这块代码中，Spring 对一些特殊的 bean 进行了处理，读者如果暂时还不能消化它们也没有关系，慢慢往下看。</p><h3 id="初始化所有的-singleton-beans"><a href="#初始化所有的-singleton-beans" class="headerlink" title="初始化所有的 singleton beans"></a>初始化所有的 singleton beans</h3><p>我们的重点当然是 finishBeanFactoryInitialization(beanFactory); 这个巨头了，这里会负责初始化所有的 singleton beans。</p><p>注意，后面的描述中，我都会使用<strong>初始化</strong>或<strong>预初始化</strong>来代表这个阶段，Spring 会在这个阶段完成所有的 singleton beans 的实例化。</p><p>我们来总结一下，到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory) 方法已经得到回调执行了。而且 Spring 已经“手动”注册了一些特殊的 Bean，如 ‘environment’、‘systemProperties’ 等。</p><p>剩下的就是初始化 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。</p><p>// AbstractApplicationContext.java 834</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化剩余的 singleton beans</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 首先，初始化名字为 conversionService 的 Bean。本着送佛送到西的精神，我在附录中简单介绍了一下 ConversionService，因为这实在太实用了</span>   <span class="token comment" spellcheck="true">// 什么，看代码这里没有初始化 Bean 啊！</span>   <span class="token comment" spellcheck="true">// 注意了，初始化的动作包装在 beanFactory.getBean(...) 中，这里先不说细节，先往下看吧</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Register a default embedded value resolver if no bean post-processor</span>   <span class="token comment" spellcheck="true">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span>   <span class="token comment" spellcheck="true">// at this point, primarily for resolution in annotation attribute values.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">hasEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> String <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>String strVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 先初始化 LoadTimeWeaverAware 类型的 Bean</span>   <span class="token comment" spellcheck="true">// 之前也说过，这是 AspectJ 相关的内容，放心跳过吧</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>LoadTimeWeaverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Stop using the temporary ClassLoader for type matching.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 没什么别的目的，因为到这一步的时候，Spring 已经开始预初始化 singleton beans 了，</span>   <span class="token comment" spellcheck="true">// 肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span>   beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 开始初始化</span>   beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面最后一行往里看，我们就又回到 DefaultListableBeanFactory 这个类了，这个类大家应该都不陌生了吧。</p><h4 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons"></a>preInstantiateSingletons</h4><p>// DefaultListableBeanFactory 728</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// this.beanDefinitionNames 保存了所有的 beanNames</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 触发所有的非懒加载的 singleton beans 的初始化操作</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 合并父 Bean 中的配置，注意 &lt;bean id="" class="" parent="" /> 中的 parent，用的不多吧，</span>      <span class="token comment" spellcheck="true">// 考虑到这可能会影响大家的理解，我在附录中解释了一下 "Bean 继承"，不了解的请到附录中看一下</span>      RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 非抽象、非懒加载的 singletons。如果配置了 'abstract = true'，那是不需要初始化的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 处理 FactoryBean(读者如果不熟悉 FactoryBean，请移步附录区了解)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// FactoryBean 的话，在 beanName 前面加上 ‘&amp;’ 符号。再调用 getBean，getBean 方法别急</span>            <span class="token keyword">final</span> FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span>            <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> Boolean <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                     <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 到这里说明所有的非懒加载的 singleton beans 已经完成了初始化</span>   <span class="token comment" spellcheck="true">// 如果我们定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> null<span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们就进入到 getBean(beanName) 方法了，这个方法我们经常用来从 BeanFactory 中获取一个 Bean，而初始化的过程也封装到了这个方法里。</p><h4 id="getBean"><a href="#getBean" class="headerlink" title="getBean"></a>getBean</h4><p>在继续前进之前，读者应该具备 FactoryBean 的知识，如果读者还不熟悉，请移步附录部分了解 FactoryBean。</p><p>// AbstractBeanFactory 196</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 我们在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，</span><span class="token comment" spellcheck="true">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span>      <span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span>   <span class="token comment" spellcheck="true">// 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span>   <span class="token keyword">final</span> String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注意跟着这个，这个是返回值</span>   Object bean<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查下是不是已经创建过了</span>   Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里说下 args 呗，虽然看上去一点不重要。前面我们一路进来的时候都是 getBean(beanName)，</span>   <span class="token comment" spellcheck="true">// 所以 args 传参其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 下面这个方法：如果是普通 Bean 的话，直接返回 sharedInstance，</span>      <span class="token comment" spellcheck="true">// 如果是 FactoryBean 的话，返回它创建的那个实例对象</span>      <span class="token comment" spellcheck="true">// (FactoryBean 知识，读者若不清楚请移步附录)</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 创建过了此 beanName 的 prototype 类型的 bean，那么抛异常，</span>         <span class="token comment" spellcheck="true">// 往往是因为陷入了循环引用</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 检查一下这个 BeanDefinition 在容器中是否存在</span>      BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span>         String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回父容器的查询结果</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// No args -> delegate to standard getBean method.</span>            <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// typeCheckOnly 为 false，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span>         <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*       * 稍稍总结一下：       * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；       * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。       */</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 先初始化依赖的所有 Bean，这个很好理解。</span>         <span class="token comment" spellcheck="true">// 注意，这里的依赖指的是 depends-on 中定义的依赖</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了，读者想一下就知道了</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 注册一下依赖关系</span>               <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 先初始化被依赖项</span>               <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 如果是 singleton scope 的，创建 singleton 的实例</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 执行创建 Bean，详情后面再说</span>                     <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 如果是 prototype scope 的，创建 prototype 的实例</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>            Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 执行创建 Bean</span>               prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>               <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>                     <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 执行创建 Bean</span>                        <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                     <span class="token string">"Scope '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"' is not active for the current thread; consider "</span> <span class="token operator">+</span>                     <span class="token string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span><span class="token punctuation">,</span>                     ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bean <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                  ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家应该也猜到了，接下来当然是分析 createBean 方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanCreationException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三个参数 args 数组代表创建实例需要的参数，不就是给构造方法用的参数，或者是工厂 Bean 的参数嘛，不过要注意，在我们的初始化阶段，args 是 null。</p><p>这回我们要到一个新的类了 AbstractAutowireCapableBeanFactory，看类名，AutowireCapable？类名是不是也说明了点问题了。</p><p>主要是为了以下场景，采用 @Autowired 注解注入属性值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上这种属于混用了 xml 和 注解 两种方式的配置方式，Spring 会处理这种情况。</p><p>好了，读者要知道这么回事就可以了，继续向前。</p><p>// AbstractAutowireCapableBeanFactory 447</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Central method of this class: creates a bean instance, * populates the bean instance, applies post-processors, etc. * @see #doCreateBean */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   RootBeanDefinition mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 确保 BeanDefinition 中的 Class 被加载</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于 bean 定义中的 &lt;lookup-method /> </span>   <span class="token comment" spellcheck="true">// 和 &lt;replaced-method />，如果读者感兴趣，回到 bean 解析的地方看看对这两个标签的解析。</span>   <span class="token comment" spellcheck="true">// 我在附录中也对这两个标签的相关知识点进行了介绍，读者可以移步去看看</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理，</span>      <span class="token comment" spellcheck="true">// 在 《Spring AOP 源码分析》那篇文章中有解释，这里先跳过</span>      Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bean<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>            <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 重头戏，创建 bean</span>   Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建-Bean"><a href="#创建-Bean" class="headerlink" title="创建 Bean"></a>创建 Bean</h4><p>我们继续往里看 doCreateBean 这个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Actually create the specified bean. Pre-creation processing has already happened * at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks. * &lt;p>Differentiates between default bean instantiation, use of a * factory method, and autowiring a constructor. * @param beanName the name of the bean * @param mbd the merged bean definition for the bean * @param args explicit arguments to use for constructor or factory method invocation * @return a new instance of the bean * @throws BeanCreationException if the bean could not be created * @see #instantiateBean * @see #instantiateUsingFactoryMethod * @see #autowireConstructor */</span><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Instantiate the bean.</span>   BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 说明不是 FactoryBean，这里实例化 Bean，这里非常关键，细节之后再说</span>      instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 这个就是 Bean 里面的 我们定义的类 的实例，很多地方我直接描述成 "bean 实例"</span>   <span class="token keyword">final</span> Object bean <span class="token operator">=</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">!=</span> null <span class="token operator">?</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 类型</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">!=</span> null <span class="token operator">?</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 建议跳过吧，涉及接口：MergedBeanDefinitionPostProcessor</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// MergedBeanDefinitionPostProcessor，这个我真不展开说了，直接跳过吧，很少用的</span>            <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                  <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Eagerly cache singletons to be able to resolve circular references</span>   <span class="token comment" spellcheck="true">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>   <span class="token comment" spellcheck="true">// 下面这块代码是为了解决循环依赖的问题，以后有时间，我再对循环依赖这个问题进行解析吧</span>   <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>         <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>               <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Initialize the bean instance.</span>   Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值</span>      <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？</span>         <span class="token comment" spellcheck="true">// 这里就是处理 bean 初始化完成后的各种回调</span>         exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>               mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// </span>      Object earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                     <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>                     StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>                     <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>                     <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>                     <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>                     <span class="token string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Register bean as disposable.</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们已经分析完了 doCreateBean 方法，总的来说，我们已经说完了整个初始化流程。</p><p>接下来我们挑 doCreateBean 中的三个细节出来说说。一个是创建 Bean 实例的 createBeanInstance 方法，一个是依赖注入的 populateBean 方法，还有就是回调方法 initializeBean。 </p><p>注意了，接下来的这三个方法要认真说那也是极其复杂的，很多地方我就点到为止了，感兴趣的读者可以自己往里看，最好就是碰到不懂的，自己写代码去调试它。</p><h5 id="创建-Bean-实例"><a href="#创建-Bean-实例" class="headerlink" title="创建 Bean 实例"></a>创建 Bean 实例</h5><p>我们先看看 createBeanInstance 方法。需要说明的是，这个方法如果每个分支都分析下去，必然也是极其复杂冗长的，我们挑重点说。此方法的目的就是实例化我们指定的类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> BeanWrapper <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 确保已经加载了此 class</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 校验一下这个类的访问权限</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isNonPublicAccessAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>            <span class="token string">"Bean class isn't public, and non-public access not allowed: "</span> <span class="token operator">+</span> beanClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 采用工厂方法实例化，不熟悉这个概念的读者请看附录，注意，不是 FactoryBean</span>      <span class="token keyword">return</span> <span class="token function">instantiateUsingFactoryMethod</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果不是第一次创建，比如第二次创建 prototype bean。</span>   <span class="token comment" spellcheck="true">// 这种情况下，我们可以从第一次创建知道，采用无参构造函数，还是构造函数依赖注入 来完成实例化</span>   <span class="token keyword">boolean</span> resolved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> autowireNecessary <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>constructorArgumentLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            autowireNecessary <span class="token operator">=</span> mbd<span class="token punctuation">.</span>constructorArgumentsResolved<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>autowireNecessary<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 构造函数依赖注入</span>         <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 无参构造函数</span>         <span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 判断是否采用有参构造函数</span>   Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ctors <span class="token operator">=</span> <span class="token function">determineConstructorsFromBeanPostProcessors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ctors <span class="token operator">!=</span> null <span class="token operator">||</span>         mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_CONSTRUCTOR <span class="token operator">||</span>         mbd<span class="token punctuation">.</span><span class="token function">hasConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 构造函数依赖注入</span>      <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> ctors<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 调用无参构造函数</span>   <span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挑个简单的<strong>无参构造函数</strong>构造实例来看看：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> BeanWrapper <span class="token function">instantiateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      Object beanInstance<span class="token punctuation">;</span>      <span class="token keyword">final</span> BeanFactory parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         beanInstance <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 实例化</span>         beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 包装一下，返回</span>      BeanWrapper bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span>beanInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bw<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，关键的地方在于：</p><pre class="line-numbers language-java"><code class="language-java">beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里会进行实际的实例化过程，我们进去看看:</p><p>// SimpleInstantiationStrategy 59</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">instantiate</span><span class="token punctuation">(</span>RootBeanDefinition bd<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> BeanFactory owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span>   <span class="token comment" spellcheck="true">// 方法覆写 请参见附录"方法注入"中对 lookup-method 和 replaced-method 的介绍</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructorToUse<span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span>constructorArgumentLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>         constructorToUse <span class="token operator">=</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>constructorToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInstantiationException</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token string">"Specified class is an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  constructorToUse <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token operator">&lt;</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token annotation punctuation">@Override</span>                     <span class="token keyword">public</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span>                  constructorToUse <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               bd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod <span class="token operator">=</span> constructorToUse<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInstantiationException</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token string">"No default constructor found"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 利用构造方法进行实例化</span>      <span class="token keyword">return</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>constructorToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类，这里就不展开了。</span>      <span class="token comment" spellcheck="true">// tips: 因为如果不使用 CGLIB 的话，存在 override 的情况 JDK 并没有提供相应的实例化支持</span>      <span class="token keyword">return</span> <span class="token function">instantiateWithMethodInjection</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们就算实例化完成了。我们开始说怎么进行属性注入。</p><h5 id="bean-属性注入"><a href="#bean-属性注入" class="headerlink" title="bean 属性注入"></a>bean 属性注入</h5><p>看完了 createBeanInstance(…) 方法，我们来看看 populateBean(…) 方法，该方法负责进行属性设值，处理依赖。</p><p>// AbstractAutowireCapableBeanFactory 1203</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">populateBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> BeanWrapper bw<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// bean 实例的所有属性都在这里了</span>   PropertyValues pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>               mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Cannot apply property values to null instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Skip property population phase for null instance.</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 到这步的时候，bean 实例化完成（通过工厂方法或构造方法），但是还没开始属性设值，</span>   <span class="token comment" spellcheck="true">// InstantiationAwareBeanPostProcessor 的实现类可以在这里对 bean 进行状态修改，</span>   <span class="token comment" spellcheck="true">// 我也没找到有实际的使用，所以我们暂且忽略这块吧</span>   <span class="token keyword">boolean</span> continueWithPropertyPopulation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果返回 false，代表不需要进行后续的属性设值，也不需要再经过其他的 BeanPostProcessor 的处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ibp<span class="token punctuation">.</span><span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               continueWithPropertyPopulation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>continueWithPropertyPopulation<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_NAME <span class="token operator">||</span>         mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      MutablePropertyValues newPvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通过名字找到所有属性值，如果是 bean 依赖，先初始化依赖的 bean。记录依赖关系</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 通过类型装配。复杂一些</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RootBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      pvs <span class="token operator">=</span> newPvs<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">boolean</span> hasInstAwareBpps <span class="token operator">=</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> needsDepCheck <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getDependencyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RootBeanDefinition<span class="token punctuation">.</span>DEPENDENCY_CHECK_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps <span class="token operator">||</span> needsDepCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>      PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor</span>               <span class="token comment" spellcheck="true">// 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究</span>               pvs <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>needsDepCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">checkDependencies</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 设置 bean 实例的属性值</span>   <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="initializeBean"><a href="#initializeBean" class="headerlink" title="initializeBean"></a>initializeBean</h5><p>属性注入完成后，这一步其实就是处理各种回调了，这块代码比较简单。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> Object bean<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span>      <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Object wrappedBean <span class="token operator">=</span> bean<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// BeanPostProcessor 的 postProcessBeforeInitialization 回调</span>      wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理 bean 中定义的 init-method，</span>      <span class="token comment" spellcheck="true">// 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span>      <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> null <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>            beanName<span class="token punctuation">,</span> <span class="token string">"Invocation of init method failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// BeanPostProcessor 的 postProcessAfterInitialization 回调</span>      wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家发现没有，BeanPostProcessor 的两个回调都发生在这边，只不过中间处理了 init-method，是不是和读者原来的认知有点不一样了？</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="id-和-name"><a href="#id-和-name" class="headerlink" title="id 和 name"></a>id 和 name</h3><p>每个 Bean 在 Spring 容器中都有一个唯一的名字（beanName）和 0 个或多个别名（aliases）。</p><p>我们从 Spring 容器中获取 Bean 的时候，可以根据 beanName，也可以通过别名。</p><pre class="line-numbers language-java"><code class="language-java">beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"beanName or alias"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置 <code>&lt;bean /&gt;</code> 的过程中，我们可以配置 id 和 name，看几个例子就知道是怎么回事了。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m1, m2, m3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上配置的结果就是：beanName 为 messageService，别名有 3 个，分别为 m1、m2、m3。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m1, m2, m3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上配置的结果就是：beanName 为 m1，别名有 2 个，分别为 m2、m3。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>beanName 为：com.javadoop.example.MessageServiceImpl#0，</p><p>别名 1 个，为： com.javadoop.example.MessageServiceImpl</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.javadoop.example.MessageServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上配置的结果就是：beanName 为 messageService，没有别名。</p><h3 id="配置是否允许-Bean-覆盖、是否允许循环依赖"><a href="#配置是否允许-Bean-覆盖、是否允许循环依赖" class="headerlink" title="配置是否允许 Bean 覆盖、是否允许循环依赖"></a>配置是否允许 Bean 覆盖、是否允许循环依赖</h3><p>我们说过，默认情况下，allowBeanDefinitionOverriding 属性为 null。如果在同一配置文件中 Bean id 或 name 重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p><p>可是有些时候我们希望在系统启动的过程中就严格杜绝发生 Bean 覆盖，因为万一出现这种情况，会增加我们排查问题的成本。</p><p>循环依赖说的是 A 依赖 B，而 B 又依赖 A。或者是 A 依赖 B，B 依赖 C，而 C 却依赖 A。默认 allowCircularReferences 也是 null。</p><p>它们两个属性是一起出现的，必然可以在同一个地方一起进行配置。</p><p>添加这两个属性的作者 Juergen Hoeller 在这个 <a href="https://jira.spring.io/browse/SPR-4374" target="_blank" rel="noopener">jira</a> 的讨论中说明了怎么配置这两个属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoBeanOverridingContextLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ContextLoader</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">,</span> ConfigurableWebApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">customizeContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    AbstractRefreshableApplicationContext arac <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractRefreshableApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">;</span>    arac<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContextLoaderListener</span> <span class="token keyword">extends</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> ContextLoader <span class="token function">createContextLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NoBeanOverridingContextLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>com.javadoop.MyContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果以上方式不能满足你的需求，请参考这个链接：<a href="http://blog.csdn.net/zgmzyr/article/details/39380477" target="_blank" rel="noopener">解决spring中不同配置文件中存在name或者id相同的bean可能引起的问题</a></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>我们可以把不同环境的配置分别配置到单独的文件中，举个例子：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jdbc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jdbc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>embedded-database</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/schema.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/test-data.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jdbc:</span>embedded-database</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>production<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jee</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jee:</span>jndi-lookup</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">jndi-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java:comp/env/jdbc/datasource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该不必做过多解释了吧，看每个文件第一行的 profile=””。</p><p>当然，我们也可以在一个配置文件中使用：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jdbc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jdbc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>jee</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/jee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>embedded-database</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/schema.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/bank/config/sql/test-data.sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jdbc:</span>embedded-database</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>production<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jee:</span>jndi-lookup</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">jndi-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java:comp/env/jdbc/datasource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解起来也很简单吧。</p><p>接下来的问题是，怎么使用特定的 profile 呢？Spring 在启动的过程中，会去寻找 “spring.profiles.active” 的属性值，根据这个属性值来的。那怎么配置这个值呢？</p><p>Spring 会在这几个地方寻找 spring.profiles.active 的属性值：操作系统环境变量、JVM 系统变量、web.xml 中定义的参数、JNDI。</p><p>最简单的方式莫过于在程序启动的时候指定：</p><pre class="line-numbers language-shell"><code class="language-shell">-Dspring.profiles.active="profile1,profile2"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>profile 可以激活多个</p></blockquote><p>当然，我们也可以通过代码的形式从 Environment 中设置 profile：</p><pre class="line-numbers language-java"><code class="language-java">AnnotationConfigApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SomeConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> StandaloneDataConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JndiDataConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果是 Spring Boot 的话更简单，我们一般会创建 application.properties、application-dev.properties、application-prod.properties 等文件，其中 application.properties 配置各个环境通用的配置，application-{profile}.properties 中配置特定环境的配置，然后在启动的时候指定 profile：</p><pre class="line-numbers language-shell"><code class="language-shell">java -Dspring.profiles.active=prod -jar JavaDoop.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是单元测试中使用的话，在测试类中使用 @ActiveProfiles 指定，这里就不展开了。</p><h3 id="工厂模式生成-Bean"><a href="#工厂模式生成-Bean" class="headerlink" title="工厂模式生成 Bean"></a>工厂模式生成 Bean</h3><p>请读者注意 factory-bean 和 FactoryBean 的区别。这节说的是前者，是说静态工厂或实例工厂，而后者是 Spring 中的特殊接口，代表一类特殊的 Bean，附录的下面一节会介绍 FactoryBean。</p><p>设计模式里，工厂方法模式分静态工厂和实例工厂，我们分别看看 Spring 中怎么配置这两个，来个代码示例就什么都清楚了。</p><p>静态工厂：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ClientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ClientService clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ClientService <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例工厂：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.DefaultServiceLocator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- inject any dependencies required by this locator bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createClientServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ClientService clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AccountService accountService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ClientService <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AccountService <span class="token function">createAccountServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>FactoryBean 适用于 Bean 的创建过程比较复杂的场景，比如数据库连接池的创建。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    T <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Car car <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们假设现在需要创建一个 Person 的 Bean，首先我们需要一个 Car 的实例，我们这里假设 Car 的实例创建很麻烦，那么我们可以把创建 Car 的复杂过程包装起来：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCarFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Car<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String make<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> year <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMake</span><span class="token punctuation">(</span>String m<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span>m <span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> Car <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 这里我们假设 Car 的实例化过程非常复杂，反正就不是几行代码可以写完的那种</span>      CarBuilder cb <span class="token operator">=</span> CarBuilder<span class="token punctuation">.</span><span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> cb<span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">)</span> cb<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> cb<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span>Car<span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Car<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看看装配的时候是怎么配置的：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;bean class = "com.javadoop.MyCarFactoryBean" id = "car">  &lt;property name = "make" value ="Honda"/>  &lt;property name = "year" value ="1984"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean class = "com.javadoop.Person" id = "josh">  &lt;property name = "car" ref = "car"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到不一样了吗？id 为 “car” 的 bean 其实指定的是一个 FactoryBean，不过配置的时候，我们直接让配置 Person 的 Bean 直接依赖于这个 FactoryBean 就可以了。中间的过程 Spring 已经封装好了。</p><p>说到这里，我们再来点干货。我们知道，现在还用 xml 配置 Bean 依赖的越来越少了，更多时候，我们可能会采用 java  config 的方式来配置，这里有什么不一样呢？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarConfiguration</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token keyword">public</span> MyCarFactoryBean <span class="token function">carFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       MyCarFactoryBean cfb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCarFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cfb<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span><span class="token string">"Honda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cfb<span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token number">1984</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cfb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Person <span class="token function">aPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注意这里的不同</span>    person<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span><span class="token function">carFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> person<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候，其实我们的思路也很简单，把 MyCarFactoryBean 看成是一个简单的 Bean 就可以了，不必理会什么 FactoryBean，它是不是 FactoryBean 和我们没关系。</p><h3 id="初始化-Bean-的回调"><a href="#初始化-Bean-的回调" class="headerlink" title="初始化 Bean 的回调"></a>初始化 Bean 的回调</h3><p>有以下四种方案：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInitBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do some initialization work</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Foo <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="销毁-Bean-的回调"><a href="#销毁-Bean-的回调" class="headerlink" title="销毁 Bean 的回调"></a>销毁 Bean 的回调</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInitBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cleanup<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do some destruction work (like releasing pooled connections)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"cleanup"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Bar <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span>### Bean 继承在初始化 Bean 的地方，我们说过了这个：​```javaRootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里涉及到的就是 <code>&lt;bean parent=&quot;&quot; /&gt;</code> 中的 parent 属性，我们来看看 Spring 中是用这个来干什么的。</p><p>首先，我们要明白，这里的继承和 java 语法中的继承没有任何关系，不过思路是相通的。child bean 会继承 parent bean 的所有配置，也可以覆盖一些配置，当然也可以新增额外的配置。</p><p>Spring 中提供了继承自 AbstractBeanDefinition 的 <code>ChildBeanDefinition</code> 来表示 child bean。</p><p>看如下一个例子:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"inheritedTestBean"</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.beans.TestBean"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"age"</span> value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"inheritsWithDifferentClass"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.beans.DerivedTestBean"</span>        parent<span class="token operator">=</span><span class="token string">"inheritedTestBean"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"initialize"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"override"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parent bean 设置了 <code>abstract=&quot;true&quot;</code> 所以它不会被实例化，child bean 继承了 parent bean 的两个属性，但是对 name 属性进行了覆写。</p><p>child bean 会继承 scope、构造器参数值、属性值、init-method、destroy-method 等等。</p><p>当然，我不是说 parent bean 中的 abstract = true 在这里是必须的，只是说如果加上了以后 Spring 在实例化 singleton beans 的时候会忽略这个 bean。</p><p>比如下面这个极端 parent bean，它没有指定 class，所以毫无疑问，这个 bean 的作用就是用来充当模板用的 parent bean，此处就必须加上 abstract = true。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"inheritedTestBeanWithoutClass"</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"age"</span> value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h3><p>一般来说，我们的应用中大多数的 Bean 都是 singleton 的。singleton 依赖 singleton，或者 prototype 依赖 prototype 都很好解决，直接设置属性依赖就可以了。</p><p>但是，如果是 singleton 依赖 prototype 呢？这个时候不能用属性依赖，因为如果用属性依赖的话，我们每次其实拿到的还是第一次初始化时候的 bean。</p><p>一种解决方案就是不要用属性依赖，每次获取依赖的 bean 的时候从 BeanFactory 中取。这个也是大家最常用的方式了吧。怎么取，我就不介绍了，大部分 Spring 项目大家都会定义那么个工具类的。</p><p>另一种解决方案就是这里要介绍的通过使用 Lookup method。</p><h4 id="lookup-method"><a href="#lookup-method" class="headerlink" title="lookup-method"></a>lookup-method</h4><p>我们来看一下 Spring Reference 中提供的一个例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> fiona<span class="token punctuation">.</span>apple<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// no more Spring imports!</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">process</span><span class="token punctuation">(</span>Object commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// grab a new instance of the appropriate Command interface</span>        Command command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set the state on the (hopefully brand new) Command instance</span>        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// okay... but where is the implementation of this method?</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Command <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml 配置 <code>&lt;lookup-method /&gt;</code>：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCommand<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fiona.apple.AsyncCommand<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- inject dependencies here as required --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- commandProcessor uses statefulCommandHelper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commandManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fiona.apple.CommandManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lookup-method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createCommand<span class="token punctuation">"</span></span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCommand<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring 采用 <strong>CGLIB 生成字节码</strong>的方式来生成一个子类。我们定义的类不能定义为 final class，抽象方法上也不能加 final。</p><p>lookup-method 上的配置也可以采用注解来完成，这样就可以不用配置 <code>&lt;lookup-method /&gt;</code> 了，其他不变：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">process</span><span class="token punctuation">(</span>Object commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCommand command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Lookup</span><span class="token punctuation">(</span><span class="token string">"myCommand"</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Command <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，既然用了注解，要配置注解扫描：<code>&lt;context:component-scan base-package=&quot;com.javadoop&quot; /&gt;</code></p></blockquote><p>甚至，我们可以像下面这样：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">process</span><span class="token punctuation">(</span>Object commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCommand command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Lookup</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> MyCommand <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的返回值用了 MyCommand，当然，如果 Command 只有一个实现类，那返回值也可以写 Command。</p></blockquote><h4 id="replaced-method"><a href="#replaced-method" class="headerlink" title="replaced-method"></a>replaced-method</h4><p>记住它的功能，就是替换掉 bean 中的一些方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyValueCalculator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">computeValue</span><span class="token punctuation">(</span>String input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// some real code...</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// some other methods...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法覆写，注意要实现 MethodReplacer 接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplacementComputeValue</span> <span class="token keyword">implements</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>MethodReplacer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">reimplement</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method m<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// get the input value, work with it, and return a computed result</span>        String input <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置也很简单：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myValueCalculator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x.y.z.MyValueCalculator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义 computeValue 这个方法要被替换掉 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replaced-method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>computeValue<span class="token punctuation">"</span></span> <span class="token attr-name">replacer</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>replacementComputeValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg-type</span><span class="token punctuation">></span></span>String<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg-type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replaced-method</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>replacementComputeValue<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.b.c.ReplacementComputeValue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>arg-type 明显不是必须的，除非存在方法重载，这样必须通过参数类型列表来判断这里要覆盖哪个方法。</p></blockquote><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>应该说 BeanPostProcessor 概念在 Spring 中也是比较重要的。我们看下接口定义：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>   Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>   Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看这个接口中的两个方法名字我们大体上可以猜测 bean 在初始化之前会执行 postProcessBeforeInitialization 这个方法，初始化完成之后会执行 postProcessAfterInitialization 这个方法。但是，这么理解是非常片面的。</p><p>首先，我们要明白，除了我们自己定义的 BeanPostProcessor 实现外，Spring 容器在启动时自动给我们也加了几个。如在获取 BeanFactory 的 obtainFactory() 方法结束后的 prepareBeanFactory(factory)，大家仔细看会发现，Spring 往容器中添加了这两个 BeanPostProcessor：ApplicationContextAwareProcessor、ApplicationListenerDetector。</p><p>我们回到这个接口本身，读者请看第一个方法，这个方法接受的第一个参数是 bean 实例，第二个参数是 bean 的名字，重点在返回值将会作为新的 bean 实例，所以，没事的话这里不能随便返回个 null。</p><p>那意味着什么呢？我们很容易想到的就是，我们这里可以对一些我们想要修饰的 bean 实例做一些事情。但是对于 Spring 框架来说，它会决定是不是要在这个方法中返回 bean 实例的代理，这样就有更大的想象空间了。</p><p>最后，我们说说如果我们自己定义一个 bean 实现 BeanPostProcessor 的话，它的执行时机是什么时候？</p><p>如果仔细看了代码分析的话，其实很容易知道了，在 bean 实例化完成、属性注入完成之后，会执行回调方法，具体请参见类 AbstractAutowireCapableBeanFactory#initBean 方法。</p><p>首先会回调几个实现了 Aware 接口的 bean，然后就开始回调 BeanPostProcessor 的 postProcessBeforeInitialization 方法，之后是回调 init-method，然后再回调 BeanPostProcessor 的 postProcessAfterInitialization 方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按理说，总结应该写在附录前面，我就不讲究了。</p><p>在花了那么多时间后，这篇文章终于算是基本写完了，大家在惊叹 Spring 给我们做了那么多的事的时候，应该透过现象看本质，去理解 Spring 写得好的地方，去理解它的设计思想。</p><p>本文的缺陷在于对 Spring 预初始化 singleton beans 的过程分析不够，主要是代码量真的比较大，分支旁路众多。同时，虽然附录条目不少，但是庞大的 Spring 真的引出了很多的概念，希望日后有精力可以慢慢补充一些。</p><p>（全文完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 最重要的概念是 IOC 和 AOP，本篇文章其实就是要带领大家来分析下 Spring 的 IOC 容器。既然大家平时都要用到 Spring，怎么可以不好好了解 Spring 呢？阅读本文并不能让你成为 Spring 专家，不过一定有助于大家理解 Spring 的很多概念，帮助大家排查应用中和 Spring 相关的一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ryan4cloud.github.io/categories/Spring/"/>
    
    
      <category term="Spring IOC" scheme="http://ryan4cloud.github.io/tags/Spring-IOC/"/>
    
  </entry>
  
</feed>
